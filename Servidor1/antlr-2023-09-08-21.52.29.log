2023-09-08 21:52:27:352 grammar LogManager.java:25 before: (LEXER_GRAMMAR swiftlexer (RULES (RULE PRINT_CON (BLOCK (ALT 'print'))) (RULE T_NUMBER (BLOCK (ALT 'Int'))) (RULE T_FLOAT (BLOCK (ALT 'Float'))) (RULE T_STRING (BLOCK (ALT 'String'))) (RULE T_BOOL (BLOCK (ALT 'Bool'))) (RULE T_STR (BLOCK (ALT ' String'))) (RULE T_CHAT (BLOCK (ALT 'Character'))) (RULE T_ARRAY (BLOCK (ALT 'array'))) (RULE T_VECTOR (BLOCK (ALT 'Vector'))) (RULE USIZE (BLOCK (ALT 'usize'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE MTOR (BLOCK (ALT '|'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE AS (BLOCK (ALT 'as'))) (RULE AT (BLOCK (ALT 'at'))) (RULE LET (BLOCK (ALT 'let'))) (RULE MUT (BLOCK (ALT 'var'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NEW (BLOCK (ALT 'new()'))) (RULE CAPF (BLOCK (ALT 'capacity()'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE INSERT (BLOCK (ALT 'insert'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE MODULO (BLOCK (ALT 'mod'))) (RULE TYPETHEN (BLOCK (ALT '->'))) (RULE FN (BLOCK (ALT 'func'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE DOSPUNTO (BLOCK (ALT '::'))) (RULE DPUNTO2 (BLOCK (ALT ':'))) (RULE ASIGNACION (BLOCK (ALT '='))) (RULE MTHEN (BLOCK (ALT '=>'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DISTINTO (BLOCK (ALT '!='))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE ASIG (BLOCK (ALT '+='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE INTERROG (BLOCK (ALT '?'))) (RULE AMP (BLOCK (ALT '&'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE CHAR (BLOCK (ALT ['] [a-zA-Z0-9] [']))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE L_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 21:52:27:414 grammar LogManager.java:25 after: (LEXER_GRAMMAR swiftlexer (RULES (RULE PRINT_CON (BLOCK (ALT 'print'))) (RULE T_NUMBER (BLOCK (ALT 'Int'))) (RULE T_FLOAT (BLOCK (ALT 'Float'))) (RULE T_STRING (BLOCK (ALT 'String'))) (RULE T_BOOL (BLOCK (ALT 'Bool'))) (RULE T_STR (BLOCK (ALT ' String'))) (RULE T_CHAT (BLOCK (ALT 'Character'))) (RULE T_ARRAY (BLOCK (ALT 'array'))) (RULE T_VECTOR (BLOCK (ALT 'Vector'))) (RULE USIZE (BLOCK (ALT 'usize'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE MTOR (BLOCK (ALT '|'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE AS (BLOCK (ALT 'as'))) (RULE AT (BLOCK (ALT 'at'))) (RULE LET (BLOCK (ALT 'let'))) (RULE MUT (BLOCK (ALT 'var'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NEW (BLOCK (ALT 'new()'))) (RULE CAPF (BLOCK (ALT 'capacity()'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE INSERT (BLOCK (ALT 'insert'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE MODULO (BLOCK (ALT 'mod'))) (RULE TYPETHEN (BLOCK (ALT '->'))) (RULE FN (BLOCK (ALT 'func'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE DOSPUNTO (BLOCK (ALT '::'))) (RULE DPUNTO2 (BLOCK (ALT ':'))) (RULE ASIGNACION (BLOCK (ALT '='))) (RULE MTHEN (BLOCK (ALT '=>'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DISTINTO (BLOCK (ALT '!='))) (RULE IGUAL (BLOCK (ALT '=='))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE ASIG (BLOCK (ALT '+='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE INTERROG (BLOCK (ALT '?'))) (RULE AMP (BLOCK (ALT '&'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE CHAR (BLOCK (ALT ['] [a-zA-Z0-9] [']))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE L_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
