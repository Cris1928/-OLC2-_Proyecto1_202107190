2023-09-06 10:20:04:901 grammar LogManager.java:25 before: (PARSER_GRAMMAR swiftgrammar (OPTIONS (= tokenVocab swiftlexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"



}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT listaglobal {$lista = $listaglobal.lista}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    }))) (RULE listaglobal (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= lisfun listaglobal) in_global {
                                          $lisfun.lista.Add( $in_global.globals)
                                          $lista =  $lisfun.lista
                                        }) (ALT in_global { $lista.Add( $in_global.globals ) }))) (RULE in_global (returns  interfaces.Instruction globals ) (BLOCK (ALT funcion {$globals = $funcion.instr}) (ALT newStruct {$globals = $newStruct.str}))) (RULE modulo_item (returns interfaces.Instruction instr) (BLOCK (ALT funcion {$instr = $funcion.instr}) (ALT newStruct {$instr = $newStruct.str}))) (RULE funcion (returns  interfaces.Instruction  instr) (@ init { listParams :=  arrayList.New() }) (BLOCK (ALT fn_main {$instr =  $fn_main.instr}) (ALT FN ID '(' ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )}) (ALT FN ID '(' ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN (= id ID) '(' params_declar ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )}))) (RULE params_declar (returns *arrayList.List lista) (@ init {
$lista =  arrayList.New()
}) (BLOCK (ALT (= listdec params_declar) ',' declar_parametros {
                                                            $listdec.lista.Add($declar_parametros.in_dec)
                                                            $lista =  $listdec.lista }) (ALT declar_parametros {   $lista.Add($declar_parametros.in_dec) }))) (RULE declar_parametros (returns interfaces.Instruction in_dec) (BLOCK (ALT (= isVar es_var) ID ':' tipos_var {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isVar.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia '[' (= idob ID) ']' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $es_referencia.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia '[' tipos_var ']' {
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $es_referencia.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    }) (ALT ID ':' INOUT array_type {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia (= idstruct ID) { 
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $es_referencia.ref, $id.line, $id.pos)
                            $in_dec = decl
                        }) (ALT (= isRef es_var) (= id ID) ':' '[' (= idob ID) ']' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isRef.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }))) (RULE fn_main (returns interfaces.Instruction instr) (@ init { listParams:= arrayList.New() }) (BLOCK (ALT bloque_princip '.' { $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )}))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT appendVec {$instr = $appendVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT switch_sent {$instr = $switch_sent.instr}) (ALT while_true { $instr = $while_true.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT newStruct {$instr = $newStruct.str}) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT ID '.' REMOVE '(' AT ':' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE instruccion_dentro (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT appendVec {$instr = $appendVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT switch_sent {$instr = $switch_sent.instr}) (ALT while_true { $instr = $while_true.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT ID '.' REMOVE '(' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE appendVec (returns interfaces.Instruction instr) (BLOCK (ALT ID '.' PUSH '(' (= val expression) ')' {$instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' INSERT '(' (= val1 expression) ',' (= val2 expression) ')' { $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) }))) (RULE newStruct (returns interfaces.Instruction str) (BLOCK (ALT STRUCT ID LLAVEIZQ lista_struct LLAVEDER { $str = instructionExpre.NewStruct($ID.text, $lista_struct.l, $STRUCT.line, $STRUCT.pos) }))) (RULE lista_struct (returns *arrayList.List l) (BLOCK (ALT (= list lista_struct) MUT (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) MUT (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) LET (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) LET (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT MUT (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT MUT (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT LET (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT LET (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }))) (RULE callFunction (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT ID '(' ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    }) (ALT ID '(' listParamsCall ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    }))) (RULE returnFun (returns interfaces.Instruction instr) (BLOCK (ALT RETURN { $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )}) (ALT RETURN expression { $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )}))) (RULE printconsola (returns interfaces.Instruction instr) (BLOCK (ALT PRINT_CON PARIZQ listParams PARDER {$instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )}))) (RULE while_true (returns interfaces.Instruction lop, interfaces.Expresion p) (BLOCK (ALT WHILE TRUE bloque_inst { 
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos ) 
                    }))) (RULE lWhile (returns interfaces.Instruction lwh) (BLOCK (ALT WHILE expression bloque_inst { $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) }))) (RULE lForin (returns interfaces.Instruction lfor) (BLOCK (ALT FOR ID IN expression bloque_inst { $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) }))) (RULE lBreak (returns interfaces.Instruction br) (BLOCK (ALT BREAK { $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) }) (ALT BREAK expression { $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) }))) (RULE lContinue (returns interfaces.Instruction cn) (BLOCK (ALT CONTINUE { $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE listParams (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParams) ',' expression {
                                    $list.l_e.Add($expression.p)
                                    $l_e = $list.l_e
                                }) (ALT expression {$l_e.Add($expression.p)}))) (RULE listParamsCall (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParamsCall) ',' es_referencia expression {
                                    ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                    $list.l_e.Add(ref)
                                    $l_e = $list.l_e
                                }) (ALT es_referencia expression {   ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    }))) (RULE es_referencia (returns bool ref) (BLOCK (ALT AMP { $ref = true }) (ALT { $ref = false }))) (RULE declaracion (returns interfaces.Instruction instr) (BLOCK (ALT (= isVar es_varr) (= id ID) ':' tipos_var (= asig '=') expression { 
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      }) (ALT (= isVar es_varr) (= id ID) letid (= asig '=') expression { 
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    }) (ALT (= isVar es_varr) (= id ID) ':' vector_types '=' CORIZQ CORDER {
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos, nil, "")
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' (= idob ID) ']' '=' CORIZQ CORDER {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isVar.mut, $id.line, $id.pos, nil, $idob.text)
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' (= idob ID) ']' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isVar.mut, $id.line, $id.pos, $expression.p, $idob.text)
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' tipos_var ']' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isVar.mut, $id.line, $id.pos, $expression.p, "")
                    }))) (RULE es_var (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT EPSILON))) (RULE es_varr (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT LET { $mut = false }))) (RULE letid (returns ) (BLOCK (ALT ':' ID) (ALT EPSILON))) (RULE vector_types (returns interfaces.TipoExpresion tipo) (BLOCK (ALT '[' vector_types ']' { $tipo = interfaces.VECTOR }) (ALT '[' tipos_var ']' { $tipo = $tipos_var.tipo }))) (RULE array_type (returns *arrayList.List ty) (@ init {
    $ty = arrayList.New()
}) (BLOCK (ALT CORIZQ array_type ';' expression ']' {
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    }) (ALT CORIZQ tipos_var ';' expression ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }) (ALT CORIZQ tipos_var ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }))) (RULE asignacion (returns interfaces.Instruction instr) (BLOCK (ALT (= id ID) '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) list_index '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT l_AccessStruct '=' expression { $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) }) (ALT (= id ID) '[' (= index expression) ']' '.' l_AccessStruct '=' (= val expression) {$instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) '+=' expression {$instr = instruction.NewIncrement($id.text,$expression.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn())}))) (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list l_AccessStruct) '.' ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
            $l = arrayList.New()
            $l.Add($ID.text)
}))) (RULE list_index (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= listi list_index) index_array {
                                      $listi.lista.Add($index_array.index)
                                      $lista = $listi.lista
                                  }) (ALT index_array {$lista.Add($index_array.index)}))) (RULE index_array (returns interfaces.Expresion index) (BLOCK (ALT '[' expression ']' {$index = $expression.p}))) (RULE if_sent (returns interfaces.Instruction instr) (BLOCK (ALT IF expression bloque_inst {$instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif {$instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}))) (RULE if_exp (returns interfaces.Expresion p) (BLOCK (ALT IF expression (= bprin_e bloque_exp) ELSE (= belse_e bloque_exp) {$p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )}) (ALT IF expression (= bprin_e bloque_exp) list_elseif_exp ELSE (= belse_e bloque_exp) {
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    }))) (RULE list_elseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if)))) {
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    }))) (RULE list_elseif_exp (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if_exp)))) {
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT ELSE IF expression bloque_inst {$instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )}))) (RULE else_if_exp (returns interfaces.Expresion p) (BLOCK (ALT ELSE IF expression bloque_exp {$p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )}))) (RULE switch_sent (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) LLAVEDER {
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') bloque_inst LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') instruccion_dentro LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_dentro.instr,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, true )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) DEFAULT (= th ':') (= exp_ expression) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      }))) (RULE match_brazos (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos) matchbrazo {
                                    $listb.l_brazos.Add($matchbrazo.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo {$l_brazos.Add($matchbrazo.brazo)}))) (RULE match_brazos_exp (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos_exp) matchbrazo_exp {
                                    $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo_exp {$l_brazos.Add($matchbrazo_exp.brazo)}))) (RULE matchbrazo (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT CASE listaOpciones (= th ':') bloque_inst { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }) (ALT CASE listaOpciones (= th ':') instruccion_dentro { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_dentro.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }))) (RULE matchbrazo_exp (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT listaOpciones (= th ':') expression { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) }))) (RULE listaOpciones (returns *arrayList.List lisop) (@ init {
    $lisop = arrayList.New()
}) (BLOCK (ALT (= list listaOpciones) ',' primitivo {
                                            $list.lisop.Add( $primitivo.p )
                                            $lisop =  $list.lisop
                                          }) (ALT primitivo {
                    $lisop.Add( $primitivo.p )
                  }))) (RULE bloque_inst (returns  *arrayList.List  l) (BLOCK (ALT LLAVEIZQ instrucciones LLAVEDER {$l = $instrucciones.l }) (ALT LLAVEIZQ LLAVEDER {$l = arrayList.New()}))) (RULE bloque_princip (returns  *arrayList.List  l) (BLOCK (ALT instrucciones {$l = $instrucciones.l }) (ALT {$l = arrayList.New()}))) (RULE bloque_exp (returns interfaces.Expresion p) (BLOCK (ALT LLAVEIZQ expression LLAVEDER {$p = $expression.p}))) (RULE tipos_var (returns interfaces.TipoExpresion tipo) (BLOCK (ALT T_NUMBER (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.INTEGER}) (ALT T_STRING (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STRING}) (ALT T_FLOAT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.FLOAT}) (ALT T_BOOL (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.BOOLEAN}) (ALT T_STR (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STR}) (ALT STRUCT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STRUCT}) (ALT T_CHAT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.CHAR}) (ALT T_ARRAY (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.ARRAY}) (ALT T_VECTOR (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.VECTOR}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}) (ALT (= e_ini expression) '.' '.' '.' (= e_fin expression) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= op '-') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' LEN {$p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '!='))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op '!') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '&&') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '||') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' CLONE { $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT T_STRING '(' (= opIz expr_arit) ')' { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT ID '.' CONTAINS '(' '&' (= val expression) ')' {$p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' CAPF {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT CORIZQ (= exp expression) ';' (= tam expression) CORDER { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT CORIZQ (= live listParams) CORDER { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ID PARIZQ l_StructExp PARDER { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}) (ALT casteo {$p = $casteo.p}) (ALT if_exp {$p = $if_exp.p}) (ALT switch_sent {$p = $switch_sent.p}) (ALT while_true { $p = $while_true.p }) (ALT callFunction {$p = $callFunction.p}) (ALT ID '.' REMOVE '(' expression ')' { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }) (ALT IN primitivo { $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) }))) (RULE casteo (returns interfaces.Expresion p) (BLOCK (ALT PARIZQ expression AS (= typec tipo_cast) PARDER {$p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )}))) (RULE tipo_cast (returns interfaces.TipoExpresion tc) (BLOCK (ALT T_FLOAT {$tc = interfaces.FLOAT}) (ALT T_NUMBER {$tc = interfaces.INTEGER}) (ALT USIZE {$tc = interfaces.INTEGER}))) (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (= list l_StructExp) COMA ID ':' expression {
                                        Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                        $list.l.Add(Str_ep);
                                        $l = $list.l;
                                    }) (ALT ID ':' expression {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      }) (ALT FLOAT {
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      }) (ALT strings {$p = $strings.p}) (ALT CHAR {
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                }) (ALT TRUE { $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())}) (ALT FALSE { $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())}) (ALT (= list listIDArray) { $p = $list.p}))) (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listIDArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (= list listIDArray) '.' ID { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }) (ALT ID { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )}))) (RULE strings (returns interfaces.Expresion p) (BLOCK (ALT (+ (BLOCK (ALT AMP))) 'String' '(' STRING ')' { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT 'String' '(' STRING ')' { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())})))))
2023-09-06 10:20:04:963 grammar LogManager.java:25 after: (PARSER_GRAMMAR swiftgrammar (OPTIONS (= tokenVocab swiftlexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"



}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT listaglobal {$lista = $listaglobal.lista}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    }))) (RULE listaglobal (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= lisfun listaglobal) in_global {
                                          $lisfun.lista.Add( $in_global.globals)
                                          $lista =  $lisfun.lista
                                        }) (ALT in_global { $lista.Add( $in_global.globals ) }))) (RULE in_global (returns  interfaces.Instruction globals ) (BLOCK (ALT funcion {$globals = $funcion.instr}) (ALT newStruct {$globals = $newStruct.str}))) (RULE modulo_item (returns interfaces.Instruction instr) (BLOCK (ALT funcion {$instr = $funcion.instr}) (ALT newStruct {$instr = $newStruct.str}))) (RULE funcion (returns  interfaces.Instruction  instr) (@ init { listParams :=  arrayList.New() }) (BLOCK (ALT fn_main {$instr =  $fn_main.instr}) (ALT FN ID '(' ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )}) (ALT FN ID '(' ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN (= id ID) '(' params_declar ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )}))) (RULE params_declar (returns *arrayList.List lista) (@ init {
$lista =  arrayList.New()
}) (BLOCK (ALT (= listdec params_declar) ',' declar_parametros {
                                                            $listdec.lista.Add($declar_parametros.in_dec)
                                                            $lista =  $listdec.lista }) (ALT declar_parametros {   $lista.Add($declar_parametros.in_dec) }))) (RULE declar_parametros (returns interfaces.Instruction in_dec) (BLOCK (ALT (= isVar es_var) ID ':' tipos_var {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isVar.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia '[' (= idob ID) ']' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $es_referencia.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia '[' tipos_var ']' {
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $es_referencia.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    }) (ALT ID ':' INOUT array_type {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia (= idstruct ID) { 
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $es_referencia.ref, $id.line, $id.pos)
                            $in_dec = decl
                        }) (ALT (= isRef es_var) (= id ID) ':' '[' (= idob ID) ']' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isRef.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }))) (RULE fn_main (returns interfaces.Instruction instr) (@ init { listParams:= arrayList.New() }) (BLOCK (ALT bloque_princip '.' { $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )}))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT appendVec {$instr = $appendVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT switch_sent {$instr = $switch_sent.instr}) (ALT while_true { $instr = $while_true.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT newStruct {$instr = $newStruct.str}) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT ID '.' REMOVE '(' AT ':' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE instruccion_dentro (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT appendVec {$instr = $appendVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT switch_sent {$instr = $switch_sent.instr}) (ALT while_true { $instr = $while_true.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT ID '.' REMOVE '(' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE appendVec (returns interfaces.Instruction instr) (BLOCK (ALT ID '.' PUSH '(' (= val expression) ')' {$instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' INSERT '(' (= val1 expression) ',' (= val2 expression) ')' { $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) }))) (RULE newStruct (returns interfaces.Instruction str) (BLOCK (ALT STRUCT ID LLAVEIZQ lista_struct LLAVEDER { $str = instructionExpre.NewStruct($ID.text, $lista_struct.l, $STRUCT.line, $STRUCT.pos) }))) (RULE lista_struct (returns *arrayList.List l) (BLOCK (ALT (= list lista_struct) MUT (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) MUT (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) LET (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) LET (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT MUT (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT MUT (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT LET (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT LET (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }))) (RULE callFunction (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT ID '(' ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    }) (ALT ID '(' listParamsCall ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    }))) (RULE returnFun (returns interfaces.Instruction instr) (BLOCK (ALT RETURN { $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )}) (ALT RETURN expression { $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )}))) (RULE printconsola (returns interfaces.Instruction instr) (BLOCK (ALT PRINT_CON PARIZQ listParams PARDER {$instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )}))) (RULE while_true (returns interfaces.Instruction lop, interfaces.Expresion p) (BLOCK (ALT WHILE TRUE bloque_inst { 
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos ) 
                    }))) (RULE lWhile (returns interfaces.Instruction lwh) (BLOCK (ALT WHILE expression bloque_inst { $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) }))) (RULE lForin (returns interfaces.Instruction lfor) (BLOCK (ALT FOR ID IN expression bloque_inst { $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) }))) (RULE lBreak (returns interfaces.Instruction br) (BLOCK (ALT BREAK { $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) }) (ALT BREAK expression { $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) }))) (RULE lContinue (returns interfaces.Instruction cn) (BLOCK (ALT CONTINUE { $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE listParams (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParams) ',' expression {
                                    $list.l_e.Add($expression.p)
                                    $l_e = $list.l_e
                                }) (ALT expression {$l_e.Add($expression.p)}))) (RULE listParamsCall (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParamsCall) ',' es_referencia expression {
                                    ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                    $list.l_e.Add(ref)
                                    $l_e = $list.l_e
                                }) (ALT es_referencia expression {   ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    }))) (RULE es_referencia (returns bool ref) (BLOCK (ALT AMP { $ref = true }) (ALT { $ref = false }))) (RULE declaracion (returns interfaces.Instruction instr) (BLOCK (ALT (= isVar es_varr) (= id ID) ':' tipos_var (= asig '=') expression { 
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      }) (ALT (= isVar es_varr) (= id ID) letid (= asig '=') expression { 
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    }) (ALT (= isVar es_varr) (= id ID) ':' vector_types '=' CORIZQ CORDER {
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos, nil, "")
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' (= idob ID) ']' '=' CORIZQ CORDER {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isVar.mut, $id.line, $id.pos, nil, $idob.text)
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' (= idob ID) ']' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isVar.mut, $id.line, $id.pos, $expression.p, $idob.text)
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' tipos_var ']' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isVar.mut, $id.line, $id.pos, $expression.p, "")
                    }))) (RULE es_var (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT EPSILON))) (RULE es_varr (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT LET { $mut = false }))) (RULE letid (returns ) (BLOCK (ALT ':' ID) (ALT EPSILON))) (RULE vector_types (returns interfaces.TipoExpresion tipo) (BLOCK (ALT '[' vector_types ']' { $tipo = interfaces.VECTOR }) (ALT '[' tipos_var ']' { $tipo = $tipos_var.tipo }))) (RULE array_type (returns *arrayList.List ty) (@ init {
    $ty = arrayList.New()
}) (BLOCK (ALT CORIZQ array_type ';' expression ']' {
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    }) (ALT CORIZQ tipos_var ';' expression ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }) (ALT CORIZQ tipos_var ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }))) (RULE asignacion (returns interfaces.Instruction instr) (BLOCK (ALT (= id ID) '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) list_index '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT l_AccessStruct '=' expression { $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) }) (ALT (= id ID) '[' (= index expression) ']' '.' l_AccessStruct '=' (= val expression) {$instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) '+=' expression {$instr = instruction.NewIncrement($id.text,$expression.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn())}))) (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list l_AccessStruct) '.' ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
            $l = arrayList.New()
            $l.Add($ID.text)
}))) (RULE list_index (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= listi list_index) index_array {
                                      $listi.lista.Add($index_array.index)
                                      $lista = $listi.lista
                                  }) (ALT index_array {$lista.Add($index_array.index)}))) (RULE index_array (returns interfaces.Expresion index) (BLOCK (ALT '[' expression ']' {$index = $expression.p}))) (RULE if_sent (returns interfaces.Instruction instr) (BLOCK (ALT IF expression bloque_inst {$instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif {$instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}))) (RULE if_exp (returns interfaces.Expresion p) (BLOCK (ALT IF expression (= bprin_e bloque_exp) ELSE (= belse_e bloque_exp) {$p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )}) (ALT IF expression (= bprin_e bloque_exp) list_elseif_exp ELSE (= belse_e bloque_exp) {
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    }))) (RULE list_elseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if)))) {
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    }))) (RULE list_elseif_exp (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if_exp)))) {
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT ELSE IF expression bloque_inst {$instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )}))) (RULE else_if_exp (returns interfaces.Expresion p) (BLOCK (ALT ELSE IF expression bloque_exp {$p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )}))) (RULE switch_sent (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) LLAVEDER {
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') bloque_inst LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') instruccion_dentro LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_dentro.instr,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, true )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) DEFAULT (= th ':') (= exp_ expression) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      }))) (RULE match_brazos (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos) matchbrazo {
                                    $listb.l_brazos.Add($matchbrazo.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo {$l_brazos.Add($matchbrazo.brazo)}))) (RULE match_brazos_exp (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos_exp) matchbrazo_exp {
                                    $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo_exp {$l_brazos.Add($matchbrazo_exp.brazo)}))) (RULE matchbrazo (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT CASE listaOpciones (= th ':') bloque_inst { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }) (ALT CASE listaOpciones (= th ':') instruccion_dentro { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_dentro.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }))) (RULE matchbrazo_exp (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT listaOpciones (= th ':') expression { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) }))) (RULE listaOpciones (returns *arrayList.List lisop) (@ init {
    $lisop = arrayList.New()
}) (BLOCK (ALT (= list listaOpciones) ',' primitivo {
                                            $list.lisop.Add( $primitivo.p )
                                            $lisop =  $list.lisop
                                          }) (ALT primitivo {
                    $lisop.Add( $primitivo.p )
                  }))) (RULE bloque_inst (returns  *arrayList.List  l) (BLOCK (ALT LLAVEIZQ instrucciones LLAVEDER {$l = $instrucciones.l }) (ALT LLAVEIZQ LLAVEDER {$l = arrayList.New()}))) (RULE bloque_princip (returns  *arrayList.List  l) (BLOCK (ALT instrucciones {$l = $instrucciones.l }) (ALT {$l = arrayList.New()}))) (RULE bloque_exp (returns interfaces.Expresion p) (BLOCK (ALT LLAVEIZQ expression LLAVEDER {$p = $expression.p}))) (RULE tipos_var (returns interfaces.TipoExpresion tipo) (BLOCK (ALT T_NUMBER (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.INTEGER}) (ALT T_STRING (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STRING}) (ALT T_FLOAT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.FLOAT}) (ALT T_BOOL (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.BOOLEAN}) (ALT T_STR (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STR}) (ALT STRUCT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STRUCT}) (ALT T_CHAT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.CHAR}) (ALT T_ARRAY (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.ARRAY}) (ALT T_VECTOR (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.VECTOR}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}) (ALT (= e_ini expression) '.' '.' '.' (= e_fin expression) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= op '-') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '*' '/' '%')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' LEN {$p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>' '>=' '==' '!=')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op '!') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '&&') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '||') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' CLONE { $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT T_STRING '(' (= opIz expr_arit) ')' { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT ID '.' CONTAINS '(' '&' (= val expression) ')' {$p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' CAPF {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT CORIZQ (= exp expression) ';' (= tam expression) CORDER { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT CORIZQ (= live listParams) CORDER { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ID PARIZQ l_StructExp PARDER { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}) (ALT casteo {$p = $casteo.p}) (ALT if_exp {$p = $if_exp.p}) (ALT switch_sent {$p = $switch_sent.p}) (ALT while_true { $p = $while_true.p }) (ALT callFunction {$p = $callFunction.p}) (ALT ID '.' REMOVE '(' expression ')' { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }) (ALT IN primitivo { $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) }))) (RULE casteo (returns interfaces.Expresion p) (BLOCK (ALT PARIZQ expression AS (= typec tipo_cast) PARDER {$p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )}))) (RULE tipo_cast (returns interfaces.TipoExpresion tc) (BLOCK (ALT T_FLOAT {$tc = interfaces.FLOAT}) (ALT T_NUMBER {$tc = interfaces.INTEGER}) (ALT USIZE {$tc = interfaces.INTEGER}))) (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (= list l_StructExp) COMA ID ':' expression {
                                        Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                        $list.l.Add(Str_ep);
                                        $l = $list.l;
                                    }) (ALT ID ':' expression {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      }) (ALT FLOAT {
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      }) (ALT strings {$p = $strings.p}) (ALT CHAR {
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                }) (ALT TRUE { $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())}) (ALT FALSE { $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())}) (ALT (= list listIDArray) { $p = $list.p}))) (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listIDArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (= list listIDArray) '.' ID { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }) (ALT ID { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )}))) (RULE strings (returns interfaces.Expresion p) (BLOCK (ALT (+ (BLOCK (ALT AMP))) 'String' '(' STRING ')' { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT 'String' '(' STRING ')' { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())})))))
2023-09-06 10:20:05:344 left-recursion LogManager.java:25 listaglobal returns [*arrayList.List lista]
    :   ( {} in_global<tokenIndex=85>     { $lista.Add( $in_global.globals ) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> in_global<tokenIndex=79>  {
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  }
        )*
    ;
2023-09-06 10:20:05:370 grammar LogManager.java:25 added: (RULE listaglobal (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (in_global (ELEMENT_OPTIONS (= tokenIndex 85))) { $lista.Add( $in_global.globals ) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (in_global (ELEMENT_OPTIONS (= tokenIndex 79))) {
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  }))))))
2023-09-06 10:20:05:372 left-recursion LogManager.java:25 params_declar returns [*arrayList.List lista]
    :   ( {} declar_parametros<tokenIndex=296> {   $lista.Add($declar_parametros.in_dec) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=288>  declar_parametros<tokenIndex=290>    {
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista }
        )*
    ;
2023-09-06 10:20:05:383 grammar LogManager.java:25 added: (RULE params_declar (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (declar_parametros (ELEMENT_OPTIONS (= tokenIndex 296))) {   $lista.Add($declar_parametros.in_dec) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 288))) (declar_parametros (ELEMENT_OPTIONS (= tokenIndex 290))) {
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista }))))))
2023-09-06 10:20:05:393 left-recursion LogManager.java:25 lista_struct returns [*arrayList.List l]
    :   ( {} MUT<tokenIndex=807> id=ID<tokenIndex=811> ':'<tokenIndex=813> tipos_var<tokenIndex=815> {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        | MUT<tokenIndex=821> id=ID<tokenIndex=825> ':'<tokenIndex=827> idstru=ID<tokenIndex=831> {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        | LET<tokenIndex=837> id=ID<tokenIndex=841> ':'<tokenIndex=843> tipos_var<tokenIndex=845> {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        | LET<tokenIndex=851> id=ID<tokenIndex=855> ':'<tokenIndex=857> idstru=ID<tokenIndex=861> {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> MUT<tokenIndex=735> id=ID<tokenIndex=739> ':'<tokenIndex=741> tipos_var<tokenIndex=743>  {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> MUT<tokenIndex=753> id=ID<tokenIndex=757> ':'<tokenIndex=759> idstru=ID<tokenIndex=763> {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> LET<tokenIndex=773> id=ID<tokenIndex=777> ':'<tokenIndex=779> tipos_var<tokenIndex=781>  {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> LET<tokenIndex=791> id=ID<tokenIndex=795> ':'<tokenIndex=797> idstru=ID<tokenIndex=801> {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
        )*
    ;
2023-09-06 10:20:05:409 grammar LogManager.java:25 added: (RULE lista_struct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (MUT (ELEMENT_OPTIONS (= tokenIndex 807))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 811)))) (':' (ELEMENT_OPTIONS (= tokenIndex 813))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 815))) {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (MUT (ELEMENT_OPTIONS (= tokenIndex 821))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 825)))) (':' (ELEMENT_OPTIONS (= tokenIndex 827))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 831)))) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (LET (ELEMENT_OPTIONS (= tokenIndex 837))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 841)))) (':' (ELEMENT_OPTIONS (= tokenIndex 843))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 845))) {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (LET (ELEMENT_OPTIONS (= tokenIndex 851))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 855)))) (':' (ELEMENT_OPTIONS (= tokenIndex 857))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 861)))) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (MUT (ELEMENT_OPTIONS (= tokenIndex 735))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 739)))) (':' (ELEMENT_OPTIONS (= tokenIndex 741))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 743))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (MUT (ELEMENT_OPTIONS (= tokenIndex 753))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 757)))) (':' (ELEMENT_OPTIONS (= tokenIndex 759))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 763)))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (LET (ELEMENT_OPTIONS (= tokenIndex 773))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 777)))) (':' (ELEMENT_OPTIONS (= tokenIndex 779))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 781))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (LET (ELEMENT_OPTIONS (= tokenIndex 791))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 795)))) (':' (ELEMENT_OPTIONS (= tokenIndex 797))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 801)))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }))))))
2023-09-06 10:20:05:411 left-recursion LogManager.java:25 listParams returns [*arrayList.List l_e]
    :   ( {} expression<tokenIndex=1065> {$l_e.Add($expression.p)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=1057> expression<tokenIndex=1059>   {
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          }
        )*
    ;
2023-09-06 10:20:05:416 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l_e) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 1065))) {$l_e.Add($expression.p)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 1057))) (expression (ELEMENT_OPTIONS (= tokenIndex 1059))) {
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          }))))))
2023-09-06 10:20:05:423 left-recursion LogManager.java:25 listParamsCall returns [*arrayList.List l_e]
    :   ( {} es_referencia<tokenIndex=1099> expression<tokenIndex=1101>    {   ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=1089> es_referencia<tokenIndex=1091> expression<tokenIndex=1093>   {
                                              ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          }
        )*
    ;
2023-09-06 10:20:05:430 grammar LogManager.java:25 added: (RULE listParamsCall (returns *arrayList.List l_e) (BLOCK (ALT (BLOCK (ALT {} (es_referencia (ELEMENT_OPTIONS (= tokenIndex 1099))) (expression (ELEMENT_OPTIONS (= tokenIndex 1101))) {   ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 1089))) (es_referencia (ELEMENT_OPTIONS (= tokenIndex 1091))) (expression (ELEMENT_OPTIONS (= tokenIndex 1093))) {
                                              ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          }))))))
2023-09-06 10:20:05:432 left-recursion LogManager.java:25 l_AccessStruct returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=1528> {
            $l = arrayList.New()
            $l.Add($ID.text)
} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> '.'<tokenIndex=1520> ID<tokenIndex=1522> {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }
        )*
    ;
2023-09-06 10:20:05:441 grammar LogManager.java:25 added: (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1528))) {
            $l = arrayList.New()
            $l.Add($ID.text)
})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) ('.' (ELEMENT_OPTIONS (= tokenIndex 1520))) (ID (ELEMENT_OPTIONS (= tokenIndex 1522))) {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }))))))
2023-09-06 10:20:05:442 left-recursion LogManager.java:25 list_index returns [*arrayList.List lista]
    :   ( {} index_array<tokenIndex=1557>  {$lista.Add($index_array.index)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> index_array<tokenIndex=1551> {
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            }
        )*
    ;
2023-09-06 10:20:05:445 grammar LogManager.java:25 added: (RULE list_index (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (index_array (ELEMENT_OPTIONS (= tokenIndex 1557))) {$lista.Add($index_array.index)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (index_array (ELEMENT_OPTIONS (= tokenIndex 1551))) {
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            }))))))
2023-09-06 10:20:05:446 left-recursion LogManager.java:25 match_brazos returns [*arrayList.List l_brazos]
    :   ( {} matchbrazo<tokenIndex=1962> {$l_brazos.Add($matchbrazo.brazo)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> matchbrazo<tokenIndex=1956>   {
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }
        )*
    ;
2023-09-06 10:20:05:453 grammar LogManager.java:25 added: (RULE match_brazos (returns *arrayList.List l_brazos) (BLOCK (ALT (BLOCK (ALT {} (matchbrazo (ELEMENT_OPTIONS (= tokenIndex 1962))) {$l_brazos.Add($matchbrazo.brazo)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (matchbrazo (ELEMENT_OPTIONS (= tokenIndex 1956))) {
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }))))))
2023-09-06 10:20:05:454 left-recursion LogManager.java:25 match_brazos_exp returns [*arrayList.List l_brazos]
    :   ( {} matchbrazo_exp<tokenIndex=1992> {$l_brazos.Add($matchbrazo_exp.brazo)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> matchbrazo_exp<tokenIndex=1986>   {
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }
        )*
    ;
2023-09-06 10:20:05:456 grammar LogManager.java:25 added: (RULE match_brazos_exp (returns *arrayList.List l_brazos) (BLOCK (ALT (BLOCK (ALT {} (matchbrazo_exp (ELEMENT_OPTIONS (= tokenIndex 1992))) {$l_brazos.Add($matchbrazo_exp.brazo)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (matchbrazo_exp (ELEMENT_OPTIONS (= tokenIndex 1986))) {
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }))))))
2023-09-06 10:20:05:457 left-recursion LogManager.java:25 listaOpciones returns [*arrayList.List lisop]
    :   ( {} primitivo<tokenIndex=2084>   {
                    $lisop.Add( $primitivo.p )
                  } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=2076> primitivo<tokenIndex=2078>  {
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    }
        )*
    ;
2023-09-06 10:20:05:459 grammar LogManager.java:25 added: (RULE listaOpciones (returns *arrayList.List lisop) (BLOCK (ALT (BLOCK (ALT {} (primitivo (ELEMENT_OPTIONS (= tokenIndex 2084))) {
                    $lisop.Add( $primitivo.p )
                  })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 2076))) (primitivo (ELEMENT_OPTIONS (= tokenIndex 2078))) {
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    }))))))
2023-09-06 10:20:05:464 left-recursion LogManager.java:25 expression returns [interfaces.Expresion p]
    :   ( {} expr_arit<tokenIndex=2253>    {$p = $expr_arit.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 1)}?<p=1> '.'<tokenIndex=2267>'.'<tokenIndex=2268>'.'<tokenIndex=2269> e_fin=expression<tokenIndex=2273,p=2> { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }
        )*
    ;
2023-09-06 10:20:05:468 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2253))) {$p = $expr_arit.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 1)}? (ELEMENT_OPTIONS (= p 1))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2267))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2268))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2269))) (= e_fin (expression (ELEMENT_OPTIONS (= tokenIndex 2273) (= p 2)))) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }))))))
2023-09-06 10:20:05:483 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} op='-'<tokenIndex=2300> opU = expr_arit<tokenIndex=2306,p=24> {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())} 
        | op='!'<tokenIndex=2420> opU = expr_arit<tokenIndex=2426,p=19> {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())} 
        | T_STRING<tokenIndex=2486> '('<tokenIndex=2488> opIz=expr_arit<tokenIndex=2492> ')'<tokenIndex=2494> { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) } 
        | ID<tokenIndex=2502> '.'<tokenIndex=2504> CONTAINS<tokenIndex=2506> '('<tokenIndex=2508>'&'<tokenIndex=2509> val=expression<tokenIndex=2513>')'<tokenIndex=2514> {$p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )} 
        | ID<tokenIndex=2520> '.'<tokenIndex=2522> CAPF<tokenIndex=2524> {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )} 
        | CORIZQ<tokenIndex=2532> exp = expression<tokenIndex=2538> ';'<tokenIndex=2540> tam = expression<tokenIndex=2546> CORDER<tokenIndex=2548> { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) } 
        | CORIZQ<tokenIndex=2554> live=listParams<tokenIndex=2558> CORDER<tokenIndex=2560> { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) } 
        | ID<tokenIndex=2574> PARIZQ<tokenIndex=2576> l_StructExp<tokenIndex=2578> PARDER<tokenIndex=2580> { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) } 
        | primitivo<tokenIndex=2586> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=2592> expression<tokenIndex=2594> PARDER<tokenIndex=2596> {$p = $expression.p} 
        | casteo<tokenIndex=2602> {$p = $casteo.p} 
        | if_exp<tokenIndex=2608> {$p = $if_exp.p} 
        | switch_sent<tokenIndex=2614> {$p = $switch_sent.p} 
        | while_true<tokenIndex=2622> { $p = $while_true.p } 
        | callFunction<tokenIndex=2628> {$p = $callFunction.p} 
        | ID<tokenIndex=2636> '.'<tokenIndex=2638> REMOVE<tokenIndex=2640> '('<tokenIndex=2642> expression<tokenIndex=2644> ')'<tokenIndex=2646> { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) } 
        | IN<tokenIndex=2654> primitivo<tokenIndex=2656> { $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=('*'<tokenIndex=2327>|'/'<tokenIndex=2329>|'%'<tokenIndex=2331>) opDe = expr_arit<tokenIndex=2338,p=24> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=('+'<tokenIndex=2369>|'-'<tokenIndex=2371>) opDe = expr_arit<tokenIndex=2378,p=22> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=('<'<tokenIndex=2393>|'<='<tokenIndex=2395>|'>'<tokenIndex=2397>|'>='<tokenIndex=2399>|'=='<tokenIndex=2401>|'!='<tokenIndex=2403>) opDe = expr_arit<tokenIndex=2410,p=21> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op='&&'<tokenIndex=2442> opDe = expr_arit<tokenIndex=2448,p=19> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op='||'<tokenIndex=2462> opDe = expr_arit<tokenIndex=2468,p=18> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> '.'<tokenIndex=2352> LEN<tokenIndex=2354> {$p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> '.'<tokenIndex=2478> CLONE<tokenIndex=2480> { $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }
        )*
    ;
2023-09-06 10:20:05:548 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (= op ('-' (ELEMENT_OPTIONS (= tokenIndex 2300)))) (= opU (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2306) (= p 24)))) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op ('!' (ELEMENT_OPTIONS (= tokenIndex 2420)))) (= opU (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2426) (= p 19)))) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (T_STRING (ELEMENT_OPTIONS (= tokenIndex 2486))) ('(' (ELEMENT_OPTIONS (= tokenIndex 2488))) (= opIz (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2492)))) (')' (ELEMENT_OPTIONS (= tokenIndex 2494))) { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2502))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2504))) (CONTAINS (ELEMENT_OPTIONS (= tokenIndex 2506))) ('(' (ELEMENT_OPTIONS (= tokenIndex 2508))) ('&' (ELEMENT_OPTIONS (= tokenIndex 2509))) (= val (expression (ELEMENT_OPTIONS (= tokenIndex 2513)))) (')' (ELEMENT_OPTIONS (= tokenIndex 2514))) {$p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2520))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2522))) (CAPF (ELEMENT_OPTIONS (= tokenIndex 2524))) {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2532))) (= exp (expression (ELEMENT_OPTIONS (= tokenIndex 2538)))) (';' (ELEMENT_OPTIONS (= tokenIndex 2540))) (= tam (expression (ELEMENT_OPTIONS (= tokenIndex 2546)))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2548))) { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2554))) (= live (listParams (ELEMENT_OPTIONS (= tokenIndex 2558)))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2560))) { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2574))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2576))) (l_StructExp (ELEMENT_OPTIONS (= tokenIndex 2578))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2580))) { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 2586))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2592))) (expression (ELEMENT_OPTIONS (= tokenIndex 2594))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2596))) {$p = $expression.p}) (ALT (casteo (ELEMENT_OPTIONS (= tokenIndex 2602))) {$p = $casteo.p}) (ALT (if_exp (ELEMENT_OPTIONS (= tokenIndex 2608))) {$p = $if_exp.p}) (ALT (switch_sent (ELEMENT_OPTIONS (= tokenIndex 2614))) {$p = $switch_sent.p}) (ALT (while_true (ELEMENT_OPTIONS (= tokenIndex 2622))) { $p = $while_true.p }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2628))) {$p = $callFunction.p}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2636))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2638))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2640))) ('(' (ELEMENT_OPTIONS (= tokenIndex 2642))) (expression (ELEMENT_OPTIONS (= tokenIndex 2644))) (')' (ELEMENT_OPTIONS (= tokenIndex 2646))) { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }) (ALT (IN (ELEMENT_OPTIONS (= tokenIndex 2654))) (primitivo (ELEMENT_OPTIONS (= tokenIndex 2656))) { $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 2327))) ('/' (ELEMENT_OPTIONS (= tokenIndex 2329))) ('%' (ELEMENT_OPTIONS (= tokenIndex 2331))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2338) (= p 24)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 2369))) ('-' (ELEMENT_OPTIONS (= tokenIndex 2371))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2378) (= p 22)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 2393))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 2395))) ('>' (ELEMENT_OPTIONS (= tokenIndex 2397))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 2399))) ('==' (ELEMENT_OPTIONS (= tokenIndex 2401))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 2403))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2410) (= p 21)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op ('&&' (ELEMENT_OPTIONS (= tokenIndex 2442)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2448) (= p 19)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op ('||' (ELEMENT_OPTIONS (= tokenIndex 2462)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2468) (= p 18)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2352))) (LEN (ELEMENT_OPTIONS (= tokenIndex 2354))) {$p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2478))) (CLONE (ELEMENT_OPTIONS (= tokenIndex 2480))) { $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }))))))
2023-09-06 10:20:05:561 left-recursion LogManager.java:25 l_StructExp returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2737> ':'<tokenIndex=2739> expression<tokenIndex=2741>{
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2725> ID<tokenIndex=2727> ':'<tokenIndex=2729> expression<tokenIndex=2731> {
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              }
        )*
    ;
2023-09-06 10:20:05:575 grammar LogManager.java:25 added: (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2737))) (':' (ELEMENT_OPTIONS (= tokenIndex 2739))) (expression (ELEMENT_OPTIONS (= tokenIndex 2741))) {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2725))) (ID (ELEMENT_OPTIONS (= tokenIndex 2727))) (':' (ELEMENT_OPTIONS (= tokenIndex 2729))) (expression (ELEMENT_OPTIONS (= tokenIndex 2731))) {
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              }))))))
2023-09-06 10:20:05:577 left-recursion LogManager.java:25 listIDArray returns [interfaces.Expresion p]
    :   ( {} ID<tokenIndex=2835> { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=2811> expression<tokenIndex=2813> CORDER<tokenIndex=2815> { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> '.'<tokenIndex=2827> ID<tokenIndex=2829> { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }
        )*
    ;
2023-09-06 10:20:05:588 grammar LogManager.java:25 added: (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2835))) { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2811))) (expression (ELEMENT_OPTIONS (= tokenIndex 2813))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2815))) { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2827))) (ID (ELEMENT_OPTIONS (= tokenIndex 2829))) { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }))))))
2023-09-06 10:20:05:662 grammar LogManager.java:25 import PRINT_CON=1
2023-09-06 10:20:05:662 grammar LogManager.java:25 import T_NUMBER=2
2023-09-06 10:20:05:662 grammar LogManager.java:25 import T_FLOAT=3
2023-09-06 10:20:05:662 grammar LogManager.java:25 import T_STRING=4
2023-09-06 10:20:05:662 grammar LogManager.java:25 import T_BOOL=5
2023-09-06 10:20:05:662 grammar LogManager.java:25 import T_STR=6
2023-09-06 10:20:05:662 grammar LogManager.java:25 import T_CHAT=7
2023-09-06 10:20:05:662 grammar LogManager.java:25 import T_ARRAY=8
2023-09-06 10:20:05:663 grammar LogManager.java:25 import T_VECTOR=9
2023-09-06 10:20:05:663 grammar LogManager.java:25 import USIZE=10
2023-09-06 10:20:05:663 grammar LogManager.java:25 import IF=11
2023-09-06 10:20:05:663 grammar LogManager.java:25 import ELSE=12
2023-09-06 10:20:05:663 grammar LogManager.java:25 import WHILE=13
2023-09-06 10:20:05:663 grammar LogManager.java:25 import LOOP=14
2023-09-06 10:20:05:663 grammar LogManager.java:25 import FOR=15
2023-09-06 10:20:05:663 grammar LogManager.java:25 import IN=16
2023-09-06 10:20:05:663 grammar LogManager.java:25 import BREAK=17
2023-09-06 10:20:05:663 grammar LogManager.java:25 import CONTINUE=18
2023-09-06 10:20:05:663 grammar LogManager.java:25 import SWITCH=19
2023-09-06 10:20:05:663 grammar LogManager.java:25 import MTOR=20
2023-09-06 10:20:05:663 grammar LogManager.java:25 import CASE=21
2023-09-06 10:20:05:663 grammar LogManager.java:25 import DEFAULT=22
2023-09-06 10:20:05:664 grammar LogManager.java:25 import TRUE=23
2023-09-06 10:20:05:664 grammar LogManager.java:25 import FALSE=24
2023-09-06 10:20:05:664 grammar LogManager.java:25 import AS=25
2023-09-06 10:20:05:664 grammar LogManager.java:25 import AT=26
2023-09-06 10:20:05:664 grammar LogManager.java:25 import LET=27
2023-09-06 10:20:05:664 grammar LogManager.java:25 import MUT=28
2023-09-06 10:20:05:664 grammar LogManager.java:25 import STRUCT=29
2023-09-06 10:20:05:664 grammar LogManager.java:25 import VEC=30
2023-09-06 10:20:05:664 grammar LogManager.java:25 import VECN=31
2023-09-06 10:20:05:665 grammar LogManager.java:25 import CAPACITY=32
2023-09-06 10:20:05:665 grammar LogManager.java:25 import TO_STRING=33
2023-09-06 10:20:05:665 grammar LogManager.java:25 import TO_OWNED=34
2023-09-06 10:20:05:665 grammar LogManager.java:25 import LEN=35
2023-09-06 10:20:05:665 grammar LogManager.java:25 import NEW=36
2023-09-06 10:20:05:665 grammar LogManager.java:25 import CAPF=37
2023-09-06 10:20:05:665 grammar LogManager.java:25 import CLONE=38
2023-09-06 10:20:05:665 grammar LogManager.java:25 import ABS=39
2023-09-06 10:20:05:665 grammar LogManager.java:25 import PUSH=40
2023-09-06 10:20:05:665 grammar LogManager.java:25 import CONTAINS=41
2023-09-06 10:20:05:665 grammar LogManager.java:25 import INSERT=42
2023-09-06 10:20:05:665 grammar LogManager.java:25 import REMOVE=43
2023-09-06 10:20:05:665 grammar LogManager.java:25 import MODULO=44
2023-09-06 10:20:05:665 grammar LogManager.java:25 import PUBLIC=45
2023-09-06 10:20:05:665 grammar LogManager.java:25 import TYPETHEN=46
2023-09-06 10:20:05:665 grammar LogManager.java:25 import FN=47
2023-09-06 10:20:05:665 grammar LogManager.java:25 import MAIN=48
2023-09-06 10:20:05:666 grammar LogManager.java:25 import RETURN=49
2023-09-06 10:20:05:666 grammar LogManager.java:25 import NUMBER=50
2023-09-06 10:20:05:666 grammar LogManager.java:25 import FLOAT=51
2023-09-06 10:20:05:666 grammar LogManager.java:25 import STRING=52
2023-09-06 10:20:05:666 grammar LogManager.java:25 import PUNTO=53
2023-09-06 10:20:05:666 grammar LogManager.java:25 import COMA=54
2023-09-06 10:20:05:666 grammar LogManager.java:25 import PTCOMA=55
2023-09-06 10:20:05:666 grammar LogManager.java:25 import DOSPUNTO=56
2023-09-06 10:20:05:666 grammar LogManager.java:25 import DPUNTO2=57
2023-09-06 10:20:05:666 grammar LogManager.java:25 import ASIGNACION=58
2023-09-06 10:20:05:666 grammar LogManager.java:25 import MTHEN=59
2023-09-06 10:20:05:666 grammar LogManager.java:25 import GUIONB=60
2023-09-06 10:20:05:666 grammar LogManager.java:25 import ID=61
2023-09-06 10:20:05:666 grammar LogManager.java:25 import DISTINTO=62
2023-09-06 10:20:05:666 grammar LogManager.java:25 import IGUAL=63
2023-09-06 10:20:05:666 grammar LogManager.java:25 import MAYORIGUAL=64
2023-09-06 10:20:05:666 grammar LogManager.java:25 import MENORIGUAL=65
2023-09-06 10:20:05:666 grammar LogManager.java:25 import MAYOR=66
2023-09-06 10:20:05:666 grammar LogManager.java:25 import MENOR=67
2023-09-06 10:20:05:666 grammar LogManager.java:25 import ASIG=68
2023-09-06 10:20:05:667 grammar LogManager.java:25 import MUL=69
2023-09-06 10:20:05:667 grammar LogManager.java:25 import DIV=70
2023-09-06 10:20:05:667 grammar LogManager.java:25 import ADD=71
2023-09-06 10:20:05:667 grammar LogManager.java:25 import SUB=72
2023-09-06 10:20:05:667 grammar LogManager.java:25 import MOD=73
2023-09-06 10:20:05:667 grammar LogManager.java:25 import AND=74
2023-09-06 10:20:05:667 grammar LogManager.java:25 import OR=75
2023-09-06 10:20:05:667 grammar LogManager.java:25 import NOT=76
2023-09-06 10:20:05:667 grammar LogManager.java:25 import INTERROG=77
2023-09-06 10:20:05:667 grammar LogManager.java:25 import AMP=78
2023-09-06 10:20:05:667 grammar LogManager.java:25 import INOUT=79
2023-09-06 10:20:05:667 grammar LogManager.java:25 import PARIZQ=80
2023-09-06 10:20:05:667 grammar LogManager.java:25 import PARDER=81
2023-09-06 10:20:05:667 grammar LogManager.java:25 import LLAVEIZQ=82
2023-09-06 10:20:05:667 grammar LogManager.java:25 import LLAVEDER=83
2023-09-06 10:20:05:667 grammar LogManager.java:25 import CORIZQ=84
2023-09-06 10:20:05:667 grammar LogManager.java:25 import CORDER=85
2023-09-06 10:20:05:667 grammar LogManager.java:25 import CHAR=86
2023-09-06 10:20:05:667 grammar LogManager.java:25 import WHITESPACE=87
2023-09-06 10:20:05:667 grammar LogManager.java:25 import L_COMMENT=88
2023-09-06 10:20:05:667 grammar LogManager.java:25 import COMMENT=89
2023-09-06 10:20:05:667 grammar LogManager.java:25 import 'print'=1
2023-09-06 10:20:05:667 grammar LogManager.java:25 import 'Int'=2
2023-09-06 10:20:05:668 grammar LogManager.java:25 import 'Float'=3
2023-09-06 10:20:05:668 grammar LogManager.java:25 import 'String'=4
2023-09-06 10:20:05:668 grammar LogManager.java:25 import 'Bool'=5
2023-09-06 10:20:05:668 grammar LogManager.java:25 import ' String'=6
2023-09-06 10:20:05:668 grammar LogManager.java:25 import 'Character'=7
2023-09-06 10:20:05:668 grammar LogManager.java:25 import 'array'=8
2023-09-06 10:20:05:668 grammar LogManager.java:25 import 'Vector'=9
2023-09-06 10:20:05:669 grammar LogManager.java:25 import 'usize'=10
2023-09-06 10:20:05:669 grammar LogManager.java:25 import 'if'=11
2023-09-06 10:20:05:669 grammar LogManager.java:25 import 'else'=12
2023-09-06 10:20:05:670 grammar LogManager.java:25 import 'while'=13
2023-09-06 10:20:05:671 grammar LogManager.java:25 import 'loop'=14
2023-09-06 10:20:05:671 grammar LogManager.java:25 import 'for'=15
2023-09-06 10:20:05:671 grammar LogManager.java:25 import 'in'=16
2023-09-06 10:20:05:672 grammar LogManager.java:25 import 'break'=17
2023-09-06 10:20:05:672 grammar LogManager.java:25 import 'continue'=18
2023-09-06 10:20:05:672 grammar LogManager.java:25 import 'switch'=19
2023-09-06 10:20:05:672 grammar LogManager.java:25 import '|'=20
2023-09-06 10:20:05:672 grammar LogManager.java:25 import 'case'=21
2023-09-06 10:20:05:672 grammar LogManager.java:25 import 'default'=22
2023-09-06 10:20:05:672 grammar LogManager.java:25 import 'true'=23
2023-09-06 10:20:05:672 grammar LogManager.java:25 import 'false'=24
2023-09-06 10:20:05:673 grammar LogManager.java:25 import 'as'=25
2023-09-06 10:20:05:673 grammar LogManager.java:25 import 'at'=26
2023-09-06 10:20:05:673 grammar LogManager.java:25 import 'let'=27
2023-09-06 10:20:05:673 grammar LogManager.java:25 import 'var'=28
2023-09-06 10:20:05:673 grammar LogManager.java:25 import 'struct'=29
2023-09-06 10:20:05:673 grammar LogManager.java:25 import 'vec!'=30
2023-09-06 10:20:05:673 grammar LogManager.java:25 import 'vec'=31
2023-09-06 10:20:05:673 grammar LogManager.java:25 import 'with_capacity'=32
2023-09-06 10:20:05:673 grammar LogManager.java:25 import '.to_string()'=33
2023-09-06 10:20:05:674 grammar LogManager.java:25 import '.to_owned()'=34
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'count'=35
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'new()'=36
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'capacity()'=37
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'clone()'=38
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'abs()'=39
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'append'=40
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'contains'=41
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'insert'=42
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'remove'=43
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'mod'=44
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'pub'=45
2023-09-06 10:20:05:674 grammar LogManager.java:25 import '->'=46
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'func'=47
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'main'=48
2023-09-06 10:20:05:674 grammar LogManager.java:25 import 'return'=49
2023-09-06 10:20:05:674 grammar LogManager.java:25 import '.'=53
2023-09-06 10:20:05:674 grammar LogManager.java:25 import ','=54
2023-09-06 10:20:05:674 grammar LogManager.java:25 import ';'=55
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '::'=56
2023-09-06 10:20:05:675 grammar LogManager.java:25 import ':'=57
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '='=58
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '=>'=59
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '_'=60
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '!='=62
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '=='=63
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '>='=64
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '<='=65
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '>'=66
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '<'=67
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '+='=68
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '*'=69
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '/'=70
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '+'=71
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '-'=72
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '%'=73
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '&&'=74
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '||'=75
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '!'=76
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '?'=77
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '&'=78
2023-09-06 10:20:05:675 grammar LogManager.java:25 import 'inout'=79
2023-09-06 10:20:05:675 grammar LogManager.java:25 import '('=80
2023-09-06 10:20:05:676 grammar LogManager.java:25 import ')'=81
2023-09-06 10:20:05:676 grammar LogManager.java:25 import '{'=82
2023-09-06 10:20:05:676 grammar LogManager.java:25 import '}'=83
2023-09-06 10:20:05:676 grammar LogManager.java:25 import '['=84
2023-09-06 10:20:05:676 grammar LogManager.java:25 import ']'=85
2023-09-06 10:20:05:678 grammar LogManager.java:25 tokens={PRINT_CON=1, T_NUMBER=2, T_FLOAT=3, T_STRING=4, T_BOOL=5, T_STR=6, T_CHAT=7, T_ARRAY=8, T_VECTOR=9, USIZE=10, IF=11, ELSE=12, WHILE=13, LOOP=14, FOR=15, IN=16, BREAK=17, CONTINUE=18, SWITCH=19, MTOR=20, CASE=21, DEFAULT=22, TRUE=23, FALSE=24, AS=25, AT=26, LET=27, MUT=28, STRUCT=29, VEC=30, VECN=31, CAPACITY=32, TO_STRING=33, TO_OWNED=34, LEN=35, NEW=36, CAPF=37, CLONE=38, ABS=39, PUSH=40, CONTAINS=41, INSERT=42, REMOVE=43, MODULO=44, PUBLIC=45, TYPETHEN=46, FN=47, MAIN=48, RETURN=49, NUMBER=50, FLOAT=51, STRING=52, PUNTO=53, COMA=54, PTCOMA=55, DOSPUNTO=56, DPUNTO2=57, ASIGNACION=58, MTHEN=59, GUIONB=60, ID=61, DISTINTO=62, IGUAL=63, MAYORIGUAL=64, MENORIGUAL=65, MAYOR=66, MENOR=67, ASIG=68, MUL=69, DIV=70, ADD=71, SUB=72, MOD=73, AND=74, OR=75, NOT=76, INTERROG=77, AMP=78, INOUT=79, PARIZQ=80, PARDER=81, LLAVEIZQ=82, LLAVEDER=83, CORIZQ=84, CORDER=85, CHAR=86, WHITESPACE=87, L_COMMENT=88, COMMENT=89, 'print'=1, 'Int'=2, 'Float'=3, 'String'=4, 'Bool'=5, ' String'=6, 'Character'=7, 'array'=8, 'Vector'=9, 'usize'=10, 'if'=11, 'else'=12, 'while'=13, 'loop'=14, 'for'=15, 'in'=16, 'break'=17, 'continue'=18, 'switch'=19, '|'=20, 'case'=21, 'default'=22, 'true'=23, 'false'=24, 'as'=25, 'at'=26, 'let'=27, 'var'=28, 'struct'=29, 'vec!'=30, 'vec'=31, 'with_capacity'=32, '.to_string()'=33, '.to_owned()'=34, 'count'=35, 'new()'=36, 'capacity()'=37, 'clone()'=38, 'abs()'=39, 'append'=40, 'contains'=41, 'insert'=42, 'remove'=43, 'mod'=44, 'pub'=45, '->'=46, 'func'=47, 'main'=48, 'return'=49, '.'=53, ','=54, ';'=55, '::'=56, ':'=57, '='=58, '=>'=59, '_'=60, '!='=62, '=='=63, '>='=64, '<='=65, '>'=66, '<'=67, '+='=68, '*'=69, '/'=70, '+'=71, '-'=72, '%'=73, '&&'=74, '||'=75, '!'=76, '?'=77, '&'=78, 'inout'=79, '('=80, ')'=81, '{'=82, '}'=83, '['=84, ']'=85}
2023-09-06 10:20:05:681 semantics LogManager.java:25 tokens={EOF=-1, PRINT_CON=1, T_NUMBER=2, T_FLOAT=3, T_STRING=4, T_BOOL=5, T_STR=6, T_CHAT=7, T_ARRAY=8, T_VECTOR=9, USIZE=10, IF=11, ELSE=12, WHILE=13, LOOP=14, FOR=15, IN=16, BREAK=17, CONTINUE=18, SWITCH=19, MTOR=20, CASE=21, DEFAULT=22, TRUE=23, FALSE=24, AS=25, AT=26, LET=27, MUT=28, STRUCT=29, VEC=30, VECN=31, CAPACITY=32, TO_STRING=33, TO_OWNED=34, LEN=35, NEW=36, CAPF=37, CLONE=38, ABS=39, PUSH=40, CONTAINS=41, INSERT=42, REMOVE=43, MODULO=44, PUBLIC=45, TYPETHEN=46, FN=47, MAIN=48, RETURN=49, NUMBER=50, FLOAT=51, STRING=52, PUNTO=53, COMA=54, PTCOMA=55, DOSPUNTO=56, DPUNTO2=57, ASIGNACION=58, MTHEN=59, GUIONB=60, ID=61, DISTINTO=62, IGUAL=63, MAYORIGUAL=64, MENORIGUAL=65, MAYOR=66, MENOR=67, ASIG=68, MUL=69, DIV=70, ADD=71, SUB=72, MOD=73, AND=74, OR=75, NOT=76, INTERROG=77, AMP=78, INOUT=79, PARIZQ=80, PARDER=81, LLAVEIZQ=82, LLAVEDER=83, CORIZQ=84, CORDER=85, CHAR=86, WHITESPACE=87, L_COMMENT=88, COMMENT=89}
2023-09-06 10:20:05:681 semantics LogManager.java:25 strings={'print'=1, 'Int'=2, 'Float'=3, 'String'=4, 'Bool'=5, ' String'=6, 'Character'=7, 'array'=8, 'Vector'=9, 'usize'=10, 'if'=11, 'else'=12, 'while'=13, 'loop'=14, 'for'=15, 'in'=16, 'break'=17, 'continue'=18, 'switch'=19, '|'=20, 'case'=21, 'default'=22, 'true'=23, 'false'=24, 'as'=25, 'at'=26, 'let'=27, 'var'=28, 'struct'=29, 'vec!'=30, 'vec'=31, 'with_capacity'=32, '.to_string()'=33, '.to_owned()'=34, 'count'=35, 'new()'=36, 'capacity()'=37, 'clone()'=38, 'abs()'=39, 'append'=40, 'contains'=41, 'insert'=42, 'remove'=43, 'mod'=44, 'pub'=45, '->'=46, 'func'=47, 'main'=48, 'return'=49, '.'=53, ','=54, ';'=55, '::'=56, ':'=57, '='=58, '=>'=59, '_'=60, '!='=62, '=='=63, '>='=64, '<='=65, '>'=66, '<'=67, '+='=68, '*'=69, '/'=70, '+'=71, '-'=72, '%'=73, '&&'=74, '||'=75, '!'=76, '?'=77, '&'=78, 'inout'=79, '('=80, ')'=81, '{'=82, '}'=83, '['=84, ']'=85}
2023-09-06 10:20:05:831 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2023-09-06 10:20:05:834 LL1 LogManager.java:25 look=[{1, 11, 13, 15, 17..19, 27..29, 49, 61}, {53, 83}]
2023-09-06 10:20:05:834 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:834 LL1 LogManager.java:25 
DECISION 1 in rule listaglobal
2023-09-06 10:20:05:834 LL1 LogManager.java:25 look=[null, <EOF>]
2023-09-06 10:20:05:834 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:834 LL1 LogManager.java:25 
DECISION 2 in rule in_global
2023-09-06 10:20:05:837 LL1 LogManager.java:25 look=[{1, 11, 13, 15, 17..19, 27..29, 47, 49, 53, 61}, 29]
2023-09-06 10:20:05:837 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:837 LL1 LogManager.java:25 
DECISION 3 in rule modulo_item
2023-09-06 10:20:05:837 LL1 LogManager.java:25 look=[{1, 11, 13, 15, 17..19, 27..29, 47, 49, 53, 61}, 29]
2023-09-06 10:20:05:837 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:838 LL1 LogManager.java:25 
DECISION 4 in rule funcion
2023-09-06 10:20:05:838 LL1 LogManager.java:25 look=[{1, 11, 13, 15, 17..19, 27..29, 49, 53, 61}, 47, 47, 47, 47, 47, 47]
2023-09-06 10:20:05:838 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:838 LL1 LogManager.java:25 
DECISION 5 in rule params_declar
2023-09-06 10:20:05:838 LL1 LogManager.java:25 look=[null, 81]
2023-09-06 10:20:05:838 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:838 LL1 LogManager.java:25 
DECISION 6 in rule declar_parametros
2023-09-06 10:20:05:838 LL1 LogManager.java:25 look=[{28, 61}, 61, 61, 61, 61, {28, 61}]
2023-09-06 10:20:05:838 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:838 LL1 LogManager.java:25 
DECISION 7 in rule instruccion
2023-09-06 10:20:05:838 LL1 LogManager.java:25 look=[1, {27..28}, 61, 61, 11, 19, 13, 13, 15, 17, 18, 29, 61, 49, 61]
2023-09-06 10:20:05:838 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:838 LL1 LogManager.java:25 
DECISION 8 in rule instruccion_dentro
2023-09-06 10:20:05:839 LL1 LogManager.java:25 look=[1, {27..28}, 61, 61, 11, 19, 13, 13, 15, 17, 18, 61, 49, 61]
2023-09-06 10:20:05:839 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:839 LL1 LogManager.java:25 
DECISION 9 in rule appendVec
2023-09-06 10:20:05:839 LL1 LogManager.java:25 look=[61, 61]
2023-09-06 10:20:05:839 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:839 LL1 LogManager.java:25 
DECISION 10 in rule lista_struct
2023-09-06 10:20:05:839 LL1 LogManager.java:25 look=[28, 28, 27, 27]
2023-09-06 10:20:05:839 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:839 LL1 LogManager.java:25 
DECISION 11 in rule lista_struct
2023-09-06 10:20:05:839 LL1 LogManager.java:25 look=[null, null, null, null]
2023-09-06 10:20:05:839 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:839 LL1 LogManager.java:25 
DECISION 12 in rule lista_struct
2023-09-06 10:20:05:839 LL1 LogManager.java:25 look=[null, 83]
2023-09-06 10:20:05:839 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:839 LL1 LogManager.java:25 
DECISION 13 in rule callFunction
2023-09-06 10:20:05:839 LL1 LogManager.java:25 look=[61, 61]
2023-09-06 10:20:05:839 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:839 LL1 LogManager.java:25 
DECISION 14 in rule returnFun
2023-09-06 10:20:05:839 LL1 LogManager.java:25 look=[49, 49]
2023-09-06 10:20:05:839 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:839 LL1 LogManager.java:25 
DECISION 15 in rule lBreak
2023-09-06 10:20:05:840 LL1 LogManager.java:25 look=[17, 17]
2023-09-06 10:20:05:840 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:840 LL1 LogManager.java:25 
DECISION 16 in rule listParams
2023-09-06 10:20:05:840 LL1 LogManager.java:25 look=[null, {81, 85}]
2023-09-06 10:20:05:840 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:841 LL1 LogManager.java:25 
DECISION 17 in rule listParamsCall
2023-09-06 10:20:05:841 LL1 LogManager.java:25 look=[null, 81]
2023-09-06 10:20:05:841 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:841 LL1 LogManager.java:25 
DECISION 18 in rule es_referencia
2023-09-06 10:20:05:841 LL1 LogManager.java:25 look=[78, {4, 11, 13, 16, 19, 23..24, 50..52, 61, 72, 76, 78, 80, 84, 86}]
2023-09-06 10:20:05:841 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:841 LL1 LogManager.java:25 
DECISION 19 in rule declaracion
2023-09-06 10:20:05:841 LL1 LogManager.java:25 look=[{27..28}, {27..28}, {27..28}, {27..28}, {27..28}, {27..28}]
2023-09-06 10:20:05:841 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:841 LL1 LogManager.java:25 
DECISION 20 in rule es_var
2023-09-06 10:20:05:842 LL1 LogManager.java:25 look=[28, 61]
2023-09-06 10:20:05:842 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:842 LL1 LogManager.java:25 
DECISION 21 in rule es_varr
2023-09-06 10:20:05:842 LL1 LogManager.java:25 look=[28, 27]
2023-09-06 10:20:05:842 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:842 LL1 LogManager.java:25 
DECISION 22 in rule letid
2023-09-06 10:20:05:842 LL1 LogManager.java:25 look=[57, 58]
2023-09-06 10:20:05:842 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:842 LL1 LogManager.java:25 
DECISION 23 in rule vector_types
2023-09-06 10:20:05:842 LL1 LogManager.java:25 look=[84, 84]
2023-09-06 10:20:05:842 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:842 LL1 LogManager.java:25 
DECISION 24 in rule array_type
2023-09-06 10:20:05:845 LL1 LogManager.java:25 look=[84, 84, 84]
2023-09-06 10:20:05:845 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:845 LL1 LogManager.java:25 
DECISION 25 in rule asignacion
2023-09-06 10:20:05:845 LL1 LogManager.java:25 look=[61, 61, 61, 61, 61]
2023-09-06 10:20:05:845 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:845 LL1 LogManager.java:25 
DECISION 26 in rule l_AccessStruct
2023-09-06 10:20:05:845 LL1 LogManager.java:25 look=[null, 58]
2023-09-06 10:20:05:845 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:845 LL1 LogManager.java:25 
DECISION 27 in rule list_index
2023-09-06 10:20:05:845 LL1 LogManager.java:25 look=[null, 58]
2023-09-06 10:20:05:845 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:845 LL1 LogManager.java:25 
DECISION 28 in rule if_sent
2023-09-06 10:20:05:845 LL1 LogManager.java:25 look=[11, 11, 11, 11]
2023-09-06 10:20:05:845 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:845 LL1 LogManager.java:25 
DECISION 29 in rule if_exp
2023-09-06 10:20:05:845 LL1 LogManager.java:25 look=[11, 11]
2023-09-06 10:20:05:845 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:845 LL1 LogManager.java:25 
DECISION 30 in rule list_elseif
2023-09-06 10:20:05:846 LL1 LogManager.java:25 look=[12, null]
2023-09-06 10:20:05:846 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:846 LL1 LogManager.java:25 
DECISION 31 in rule list_elseif_exp
2023-09-06 10:20:05:846 LL1 LogManager.java:25 look=[12, 12]
2023-09-06 10:20:05:846 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:846 LL1 LogManager.java:25 
DECISION 32 in rule switch_sent
2023-09-06 10:20:05:846 LL1 LogManager.java:25 look=[19, 19, 19, 19, 19]
2023-09-06 10:20:05:846 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:846 LL1 LogManager.java:25 
DECISION 33 in rule match_brazos
2023-09-06 10:20:05:846 LL1 LogManager.java:25 look=[null, {22, 83}]
2023-09-06 10:20:05:846 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:846 LL1 LogManager.java:25 
DECISION 34 in rule match_brazos_exp
2023-09-06 10:20:05:847 LL1 LogManager.java:25 look=[null, {22, 83}]
2023-09-06 10:20:05:847 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:847 LL1 LogManager.java:25 
DECISION 35 in rule matchbrazo
2023-09-06 10:20:05:847 LL1 LogManager.java:25 look=[21, 21]
2023-09-06 10:20:05:847 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:847 LL1 LogManager.java:25 
DECISION 36 in rule listaOpciones
2023-09-06 10:20:05:847 LL1 LogManager.java:25 look=[null, 57]
2023-09-06 10:20:05:847 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:847 LL1 LogManager.java:25 
DECISION 37 in rule bloque_inst
2023-09-06 10:20:05:847 LL1 LogManager.java:25 look=[82, 82]
2023-09-06 10:20:05:847 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:847 LL1 LogManager.java:25 
DECISION 38 in rule bloque_princip
2023-09-06 10:20:05:847 LL1 LogManager.java:25 look=[{1, 11, 13, 15, 17..19, 27..29, 49, 53, 61}, 53]
2023-09-06 10:20:05:847 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:847 LL1 LogManager.java:25 
DECISION 39 in rule tipos_var
2023-09-06 10:20:05:847 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:847 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:847 LL1 LogManager.java:25 
DECISION 40 in rule tipos_var
2023-09-06 10:20:05:847 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:847 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:847 LL1 LogManager.java:25 
DECISION 41 in rule tipos_var
2023-09-06 10:20:05:848 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:848 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:848 LL1 LogManager.java:25 
DECISION 42 in rule tipos_var
2023-09-06 10:20:05:848 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:848 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:848 LL1 LogManager.java:25 
DECISION 43 in rule tipos_var
2023-09-06 10:20:05:848 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:848 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:848 LL1 LogManager.java:25 
DECISION 44 in rule tipos_var
2023-09-06 10:20:05:848 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:848 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:848 LL1 LogManager.java:25 
DECISION 45 in rule tipos_var
2023-09-06 10:20:05:848 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:848 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:848 LL1 LogManager.java:25 
DECISION 46 in rule tipos_var
2023-09-06 10:20:05:848 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:848 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:848 LL1 LogManager.java:25 
DECISION 47 in rule tipos_var
2023-09-06 10:20:05:848 LL1 LogManager.java:25 look=[77, null]
2023-09-06 10:20:05:848 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:848 LL1 LogManager.java:25 
DECISION 48 in rule tipos_var
2023-09-06 10:20:05:848 LL1 LogManager.java:25 look=[2, 4, 3, 5, 6, 29, 7, 8, 9]
2023-09-06 10:20:05:848 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:849 LL1 LogManager.java:25 
DECISION 49 in rule expression
2023-09-06 10:20:05:849 LL1 LogManager.java:25 look=[null, null]
2023-09-06 10:20:05:849 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:849 LL1 LogManager.java:25 
DECISION 50 in rule expr_arit
2023-09-06 10:20:05:849 LL1 LogManager.java:25 look=[72, 76, 4, 61, 61, 84, 84, 61, {4, 23..24, 50..52, 61, 78, 86}, 80, 80, 11, 19, 13, 61, 61, 16]
2023-09-06 10:20:05:849 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:849 LL1 LogManager.java:25 
DECISION 51 in rule expr_arit
2023-09-06 10:20:05:849 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-06 10:20:05:849 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:850 LL1 LogManager.java:25 
DECISION 52 in rule expr_arit
2023-09-06 10:20:05:851 LL1 LogManager.java:25 look=[null, null]
2023-09-06 10:20:05:851 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:851 LL1 LogManager.java:25 
DECISION 53 in rule tipo_cast
2023-09-06 10:20:05:851 LL1 LogManager.java:25 look=[3, 2, 10]
2023-09-06 10:20:05:851 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:852 LL1 LogManager.java:25 
DECISION 54 in rule l_StructExp
2023-09-06 10:20:05:852 LL1 LogManager.java:25 look=[null, 81]
2023-09-06 10:20:05:852 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:852 LL1 LogManager.java:25 
DECISION 55 in rule primitivo
2023-09-06 10:20:05:852 LL1 LogManager.java:25 look=[50, 51, {4, 52, 78}, 86, 23, 24, 61]
2023-09-06 10:20:05:852 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:852 LL1 LogManager.java:25 
DECISION 56 in rule listIDArray
2023-09-06 10:20:05:852 LL1 LogManager.java:25 look=[null, null]
2023-09-06 10:20:05:852 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:852 LL1 LogManager.java:25 
DECISION 57 in rule listIDArray
2023-09-06 10:20:05:853 LL1 LogManager.java:25 look=[null, null]
2023-09-06 10:20:05:853 LL1 LogManager.java:25 LL(1)? false
2023-09-06 10:20:05:853 LL1 LogManager.java:25 
DECISION 58 in rule strings
2023-09-06 10:20:05:853 LL1 LogManager.java:25 look=[78, 4]
2023-09-06 10:20:05:853 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:853 LL1 LogManager.java:25 
DECISION 59 in rule strings
2023-09-06 10:20:05:853 LL1 LogManager.java:25 look=[78, 4, 52]
2023-09-06 10:20:05:854 LL1 LogManager.java:25 LL(1)? true
2023-09-06 10:20:05:878 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




2023-09-06 10:20:05:910 action-translator LogManager.java:25 translate $lista = $listaglobal.lista
2023-09-06 10:20:05:910 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,19:17]
2023-09-06 10:20:05:912 action-translator LogManager.java:25 qattr [@-1,10:20='listaglobal',<0>,19:26].[@-1,22:26='lista',<0>,19:38]
2023-09-06 10:20:05:915 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2023-09-06 10:20:05:915 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,24:5]
2023-09-06 10:20:05:921 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    
2023-09-06 10:20:05:922 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,29:13]
2023-09-06 10:20:05:923 action-translator LogManager.java:25 translate 
    $lista = arrayList.New()

2023-09-06 10:20:05:923 action-translator LogManager.java:25 attr [@-1,7:11='lista',<0>,39:5]
2023-09-06 10:20:05:923 action-translator LogManager.java:25 translate 
2023-09-06 10:20:05:923 action-translator LogManager.java:25 translate  $lista.Add( $in_global.globals ) 
2023-09-06 10:20:05:923 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,2:44]
2023-09-06 10:20:05:924 action-translator LogManager.java:25 qattr [@-1,14:22='in_global',<0>,2:56].[@-1,24:30='globals',<0>,2:66]
2023-09-06 10:20:05:924 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:05:925 action-translator LogManager.java:25 translate 
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  
2023-09-06 10:20:05:925 action-translator LogManager.java:25 qattr [@-1,55:60='lisfun',<0>,6:53].[@-1,62:66='lista',<0>,6:60]
2023-09-06 10:20:05:925 action-translator LogManager.java:25 qattr [@-1,74:82='in_global',<0>,6:72].[@-1,84:90='globals',<0>,6:82]
2023-09-06 10:20:05:925 action-translator LogManager.java:25 attr [@-1,147:151='lista',<0>,7:53]
2023-09-06 10:20:05:925 action-translator LogManager.java:25 qattr [@-1,157:162='lisfun',<0>,7:63].[@-1,164:168='lista',<0>,7:70]
2023-09-06 10:20:05:926 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:05:928 action-translator LogManager.java:25 translate $globals = $funcion.instr
2023-09-06 10:20:05:929 action-translator LogManager.java:25 attr [@-1,1:7='globals',<0>,49:17]
2023-09-06 10:20:05:929 action-translator LogManager.java:25 qattr [@-1,12:18='funcion',<0>,49:28].[@-1,20:24='instr',<0>,49:36]
2023-09-06 10:20:05:929 action-translator LogManager.java:25 translate $globals = $newStruct.str
2023-09-06 10:20:05:929 action-translator LogManager.java:25 attr [@-1,1:7='globals',<0>,51:17]
2023-09-06 10:20:05:929 action-translator LogManager.java:25 qattr [@-1,12:20='newStruct',<0>,51:28].[@-1,22:24='str',<0>,51:38]
2023-09-06 10:20:05:931 action-translator LogManager.java:25 translate $instr = $funcion.instr
2023-09-06 10:20:05:932 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,90:21]
2023-09-06 10:20:05:932 action-translator LogManager.java:25 qattr [@-1,10:16='funcion',<0>,90:30].[@-1,18:22='instr',<0>,90:38]
2023-09-06 10:20:05:933 action-translator LogManager.java:25 translate $instr = $newStruct.str
2023-09-06 10:20:05:933 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,91:21]
2023-09-06 10:20:05:933 action-translator LogManager.java:25 qattr [@-1,10:18='newStruct',<0>,91:30].[@-1,20:22='str',<0>,91:40]
2023-09-06 10:20:05:938 action-translator LogManager.java:25 translate  listParams :=  arrayList.New() 
2023-09-06 10:20:05:943 action-translator LogManager.java:25 translate $instr =  $fn_main.instr
2023-09-06 10:20:05:943 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,97:27]
2023-09-06 10:20:05:943 action-translator LogManager.java:25 qattr [@-1,11:17='fn_main',<0>,97:37].[@-1,19:23='instr',<0>,97:45]
2023-09-06 10:20:05:945 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )
2023-09-06 10:20:05:945 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,98:53]
2023-09-06 10:20:05:945 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,98:91].[@-1,43:46='text',<0>,98:94]
2023-09-06 10:20:05:946 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,98:111].[@-1,72:72='l',<0>,98:123]
2023-09-06 10:20:05:946 action-translator LogManager.java:25 qattr [@-1,76:84='tipos_var',<0>,98:127].[@-1,86:89='tipo',<0>,98:137]
2023-09-06 10:20:05:946 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,98:144].[@-1,96:99='line',<0>,98:147]
2023-09-06 10:20:05:946 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,98:154].[@-1,106:108='pos',<0>,98:157]
2023-09-06 10:20:05:947 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )
2023-09-06 10:20:05:947 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,100:53]
2023-09-06 10:20:05:947 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,100:91].[@-1,43:46='text',<0>,100:94]
2023-09-06 10:20:05:948 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,100:111].[@-1,72:72='l',<0>,100:123]
2023-09-06 10:20:05:948 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,100:144].[@-1,96:99='line',<0>,100:147]
2023-09-06 10:20:05:948 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,100:154].[@-1,106:108='pos',<0>,100:157]
2023-09-06 10:20:05:948 action-translator LogManager.java:25 qattr [@-1,113:116='idob',<0>,100:164].[@-1,118:121='text',<0>,100:169]
2023-09-06 10:20:05:949 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )
2023-09-06 10:20:05:949 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,102:53]
2023-09-06 10:20:05:949 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,102:91].[@-1,43:46='text',<0>,102:94]
2023-09-06 10:20:05:949 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,102:111].[@-1,72:72='l',<0>,102:123]
2023-09-06 10:20:05:949 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,102:144].[@-1,96:99='line',<0>,102:147]
2023-09-06 10:20:05:949 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,102:154].[@-1,106:108='pos',<0>,102:157]
2023-09-06 10:20:05:951 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )
2023-09-06 10:20:05:951 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,103:53]
2023-09-06 10:20:05:951 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,103:91].[@-1,43:46='text',<0>,103:94]
2023-09-06 10:20:05:953 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,103:100].[@-1,63:67='lista',<0>,103:114]
2023-09-06 10:20:05:954 action-translator LogManager.java:25 qattr [@-1,70:80='bloque_inst',<0>,103:121].[@-1,82:82='l',<0>,103:133]
2023-09-06 10:20:05:954 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,103:154].[@-1,106:109='line',<0>,103:157]
2023-09-06 10:20:05:954 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,103:164].[@-1,116:118='pos',<0>,103:167]
2023-09-06 10:20:05:955 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )
2023-09-06 10:20:05:955 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,105:67]
2023-09-06 10:20:05:955 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,105:105].[@-1,43:46='text',<0>,105:108]
2023-09-06 10:20:05:955 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,105:114].[@-1,63:67='lista',<0>,105:128]
2023-09-06 10:20:05:955 action-translator LogManager.java:25 qattr [@-1,71:81='bloque_inst',<0>,105:136].[@-1,83:83='l',<0>,105:148]
2023-09-06 10:20:05:955 action-translator LogManager.java:25 qattr [@-1,86:94='tipos_var',<0>,105:151].[@-1,96:99='tipo',<0>,105:161]
2023-09-06 10:20:05:956 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,105:168].[@-1,106:109='line',<0>,105:171]
2023-09-06 10:20:05:956 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,105:178].[@-1,116:118='pos',<0>,105:181]
2023-09-06 10:20:05:956 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )
2023-09-06 10:20:05:956 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,108:68]
2023-09-06 10:20:05:957 action-translator LogManager.java:25 qattr [@-1,40:41='id',<0>,108:106].[@-1,43:46='text',<0>,108:109]
2023-09-06 10:20:05:957 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,108:115].[@-1,63:67='lista',<0>,108:129]
2023-09-06 10:20:05:957 action-translator LogManager.java:25 qattr [@-1,71:81='bloque_inst',<0>,108:137].[@-1,83:83='l',<0>,108:149]
2023-09-06 10:20:05:957 action-translator LogManager.java:25 qattr [@-1,104:105='id',<0>,108:170].[@-1,107:110='line',<0>,108:173]
2023-09-06 10:20:05:957 action-translator LogManager.java:25 qattr [@-1,114:115='id',<0>,108:180].[@-1,117:119='pos',<0>,108:183]
2023-09-06 10:20:05:957 action-translator LogManager.java:25 qattr [@-1,123:126='idob',<0>,108:189].[@-1,128:131='text',<0>,108:194]
2023-09-06 10:20:05:958 action-translator LogManager.java:25 translate 
$lista =  arrayList.New()

2023-09-06 10:20:05:958 action-translator LogManager.java:25 attr [@-1,3:7='lista',<0>,116:1]
2023-09-06 10:20:05:959 action-translator LogManager.java:25 translate 
2023-09-06 10:20:05:959 action-translator LogManager.java:25 translate    $lista.Add($declar_parametros.in_dec) 
2023-09-06 10:20:05:959 action-translator LogManager.java:25 attr [@-1,4:8='lista',<0>,2:51]
2023-09-06 10:20:05:959 action-translator LogManager.java:25 qattr [@-1,15:31='declar_parametros',<0>,2:62].[@-1,33:38='in_dec',<0>,2:80]
2023-09-06 10:20:05:959 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:05:960 action-translator LogManager.java:25 translate 
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista 
2023-09-06 10:20:05:960 action-translator LogManager.java:25 qattr [@-1,73:79='listdec',<0>,6:71].[@-1,81:85='lista',<0>,6:79]
2023-09-06 10:20:05:960 action-translator LogManager.java:25 qattr [@-1,92:108='declar_parametros',<0>,6:90].[@-1,110:115='in_dec',<0>,6:108]
2023-09-06 10:20:05:960 action-translator LogManager.java:25 attr [@-1,190:194='lista',<0>,7:71]
2023-09-06 10:20:05:960 action-translator LogManager.java:25 qattr [@-1,200:206='listdec',<0>,7:81].[@-1,208:212='lista',<0>,7:89]
2023-09-06 10:20:05:963 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:05:965 action-translator LogManager.java:25 translate 
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isVar.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    
2023-09-06 10:20:05:966 action-translator LogManager.java:25 qattr [@-1,122:123='ID',<0>,127:66].[@-1,125:128='text',<0>,127:69]
2023-09-06 10:20:05:966 action-translator LogManager.java:25 qattr [@-1,132:133='ID',<0>,127:76].[@-1,135:138='line',<0>,127:79]
2023-09-06 10:20:05:966 action-translator LogManager.java:25 qattr [@-1,142:143='ID',<0>,127:86].[@-1,145:147='pos',<0>,127:89]
2023-09-06 10:20:05:966 action-translator LogManager.java:25 qattr [@-1,213:214='ID',<0>,128:60].[@-1,216:219='text',<0>,128:63]
2023-09-06 10:20:05:966 action-translator LogManager.java:25 qattr [@-1,223:231='tipos_var',<0>,128:70].[@-1,233:236='tipo',<0>,128:80]
2023-09-06 10:20:05:966 action-translator LogManager.java:25 qattr [@-1,245:249='isVar',<0>,128:92].[@-1,251:253='mut',<0>,128:98]
2023-09-06 10:20:05:967 action-translator LogManager.java:25 qattr [@-1,257:258='ID',<0>,128:104].[@-1,260:263='line',<0>,128:107]
2023-09-06 10:20:05:967 action-translator LogManager.java:25 qattr [@-1,267:268='ID',<0>,128:114].[@-1,270:272='pos',<0>,128:117]
2023-09-06 10:20:05:967 action-translator LogManager.java:25 attr [@-1,302:307='in_dec',<0>,129:25]
2023-09-06 10:20:05:967 action-translator LogManager.java:25 translate 
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $es_referencia.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    
2023-09-06 10:20:05:967 action-translator LogManager.java:25 qattr [@-1,68:69='id',<0>,132:66].[@-1,71:74='text',<0>,132:69]
2023-09-06 10:20:05:968 action-translator LogManager.java:25 qattr [@-1,100:112='es_referencia',<0>,132:98].[@-1,114:116='ref',<0>,132:112]
2023-09-06 10:20:05:968 action-translator LogManager.java:25 qattr [@-1,120:121='id',<0>,132:118].[@-1,123:126='line',<0>,132:121]
2023-09-06 10:20:05:970 action-translator LogManager.java:25 qattr [@-1,130:131='id',<0>,132:128].[@-1,133:135='pos',<0>,132:131]
2023-09-06 10:20:05:970 action-translator LogManager.java:25 qattr [@-1,144:147='idob',<0>,132:142].[@-1,149:152='text',<0>,132:147]
2023-09-06 10:20:05:970 action-translator LogManager.java:25 attr [@-1,181:186='in_dec',<0>,133:25]
2023-09-06 10:20:05:970 action-translator LogManager.java:25 translate 
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $es_referencia.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    
2023-09-06 10:20:05:970 action-translator LogManager.java:25 qattr [@-1,68:69='id',<0>,136:66].[@-1,71:74='text',<0>,136:69]
2023-09-06 10:20:05:971 action-translator LogManager.java:25 qattr [@-1,78:86='tipos_var',<0>,136:76].[@-1,88:91='tipo',<0>,136:86]
2023-09-06 10:20:05:971 action-translator LogManager.java:25 qattr [@-1,100:112='es_referencia',<0>,136:98].[@-1,114:116='ref',<0>,136:112]
2023-09-06 10:20:05:971 action-translator LogManager.java:25 qattr [@-1,120:121='id',<0>,136:118].[@-1,123:126='line',<0>,136:121]
2023-09-06 10:20:05:971 action-translator LogManager.java:25 qattr [@-1,130:131='id',<0>,136:128].[@-1,133:135='pos',<0>,136:131]
2023-09-06 10:20:05:972 action-translator LogManager.java:25 attr [@-1,173:178='in_dec',<0>,137:25]
2023-09-06 10:20:05:972 action-translator LogManager.java:25 translate 
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    
2023-09-06 10:20:05:972 action-translator LogManager.java:25 qattr [@-1,122:123='ID',<0>,141:66].[@-1,125:128='text',<0>,141:69]
2023-09-06 10:20:05:973 action-translator LogManager.java:25 qattr [@-1,132:133='ID',<0>,141:76].[@-1,135:138='line',<0>,141:79]
2023-09-06 10:20:05:973 action-translator LogManager.java:25 qattr [@-1,142:143='ID',<0>,141:86].[@-1,145:147='pos',<0>,141:89]
2023-09-06 10:20:05:973 action-translator LogManager.java:25 qattr [@-1,218:219='ID',<0>,142:65].[@-1,221:224='text',<0>,142:68]
2023-09-06 10:20:05:973 action-translator LogManager.java:25 qattr [@-1,228:237='array_type',<0>,142:75].[@-1,239:240='ty',<0>,142:86]
2023-09-06 10:20:05:973 action-translator LogManager.java:25 qattr [@-1,255:256='ID',<0>,142:102].[@-1,258:261='line',<0>,142:105]
2023-09-06 10:20:05:973 action-translator LogManager.java:25 qattr [@-1,265:266='ID',<0>,142:112].[@-1,268:270='pos',<0>,142:115]
2023-09-06 10:20:05:973 action-translator LogManager.java:25 attr [@-1,300:305='in_dec',<0>,143:25]
2023-09-06 10:20:05:974 action-translator LogManager.java:25 translate  
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $es_referencia.ref, $id.line, $id.pos)
                            $in_dec = decl
                        
2023-09-06 10:20:05:974 action-translator LogManager.java:25 qattr [@-1,67:68='id',<0>,147:64].[@-1,70:73='text',<0>,147:67]
2023-09-06 10:20:05:975 action-translator LogManager.java:25 qattr [@-1,101:113='es_referencia',<0>,147:98].[@-1,115:117='ref',<0>,147:112]
2023-09-06 10:20:05:975 action-translator LogManager.java:25 qattr [@-1,121:122='id',<0>,147:118].[@-1,124:127='line',<0>,147:121]
2023-09-06 10:20:05:975 action-translator LogManager.java:25 qattr [@-1,131:132='id',<0>,147:128].[@-1,134:136='pos',<0>,147:131]
2023-09-06 10:20:05:975 action-translator LogManager.java:25 attr [@-1,169:174='in_dec',<0>,148:29]
2023-09-06 10:20:05:975 action-translator LogManager.java:25 translate 
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isRef.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    
2023-09-06 10:20:05:976 action-translator LogManager.java:25 qattr [@-1,68:69='id',<0>,151:66].[@-1,71:74='text',<0>,151:69]
2023-09-06 10:20:05:976 action-translator LogManager.java:25 qattr [@-1,100:104='isRef',<0>,151:98].[@-1,106:108='mut',<0>,151:104]
2023-09-06 10:20:05:976 action-translator LogManager.java:25 qattr [@-1,112:113='id',<0>,151:110].[@-1,115:118='line',<0>,151:113]
2023-09-06 10:20:05:976 action-translator LogManager.java:25 qattr [@-1,122:123='id',<0>,151:120].[@-1,125:127='pos',<0>,151:123]
2023-09-06 10:20:05:976 action-translator LogManager.java:25 qattr [@-1,136:139='idob',<0>,151:134].[@-1,141:144='text',<0>,151:139]
2023-09-06 10:20:05:976 action-translator LogManager.java:25 attr [@-1,173:178='in_dec',<0>,152:25]
2023-09-06 10:20:05:977 action-translator LogManager.java:25 translate  listParams:= arrayList.New() 
2023-09-06 10:20:05:978 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )
2023-09-06 10:20:05:978 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,169:6]
2023-09-06 10:20:05:978 action-translator LogManager.java:25 qattr [@-1,58:71='bloque_princip',<0>,169:62].[@-1,73:73='l',<0>,169:77]
2023-09-06 10:20:05:980 action-translator LogManager.java:25 translate $instr = $printconsola.instr
2023-09-06 10:20:05:981 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,174:19]
2023-09-06 10:20:05:981 action-translator LogManager.java:25 qattr [@-1,10:21='printconsola',<0>,174:28].[@-1,23:27='instr',<0>,174:41]
2023-09-06 10:20:05:981 action-translator LogManager.java:25 translate $instr = $declaracion.instr
2023-09-06 10:20:05:981 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,175:18]
2023-09-06 10:20:05:982 action-translator LogManager.java:25 qattr [@-1,10:20='declaracion',<0>,175:27].[@-1,22:26='instr',<0>,175:39]
2023-09-06 10:20:05:982 action-translator LogManager.java:25 translate $instr = $asignacion.instr
2023-09-06 10:20:05:982 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,176:17]
2023-09-06 10:20:05:982 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,176:26].[@-1,21:25='instr',<0>,176:37]
2023-09-06 10:20:05:983 action-translator LogManager.java:25 translate $instr = $appendVec.instr
2023-09-06 10:20:05:983 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,178:16]
2023-09-06 10:20:05:983 action-translator LogManager.java:25 qattr [@-1,10:18='appendVec',<0>,178:25].[@-1,20:24='instr',<0>,178:35]
2023-09-06 10:20:05:983 action-translator LogManager.java:25 translate $instr = $if_sent.instr
2023-09-06 10:20:05:983 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,180:14]
2023-09-06 10:20:05:984 action-translator LogManager.java:25 qattr [@-1,10:16='if_sent',<0>,180:23].[@-1,18:22='instr',<0>,180:31]
2023-09-06 10:20:05:984 action-translator LogManager.java:25 translate $instr = $switch_sent.instr
2023-09-06 10:20:05:984 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,181:17]
2023-09-06 10:20:05:984 action-translator LogManager.java:25 qattr [@-1,10:20='switch_sent',<0>,181:26].[@-1,22:26='instr',<0>,181:38]
2023-09-06 10:20:05:984 action-translator LogManager.java:25 translate  $instr = $while_true.lop 
2023-09-06 10:20:05:984 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,183:17]
2023-09-06 10:20:05:984 action-translator LogManager.java:25 qattr [@-1,11:20='while_true',<0>,183:26].[@-1,22:24='lop',<0>,183:37]
2023-09-06 10:20:05:986 action-translator LogManager.java:25 translate  $instr = $lWhile.lwh 
2023-09-06 10:20:05:986 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,184:13]
2023-09-06 10:20:05:986 action-translator LogManager.java:25 qattr [@-1,11:16='lWhile',<0>,184:22].[@-1,18:20='lwh',<0>,184:29]
2023-09-06 10:20:05:987 action-translator LogManager.java:25 translate  $instr = $lForin.lfor 
2023-09-06 10:20:05:987 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,185:13]
2023-09-06 10:20:05:987 action-translator LogManager.java:25 qattr [@-1,11:16='lForin',<0>,185:22].[@-1,18:21='lfor',<0>,185:29]
2023-09-06 10:20:05:988 action-translator LogManager.java:25 translate  $instr = $lBreak.br 
2023-09-06 10:20:05:988 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,188:14]
2023-09-06 10:20:05:988 action-translator LogManager.java:25 qattr [@-1,11:16='lBreak',<0>,188:23].[@-1,18:19='br',<0>,188:30]
2023-09-06 10:20:05:989 action-translator LogManager.java:25 translate  $instr = $lContinue.cn 
2023-09-06 10:20:05:989 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,189:17]
2023-09-06 10:20:05:989 action-translator LogManager.java:25 qattr [@-1,11:19='lContinue',<0>,189:26].[@-1,21:22='cn',<0>,189:36]
2023-09-06 10:20:05:991 action-translator LogManager.java:25 translate $instr = $newStruct.str
2023-09-06 10:20:05:992 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,191:16]
2023-09-06 10:20:05:993 action-translator LogManager.java:25 qattr [@-1,10:18='newStruct',<0>,191:25].[@-1,20:22='str',<0>,191:35]
2023-09-06 10:20:05:993 action-translator LogManager.java:25 translate $instr = $callFunction.instr
2023-09-06 10:20:05:993 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,193:19]
2023-09-06 10:20:05:993 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,193:28].[@-1,23:27='instr',<0>,193:41]
2023-09-06 10:20:05:993 action-translator LogManager.java:25 translate $instr = $returnFun.instr
2023-09-06 10:20:05:993 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,194:16]
2023-09-06 10:20:05:994 action-translator LogManager.java:25 qattr [@-1,10:18='returnFun',<0>,194:25].[@-1,20:24='instr',<0>,194:35]
2023-09-06 10:20:05:995 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-06 10:20:05:995 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,196:47]
2023-09-06 10:20:05:995 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,196:83].[@-1,41:44='text',<0>,196:86]
2023-09-06 10:20:05:996 action-translator LogManager.java:25 qattr [@-1,48:57='expression',<0>,196:93].[@-1,59:59='p',<0>,196:104]
2023-09-06 10:20:05:996 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,196:108].[@-1,66:69='line',<0>,196:111]
2023-09-06 10:20:05:996 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,196:118].[@-1,76:78='pos',<0>,196:121]
2023-09-06 10:20:05:999 action-translator LogManager.java:25 translate $instr = $printconsola.instr
2023-09-06 10:20:05:999 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,201:19]
2023-09-06 10:20:05:999 action-translator LogManager.java:25 qattr [@-1,10:21='printconsola',<0>,201:28].[@-1,23:27='instr',<0>,201:41]
2023-09-06 10:20:05:999 action-translator LogManager.java:25 translate $instr = $declaracion.instr
2023-09-06 10:20:05:999 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,202:18]
2023-09-06 10:20:05:999 action-translator LogManager.java:25 qattr [@-1,10:20='declaracion',<0>,202:27].[@-1,22:26='instr',<0>,202:39]
2023-09-06 10:20:05:999 action-translator LogManager.java:25 translate $instr = $asignacion.instr
2023-09-06 10:20:05:999 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,203:16]
2023-09-06 10:20:05:999 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,203:25].[@-1,21:25='instr',<0>,203:36]
2023-09-06 10:20:06:000 action-translator LogManager.java:25 translate $instr = $appendVec.instr
2023-09-06 10:20:06:000 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,205:16]
2023-09-06 10:20:06:000 action-translator LogManager.java:25 qattr [@-1,10:18='appendVec',<0>,205:25].[@-1,20:24='instr',<0>,205:35]
2023-09-06 10:20:06:001 action-translator LogManager.java:25 translate $instr = $if_sent.instr
2023-09-06 10:20:06:002 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,207:14]
2023-09-06 10:20:06:002 action-translator LogManager.java:25 qattr [@-1,10:16='if_sent',<0>,207:23].[@-1,18:22='instr',<0>,207:31]
2023-09-06 10:20:06:002 action-translator LogManager.java:25 translate $instr = $switch_sent.instr
2023-09-06 10:20:06:003 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,208:17]
2023-09-06 10:20:06:003 action-translator LogManager.java:25 qattr [@-1,10:20='switch_sent',<0>,208:26].[@-1,22:26='instr',<0>,208:38]
2023-09-06 10:20:06:003 action-translator LogManager.java:25 translate  $instr = $while_true.lop 
2023-09-06 10:20:06:003 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,210:17]
2023-09-06 10:20:06:003 action-translator LogManager.java:25 qattr [@-1,11:20='while_true',<0>,210:26].[@-1,22:24='lop',<0>,210:37]
2023-09-06 10:20:06:004 action-translator LogManager.java:25 translate  $instr = $lWhile.lwh 
2023-09-06 10:20:06:004 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,211:13]
2023-09-06 10:20:06:004 action-translator LogManager.java:25 qattr [@-1,11:16='lWhile',<0>,211:22].[@-1,18:20='lwh',<0>,211:29]
2023-09-06 10:20:06:004 action-translator LogManager.java:25 translate  $instr = $lForin.lfor 
2023-09-06 10:20:06:005 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,212:13]
2023-09-06 10:20:06:005 action-translator LogManager.java:25 qattr [@-1,11:16='lForin',<0>,212:22].[@-1,18:21='lfor',<0>,212:29]
2023-09-06 10:20:06:005 action-translator LogManager.java:25 translate  $instr = $lBreak.br 
2023-09-06 10:20:06:005 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,214:14]
2023-09-06 10:20:06:005 action-translator LogManager.java:25 qattr [@-1,11:16='lBreak',<0>,214:23].[@-1,18:19='br',<0>,214:30]
2023-09-06 10:20:06:006 action-translator LogManager.java:25 translate  $instr = $lContinue.cn 
2023-09-06 10:20:06:006 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,215:17]
2023-09-06 10:20:06:006 action-translator LogManager.java:25 qattr [@-1,11:19='lContinue',<0>,215:26].[@-1,21:22='cn',<0>,215:36]
2023-09-06 10:20:06:006 action-translator LogManager.java:25 translate $instr = $callFunction.instr
2023-09-06 10:20:06:006 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,217:18]
2023-09-06 10:20:06:006 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,217:27].[@-1,23:27='instr',<0>,217:40]
2023-09-06 10:20:06:007 action-translator LogManager.java:25 translate $instr = $returnFun.instr
2023-09-06 10:20:06:007 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,218:16]
2023-09-06 10:20:06:010 action-translator LogManager.java:25 qattr [@-1,10:18='returnFun',<0>,218:25].[@-1,20:24='instr',<0>,218:35]
2023-09-06 10:20:06:013 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-06 10:20:06:014 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,221:39]
2023-09-06 10:20:06:023 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,221:75].[@-1,41:44='text',<0>,221:78]
2023-09-06 10:20:06:024 action-translator LogManager.java:25 qattr [@-1,48:57='expression',<0>,221:85].[@-1,59:59='p',<0>,221:96]
2023-09-06 10:20:06:028 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,221:100].[@-1,66:69='line',<0>,221:103]
2023-09-06 10:20:06:030 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,221:110].[@-1,76:78='pos',<0>,221:113]
2023-09-06 10:20:06:032 action-translator LogManager.java:25 translate $instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )
2023-09-06 10:20:06:033 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,226:40]
2023-09-06 10:20:06:034 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,226:69].[@-1,33:36='text',<0>,226:72]
2023-09-06 10:20:06:034 action-translator LogManager.java:25 qattr [@-1,40:42='val',<0>,226:79].[@-1,44:44='p',<0>,226:83]
2023-09-06 10:20:06:038 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,226:87].[@-1,51:54='line',<0>,226:90]
2023-09-06 10:20:06:038 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,226:97].[@-1,61:63='pos',<0>,226:100]
2023-09-06 10:20:06:041 action-translator LogManager.java:25 translate  $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) 
2023-09-06 10:20:06:041 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,227:66]
2023-09-06 10:20:06:041 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,227:97].[@-1,36:39='text',<0>,227:100]
2023-09-06 10:20:06:041 action-translator LogManager.java:25 qattr [@-1,43:46='val1',<0>,227:107].[@-1,48:48='p',<0>,227:112]
2023-09-06 10:20:06:042 action-translator LogManager.java:25 qattr [@-1,52:55='val2',<0>,227:116].[@-1,57:57='p',<0>,227:121]
2023-09-06 10:20:06:042 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,227:125].[@-1,64:67='line',<0>,227:128]
2023-09-06 10:20:06:042 action-translator LogManager.java:25 qattr [@-1,71:72='ID',<0>,227:135].[@-1,74:76='pos',<0>,227:138]
2023-09-06 10:20:06:044 action-translator LogManager.java:25 translate  $str = instructionExpre.NewStruct($ID.text, $lista_struct.l, $STRUCT.line, $STRUCT.pos) 
2023-09-06 10:20:06:044 action-translator LogManager.java:25 attr [@-1,2:4='str',<0>,230:45]
2023-09-06 10:20:06:044 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,230:79].[@-1,39:42='text',<0>,230:82]
2023-09-06 10:20:06:044 action-translator LogManager.java:25 qattr [@-1,46:57='lista_struct',<0>,230:89].[@-1,59:59='l',<0>,230:102]
2023-09-06 10:20:06:044 action-translator LogManager.java:25 qattr [@-1,63:68='STRUCT',<0>,230:106].[@-1,70:73='line',<0>,230:113]
2023-09-06 10:20:06:044 action-translator LogManager.java:25 qattr [@-1,77:82='STRUCT',<0>,230:120].[@-1,84:86='pos',<0>,230:127]
2023-09-06 10:20:06:111 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:117 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-06 10:20:06:117 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,3:59].[@-1,64:67='text',<0>,3:62]
2023-09-06 10:20:06:128 action-translator LogManager.java:25 qattr [@-1,71:79='tipos_var',<0>,3:69].[@-1,81:84='tipo',<0>,3:79]
2023-09-06 10:20:06:147 action-translator LogManager.java:25 setAttr [@-1,113:113='l',<0>,4:21] [@-1,116:131=' arrayList.New()',<0>,4:24]
2023-09-06 10:20:06:147 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-06 10:20:06:148 action-translator LogManager.java:25 attr [@-1,156:156='l',<0>,5:21]
2023-09-06 10:20:06:148 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-06 10:20:06:149 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,8:59].[@-1,64:67='text',<0>,8:62]
2023-09-06 10:20:06:151 action-translator LogManager.java:25 qattr [@-1,88:93='idstru',<0>,8:86].[@-1,95:98='text',<0>,8:93]
2023-09-06 10:20:06:151 action-translator LogManager.java:25 setAttr [@-1,123:123='l',<0>,9:21] [@-1,126:141=' arrayList.New()',<0>,9:24]
2023-09-06 10:20:06:163 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-06 10:20:06:165 action-translator LogManager.java:25 attr [@-1,166:166='l',<0>,10:21]
2023-09-06 10:20:06:165 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-06 10:20:06:165 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,13:59].[@-1,64:67='text',<0>,13:62]
2023-09-06 10:20:06:165 action-translator LogManager.java:25 qattr [@-1,71:79='tipos_var',<0>,13:69].[@-1,81:84='tipo',<0>,13:79]
2023-09-06 10:20:06:166 action-translator LogManager.java:25 setAttr [@-1,113:113='l',<0>,14:21] [@-1,116:131=' arrayList.New()',<0>,14:24]
2023-09-06 10:20:06:167 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-06 10:20:06:167 action-translator LogManager.java:25 attr [@-1,156:156='l',<0>,15:21]
2023-09-06 10:20:06:175 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-06 10:20:06:176 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,18:59].[@-1,64:67='text',<0>,18:62]
2023-09-06 10:20:06:176 action-translator LogManager.java:25 qattr [@-1,88:93='idstru',<0>,18:86].[@-1,95:98='text',<0>,18:93]
2023-09-06 10:20:06:177 action-translator LogManager.java:25 setAttr [@-1,123:123='l',<0>,19:21] [@-1,126:141=' arrayList.New()',<0>,19:24]
2023-09-06 10:20:06:177 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-06 10:20:06:177 action-translator LogManager.java:25 attr [@-1,166:166='l',<0>,20:21]
2023-09-06 10:20:06:178 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-09-06 10:20:06:181 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-06 10:20:06:181 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,25:89].[@-1,94:97='text',<0>,25:92]
2023-09-06 10:20:06:181 action-translator LogManager.java:25 qattr [@-1,101:109='tipos_var',<0>,25:99].[@-1,111:114='tipo',<0>,25:109]
2023-09-06 10:20:06:183 action-translator LogManager.java:25 qattr [@-1,173:176='list',<0>,26:51].[@-1,178:178='l',<0>,26:56]
2023-09-06 10:20:06:183 action-translator LogManager.java:25 setAttr [@-1,248:248='l',<0>,27:51] [@-1,251:258=' $list.l',<0>,27:54]
2023-09-06 10:20:06:183 action-translator LogManager.java:25 translate  $list.l
2023-09-06 10:20:06:183 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,24:149].[@-1,7:7='l',<0>,24:154]
2023-09-06 10:20:06:184 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-09-06 10:20:06:184 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-06 10:20:06:191 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,30:89].[@-1,94:97='text',<0>,30:92]
2023-09-06 10:20:06:191 action-translator LogManager.java:25 qattr [@-1,118:123='idstru',<0>,30:116].[@-1,125:128='text',<0>,30:123]
2023-09-06 10:20:06:192 action-translator LogManager.java:25 qattr [@-1,183:186='list',<0>,31:51].[@-1,188:188='l',<0>,31:56]
2023-09-06 10:20:06:192 action-translator LogManager.java:25 setAttr [@-1,258:258='l',<0>,32:51] [@-1,261:268=' $list.l',<0>,32:54]
2023-09-06 10:20:06:192 action-translator LogManager.java:25 translate  $list.l
2023-09-06 10:20:06:194 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,29:158].[@-1,7:7='l',<0>,29:163]
2023-09-06 10:20:06:196 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-09-06 10:20:06:196 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-06 10:20:06:196 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,35:89].[@-1,94:97='text',<0>,35:92]
2023-09-06 10:20:06:197 action-translator LogManager.java:25 qattr [@-1,101:109='tipos_var',<0>,35:99].[@-1,111:114='tipo',<0>,35:109]
2023-09-06 10:20:06:197 action-translator LogManager.java:25 qattr [@-1,173:176='list',<0>,36:51].[@-1,178:178='l',<0>,36:56]
2023-09-06 10:20:06:197 action-translator LogManager.java:25 setAttr [@-1,248:248='l',<0>,37:51] [@-1,251:258=' $list.l',<0>,37:54]
2023-09-06 10:20:06:197 action-translator LogManager.java:25 translate  $list.l
2023-09-06 10:20:06:197 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,34:159].[@-1,7:7='l',<0>,34:164]
2023-09-06 10:20:06:197 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-09-06 10:20:06:197 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-06 10:20:06:197 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,40:89].[@-1,94:97='text',<0>,40:92]
2023-09-06 10:20:06:198 action-translator LogManager.java:25 qattr [@-1,118:123='idstru',<0>,40:116].[@-1,125:128='text',<0>,40:123]
2023-09-06 10:20:06:201 action-translator LogManager.java:25 qattr [@-1,183:186='list',<0>,41:51].[@-1,188:188='l',<0>,41:56]
2023-09-06 10:20:06:206 action-translator LogManager.java:25 setAttr [@-1,258:258='l',<0>,42:51] [@-1,261:268=' $list.l',<0>,42:54]
2023-09-06 10:20:06:206 action-translator LogManager.java:25 translate  $list.l
2023-09-06 10:20:06:209 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,39:158].[@-1,7:7='l',<0>,39:163]
2023-09-06 10:20:06:211 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-09-06 10:20:06:211 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-09-06 10:20:06:211 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-09-06 10:20:06:211 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-09-06 10:20:06:214 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    
2023-09-06 10:20:06:214 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,282:25]
2023-09-06 10:20:06:214 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,282:67].[@-1,72:75='text',<0>,282:70]
2023-09-06 10:20:06:215 action-translator LogManager.java:25 qattr [@-1,96:97='ID',<0>,282:94].[@-1,99:102='line',<0>,282:97]
2023-09-06 10:20:06:215 action-translator LogManager.java:25 qattr [@-1,106:107='ID',<0>,282:104].[@-1,109:111='pos',<0>,282:107]
2023-09-06 10:20:06:215 action-translator LogManager.java:25 attr [@-1,141:141='p',<0>,283:25]
2023-09-06 10:20:06:215 action-translator LogManager.java:25 qattr [@-1,179:180='ID',<0>,283:63].[@-1,182:185='text',<0>,283:66]
2023-09-06 10:20:06:215 action-translator LogManager.java:25 qattr [@-1,206:207='ID',<0>,283:90].[@-1,209:212='line',<0>,283:93]
2023-09-06 10:20:06:215 action-translator LogManager.java:25 qattr [@-1,216:217='ID',<0>,283:100].[@-1,219:221='pos',<0>,283:103]
2023-09-06 10:20:06:217 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    
2023-09-06 10:20:06:217 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,286:25]
2023-09-06 10:20:06:217 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,286:67].[@-1,72:75='text',<0>,286:70]
2023-09-06 10:20:06:231 action-translator LogManager.java:25 qattr [@-1,79:92='listParamsCall',<0>,286:77].[@-1,94:96='l_e',<0>,286:92]
2023-09-06 10:20:06:231 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,286:98].[@-1,103:106='line',<0>,286:101]
2023-09-06 10:20:06:232 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,286:108].[@-1,113:115='pos',<0>,286:111]
2023-09-06 10:20:06:232 action-translator LogManager.java:25 attr [@-1,145:145='p',<0>,287:25]
2023-09-06 10:20:06:232 action-translator LogManager.java:25 qattr [@-1,183:184='ID',<0>,287:63].[@-1,186:189='text',<0>,287:66]
2023-09-06 10:20:06:232 action-translator LogManager.java:25 qattr [@-1,193:206='listParamsCall',<0>,287:73].[@-1,208:210='l_e',<0>,287:88]
2023-09-06 10:20:06:232 action-translator LogManager.java:25 qattr [@-1,214:215='ID',<0>,287:94].[@-1,217:220='line',<0>,287:97]
2023-09-06 10:20:06:232 action-translator LogManager.java:25 qattr [@-1,224:225='ID',<0>,287:104].[@-1,227:229='pos',<0>,287:107]
2023-09-06 10:20:06:242 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )
2023-09-06 10:20:06:244 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,313:30]
2023-09-06 10:20:06:246 action-translator LogManager.java:25 qattr [@-1,43:48='RETURN',<0>,313:71].[@-1,50:53='line',<0>,313:78]
2023-09-06 10:20:06:247 action-translator LogManager.java:25 qattr [@-1,57:62='RETURN',<0>,313:85].[@-1,64:66='pos',<0>,313:92]
2023-09-06 10:20:06:247 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )
2023-09-06 10:20:06:248 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,314:30]
2023-09-06 10:20:06:248 action-translator LogManager.java:25 qattr [@-1,38:47='expression',<0>,314:66].[@-1,49:49='p',<0>,314:77]
2023-09-06 10:20:06:248 action-translator LogManager.java:25 qattr [@-1,53:58='RETURN',<0>,314:81].[@-1,60:63='line',<0>,314:88]
2023-09-06 10:20:06:248 action-translator LogManager.java:25 qattr [@-1,67:72='RETURN',<0>,314:95].[@-1,74:76='pos',<0>,314:102]
2023-09-06 10:20:06:249 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )
2023-09-06 10:20:06:250 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,318:42]
2023-09-06 10:20:06:250 action-translator LogManager.java:25 qattr [@-1,34:43='listParams',<0>,318:75].[@-1,45:47='l_e',<0>,318:86]
2023-09-06 10:20:06:250 action-translator LogManager.java:25 qattr [@-1,51:59='PRINT_CON',<0>,318:92].[@-1,61:64='line',<0>,318:102]
2023-09-06 10:20:06:348 action-translator LogManager.java:25 translate  
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos ) 
                    
2023-09-06 10:20:06:349 action-translator LogManager.java:25 attr [@-1,28:30='lop',<0>,324:25]
2023-09-06 10:20:06:349 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,324:57].[@-1,72:72='l',<0>,324:69]
2023-09-06 10:20:06:349 action-translator LogManager.java:25 qattr [@-1,76:80='WHILE',<0>,324:73].[@-1,82:85='line',<0>,324:79]
2023-09-06 10:20:06:350 action-translator LogManager.java:25 qattr [@-1,89:93='WHILE',<0>,324:86].[@-1,95:97='pos',<0>,324:92]
2023-09-06 10:20:06:350 action-translator LogManager.java:25 attr [@-1,127:127='p',<0>,325:25]
2023-09-06 10:20:06:351 action-translator LogManager.java:25 qattr [@-1,157:167='bloque_inst',<0>,325:55].[@-1,169:169='l',<0>,325:67]
2023-09-06 10:20:06:354 action-translator LogManager.java:25 qattr [@-1,173:177='WHILE',<0>,325:71].[@-1,179:182='line',<0>,325:77]
2023-09-06 10:20:06:355 action-translator LogManager.java:25 qattr [@-1,186:190='WHILE',<0>,325:84].[@-1,192:194='pos',<0>,325:90]
2023-09-06 10:20:06:361 action-translator LogManager.java:25 translate  $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) 
2023-09-06 10:20:06:362 action-translator LogManager.java:25 attr [@-1,2:4='lwh',<0>,330:33]
2023-09-06 10:20:06:362 action-translator LogManager.java:25 qattr [@-1,30:39='expression',<0>,330:61].[@-1,41:41='p',<0>,330:72]
2023-09-06 10:20:06:362 action-translator LogManager.java:25 qattr [@-1,45:55='bloque_inst',<0>,330:76].[@-1,57:57='l',<0>,330:88]
2023-09-06 10:20:06:363 action-translator LogManager.java:25 qattr [@-1,61:65='WHILE',<0>,330:92].[@-1,67:70='line',<0>,330:98]
2023-09-06 10:20:06:363 action-translator LogManager.java:25 qattr [@-1,74:78='WHILE',<0>,330:105].[@-1,80:82='pos',<0>,330:111]
2023-09-06 10:20:06:366 action-translator LogManager.java:25 translate  $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) 
2023-09-06 10:20:06:366 action-translator LogManager.java:25 attr [@-1,2:5='lfor',<0>,335:37]
2023-09-06 10:20:06:366 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,335:66].[@-1,34:37='text',<0>,335:69]
2023-09-06 10:20:06:366 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,335:76].[@-1,52:52='p',<0>,335:87]
2023-09-06 10:20:06:366 action-translator LogManager.java:25 qattr [@-1,56:66='bloque_inst',<0>,335:91].[@-1,68:68='l',<0>,335:103]
2023-09-06 10:20:06:366 action-translator LogManager.java:25 qattr [@-1,72:74='FOR',<0>,335:107].[@-1,76:79='line',<0>,335:111]
2023-09-06 10:20:06:367 action-translator LogManager.java:25 qattr [@-1,83:85='FOR',<0>,335:118].[@-1,87:89='pos',<0>,335:122]
2023-09-06 10:20:06:368 action-translator LogManager.java:25 translate  $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) 
2023-09-06 10:20:06:368 action-translator LogManager.java:25 attr [@-1,2:3='br',<0>,340:10]
2023-09-06 10:20:06:369 action-translator LogManager.java:25 qattr [@-1,39:43='BREAK',<0>,340:47].[@-1,45:48='line',<0>,340:53]
2023-09-06 10:20:06:369 action-translator LogManager.java:25 qattr [@-1,52:56='BREAK',<0>,340:60].[@-1,58:60='pos',<0>,340:66]
2023-09-06 10:20:06:369 action-translator LogManager.java:25 translate  $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) 
2023-09-06 10:20:06:369 action-translator LogManager.java:25 attr [@-1,2:3='br',<0>,341:21]
2023-09-06 10:20:06:369 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,341:53].[@-1,45:45='p',<0>,341:64]
2023-09-06 10:20:06:370 action-translator LogManager.java:25 qattr [@-1,49:53='BREAK',<0>,341:68].[@-1,55:58='line',<0>,341:74]
2023-09-06 10:20:06:371 action-translator LogManager.java:25 qattr [@-1,62:66='BREAK',<0>,341:81].[@-1,68:70='pos',<0>,341:87]
2023-09-06 10:20:06:376 action-translator LogManager.java:25 translate  $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-09-06 10:20:06:377 action-translator LogManager.java:25 attr [@-1,2:3='cn',<0>,345:13]
2023-09-06 10:20:06:377 action-translator LogManager.java:25 qattr [@-1,37:44='CONTINUE',<0>,345:48].[@-1,46:49='line',<0>,345:57]
2023-09-06 10:20:06:378 action-translator LogManager.java:25 qattr [@-1,53:60='CONTINUE',<0>,345:64].[@-1,62:64='pos',<0>,345:73]
2023-09-06 10:20:06:379 action-translator LogManager.java:25 translate 
    $l_e = arrayList.New()

2023-09-06 10:20:06:379 action-translator LogManager.java:25 attr [@-1,7:9='l_e',<0>,350:5]
2023-09-06 10:20:06:379 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:380 action-translator LogManager.java:25 translate $l_e.Add($expression.p)
2023-09-06 10:20:06:380 action-translator LogManager.java:25 attr [@-1,1:3='l_e',<0>,2:42]
2023-09-06 10:20:06:380 action-translator LogManager.java:25 qattr [@-1,10:19='expression',<0>,2:51].[@-1,21:21='p',<0>,2:62]
2023-09-06 10:20:06:380 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:381 action-translator LogManager.java:25 translate 
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          
2023-09-06 10:20:06:381 action-translator LogManager.java:25 qattr [@-1,49:52='list',<0>,6:47].[@-1,54:56='l_e',<0>,6:52]
2023-09-06 10:20:06:381 action-translator LogManager.java:25 qattr [@-1,63:72='expression',<0>,6:61].[@-1,74:74='p',<0>,6:72]
2023-09-06 10:20:06:382 action-translator LogManager.java:25 attr [@-1,125:127='l_e',<0>,7:47]
2023-09-06 10:20:06:382 action-translator LogManager.java:25 qattr [@-1,132:135='list',<0>,7:54].[@-1,137:139='l_e',<0>,7:59]
2023-09-06 10:20:06:383 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:510 action-translator LogManager.java:25 translate 
    $l_e = arrayList.New()

2023-09-06 10:20:06:510 action-translator LogManager.java:25 attr [@-1,7:9='l_e',<0>,362:5]
2023-09-06 10:20:06:511 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:511 action-translator LogManager.java:25 translate    ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    
2023-09-06 10:20:06:511 action-translator LogManager.java:25 qattr [@-1,43:52='expression',<0>,2:118].[@-1,54:54='p',<0>,2:129]
2023-09-06 10:20:06:511 action-translator LogManager.java:25 qattr [@-1,58:70='es_referencia',<0>,2:133].[@-1,72:74='ref',<0>,2:147]
2023-09-06 10:20:06:511 action-translator LogManager.java:25 attr [@-1,103:105='l_e',<0>,3:25]
2023-09-06 10:20:06:511 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:512 action-translator LogManager.java:25 translate 
                                              ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          
2023-09-06 10:20:06:512 action-translator LogManager.java:25 qattr [@-1,88:97='expression',<0>,8:86].[@-1,99:99='p',<0>,8:97]
2023-09-06 10:20:06:512 action-translator LogManager.java:25 qattr [@-1,103:115='es_referencia',<0>,8:101].[@-1,117:119='ref',<0>,8:115]
2023-09-06 10:20:06:512 action-translator LogManager.java:25 qattr [@-1,170:173='list',<0>,9:47].[@-1,175:177='l_e',<0>,9:52]
2023-09-06 10:20:06:512 action-translator LogManager.java:25 attr [@-1,236:238='l_e',<0>,10:47]
2023-09-06 10:20:06:512 action-translator LogManager.java:25 qattr [@-1,243:246='list',<0>,10:54].[@-1,248:250='l_e',<0>,10:59]
2023-09-06 10:20:06:512 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:515 action-translator LogManager.java:25 translate  $ref = true 
2023-09-06 10:20:06:515 action-translator LogManager.java:25 attr [@-1,2:4='ref',<0>,375:11]
2023-09-06 10:20:06:515 action-translator LogManager.java:25 translate  $ref = false 
2023-09-06 10:20:06:515 action-translator LogManager.java:25 attr [@-1,2:4='ref',<0>,376:7]
2023-09-06 10:20:06:519 action-translator LogManager.java:25 translate  
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      
2023-09-06 10:20:06:520 action-translator LogManager.java:25 attr [@-1,28:32='instr',<0>,382:25]
2023-09-06 10:20:06:520 action-translator LogManager.java:25 qattr [@-1,64:65='id',<0>,382:61].[@-1,67:70='text',<0>,382:64]
2023-09-06 10:20:06:520 action-translator LogManager.java:25 qattr [@-1,74:82='tipos_var',<0>,382:71].[@-1,84:87='tipo',<0>,382:81]
2023-09-06 10:20:06:521 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,382:88].[@-1,102:102='p',<0>,382:99]
2023-09-06 10:20:06:521 action-translator LogManager.java:25 qattr [@-1,106:110='isVar',<0>,382:103].[@-1,112:114='mut',<0>,382:109]
2023-09-06 10:20:06:521 action-translator LogManager.java:25 qattr [@-1,118:121='asig',<0>,382:115].[@-1,123:126='line',<0>,382:120]
2023-09-06 10:20:06:521 action-translator LogManager.java:25 translate  
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    
2023-09-06 10:20:06:522 action-translator LogManager.java:25 attr [@-1,26:30='instr',<0>,385:23]
2023-09-06 10:20:06:522 action-translator LogManager.java:25 qattr [@-1,62:63='id',<0>,385:59].[@-1,65:68='text',<0>,385:62]
2023-09-06 10:20:06:522 action-translator LogManager.java:25 qattr [@-1,89:98='expression',<0>,385:86].[@-1,100:100='p',<0>,385:97]
2023-09-06 10:20:06:522 action-translator LogManager.java:25 qattr [@-1,104:108='isVar',<0>,385:101].[@-1,110:112='mut',<0>,385:107]
2023-09-06 10:20:06:522 action-translator LogManager.java:25 qattr [@-1,116:119='asig',<0>,385:113].[@-1,121:124='line',<0>,385:118]
2023-09-06 10:20:06:523 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos, nil, "")
                    
2023-09-06 10:20:06:523 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,394:25]
2023-09-06 10:20:06:523 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,394:67].[@-1,72:75='text',<0>,394:70]
2023-09-06 10:20:06:523 action-translator LogManager.java:25 qattr [@-1,79:90='vector_types',<0>,394:77].[@-1,92:95='tipo',<0>,394:90]
2023-09-06 10:20:06:524 action-translator LogManager.java:25 qattr [@-1,104:108='isVar',<0>,394:102].[@-1,110:112='mut',<0>,394:108]
2023-09-06 10:20:06:524 action-translator LogManager.java:25 qattr [@-1,116:117='id',<0>,394:114].[@-1,119:122='line',<0>,394:117]
2023-09-06 10:20:06:524 action-translator LogManager.java:25 qattr [@-1,126:127='id',<0>,394:124].[@-1,129:131='pos',<0>,394:127]
2023-09-06 10:20:06:524 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isVar.mut, $id.line, $id.pos, nil, $idob.text)
                    
2023-09-06 10:20:06:524 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,398:25]
2023-09-06 10:20:06:524 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,398:67].[@-1,72:75='text',<0>,398:70]
2023-09-06 10:20:06:524 action-translator LogManager.java:25 qattr [@-1,103:107='isVar',<0>,398:101].[@-1,109:111='mut',<0>,398:107]
2023-09-06 10:20:06:524 action-translator LogManager.java:25 qattr [@-1,115:116='id',<0>,398:113].[@-1,118:121='line',<0>,398:116]
2023-09-06 10:20:06:525 action-translator LogManager.java:25 qattr [@-1,125:126='id',<0>,398:123].[@-1,128:130='pos',<0>,398:126]
2023-09-06 10:20:06:525 action-translator LogManager.java:25 qattr [@-1,139:142='idob',<0>,398:137].[@-1,144:147='text',<0>,398:142]
2023-09-06 10:20:06:525 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isVar.mut, $id.line, $id.pos, $expression.p, $idob.text)
                    
2023-09-06 10:20:06:525 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,408:25]
2023-09-06 10:20:06:525 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,408:67].[@-1,72:75='text',<0>,408:70]
2023-09-06 10:20:06:525 action-translator LogManager.java:25 qattr [@-1,101:105='isVar',<0>,408:99].[@-1,107:109='mut',<0>,408:105]
2023-09-06 10:20:06:525 action-translator LogManager.java:25 qattr [@-1,113:114='id',<0>,408:111].[@-1,116:119='line',<0>,408:114]
2023-09-06 10:20:06:525 action-translator LogManager.java:25 qattr [@-1,123:124='id',<0>,408:121].[@-1,126:128='pos',<0>,408:124]
2023-09-06 10:20:06:525 action-translator LogManager.java:25 qattr [@-1,132:141='expression',<0>,408:130].[@-1,143:143='p',<0>,408:141]
2023-09-06 10:20:06:526 action-translator LogManager.java:25 qattr [@-1,147:150='idob',<0>,408:145].[@-1,152:155='text',<0>,408:150]
2023-09-06 10:20:06:527 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isVar.mut, $id.line, $id.pos, $expression.p, "")
                    
2023-09-06 10:20:06:528 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,411:25]
2023-09-06 10:20:06:528 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,411:67].[@-1,72:75='text',<0>,411:70]
2023-09-06 10:20:06:528 action-translator LogManager.java:25 qattr [@-1,79:87='tipos_var',<0>,411:77].[@-1,89:92='tipo',<0>,411:87]
2023-09-06 10:20:06:528 action-translator LogManager.java:25 qattr [@-1,101:105='isVar',<0>,411:99].[@-1,107:109='mut',<0>,411:105]
2023-09-06 10:20:06:529 action-translator LogManager.java:25 qattr [@-1,113:114='id',<0>,411:111].[@-1,116:119='line',<0>,411:114]
2023-09-06 10:20:06:529 action-translator LogManager.java:25 qattr [@-1,123:124='id',<0>,411:121].[@-1,126:128='pos',<0>,411:124]
2023-09-06 10:20:06:529 action-translator LogManager.java:25 qattr [@-1,132:141='expression',<0>,411:130].[@-1,143:143='p',<0>,411:141]
2023-09-06 10:20:06:531 action-translator LogManager.java:25 translate  $mut = true 
2023-09-06 10:20:06:531 action-translator LogManager.java:25 attr [@-1,2:4='mut',<0>,416:11]
2023-09-06 10:20:06:544 action-translator LogManager.java:25 translate  $mut = true 
2023-09-06 10:20:06:544 action-translator LogManager.java:25 attr [@-1,2:4='mut',<0>,420:11]
2023-09-06 10:20:06:545 action-translator LogManager.java:25 translate  $mut = false 
2023-09-06 10:20:06:545 action-translator LogManager.java:25 attr [@-1,2:4='mut',<0>,421:11]
2023-09-06 10:20:06:546 action-translator LogManager.java:25 translate  $tipo = interfaces.VECTOR 
2023-09-06 10:20:06:546 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,430:28]
2023-09-06 10:20:06:547 action-translator LogManager.java:25 translate  $tipo = $tipos_var.tipo 
2023-09-06 10:20:06:548 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,431:25]
2023-09-06 10:20:06:548 action-translator LogManager.java:25 qattr [@-1,10:18='tipos_var',<0>,431:33].[@-1,20:23='tipo',<0>,431:43]
2023-09-06 10:20:06:553 action-translator LogManager.java:25 translate 
    $ty = arrayList.New()

2023-09-06 10:20:06:554 action-translator LogManager.java:25 attr [@-1,7:8='ty',<0>,438:5]
2023-09-06 10:20:06:554 action-translator LogManager.java:25 translate 
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    
2023-09-06 10:20:06:555 action-translator LogManager.java:25 qattr [@-1,94:103='expression',<0>,441:92].[@-1,105:105='p',<0>,441:103]
2023-09-06 10:20:06:555 action-translator LogManager.java:25 qattr [@-1,109:114='CORIZQ',<0>,441:107].[@-1,116:119='line',<0>,441:114]
2023-09-06 10:20:06:556 action-translator LogManager.java:25 qattr [@-1,123:128='CORIZQ',<0>,441:121].[@-1,130:132='pos',<0>,441:128]
2023-09-06 10:20:06:556 action-translator LogManager.java:25 qattr [@-1,178:187='array_type',<0>,442:41].[@-1,189:190='ty',<0>,442:52]
2023-09-06 10:20:06:556 action-translator LogManager.java:25 attr [@-1,245:246='ty',<0>,443:41]
2023-09-06 10:20:06:557 action-translator LogManager.java:25 qattr [@-1,251:260='array_type',<0>,443:47].[@-1,262:263='ty',<0>,443:58]
2023-09-06 10:20:06:557 action-translator LogManager.java:25 translate 
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    
2023-09-06 10:20:06:557 action-translator LogManager.java:25 qattr [@-1,74:82='tipos_var',<0>,446:72].[@-1,84:87='tipo',<0>,446:82]
2023-09-06 10:20:06:558 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,446:89].[@-1,102:102='p',<0>,446:100]
2023-09-06 10:20:06:558 action-translator LogManager.java:25 qattr [@-1,106:111='CORIZQ',<0>,446:104].[@-1,113:116='line',<0>,446:111]
2023-09-06 10:20:06:558 action-translator LogManager.java:25 qattr [@-1,120:125='CORIZQ',<0>,446:118].[@-1,127:129='pos',<0>,446:125]
2023-09-06 10:20:06:558 action-translator LogManager.java:25 attr [@-1,173:174='ty',<0>,447:39]
2023-09-06 10:20:06:559 action-translator LogManager.java:25 translate 
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    
2023-09-06 10:20:06:559 action-translator LogManager.java:25 qattr [@-1,74:82='tipos_var',<0>,451:72].[@-1,84:87='tipo',<0>,451:82]
2023-09-06 10:20:06:559 action-translator LogManager.java:25 qattr [@-1,96:101='CORIZQ',<0>,451:94].[@-1,103:106='line',<0>,451:101]
2023-09-06 10:20:06:559 action-translator LogManager.java:25 qattr [@-1,110:115='CORIZQ',<0>,451:108].[@-1,117:119='pos',<0>,451:115]
2023-09-06 10:20:06:560 action-translator LogManager.java:25 attr [@-1,163:164='ty',<0>,452:39]
2023-09-06 10:20:06:562 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-06 10:20:06:562 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,457:28]
2023-09-06 10:20:06:562 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,457:63].[@-1,39:42='text',<0>,457:66]
2023-09-06 10:20:06:562 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,457:72].[@-1,56:56='p',<0>,457:83]
2023-09-06 10:20:06:562 action-translator LogManager.java:25 qattr [@-1,65:66='id',<0>,457:92].[@-1,68:71='line',<0>,457:95]
2023-09-06 10:20:06:563 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-06 10:20:06:563 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,459:39]
2023-09-06 10:20:06:563 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,459:74].[@-1,39:42='text',<0>,459:77]
2023-09-06 10:20:06:563 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,459:83].[@-1,56:56='p',<0>,459:94]
2023-09-06 10:20:06:563 action-translator LogManager.java:25 qattr [@-1,60:69='list_index',<0>,459:98].[@-1,71:75='lista',<0>,459:109]
2023-09-06 10:20:06:564 action-translator LogManager.java:25 qattr [@-1,79:80='id',<0>,459:117].[@-1,82:85='line',<0>,459:120]
2023-09-06 10:20:06:564 action-translator LogManager.java:25 translate  $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) 
2023-09-06 10:20:06:564 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,462:38]
2023-09-06 10:20:06:564 action-translator LogManager.java:25 qattr [@-1,43:56='l_AccessStruct',<0>,462:79].[@-1,58:58='l',<0>,462:94]
2023-09-06 10:20:06:565 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,462:98].[@-1,73:73='p',<0>,462:109]
2023-09-06 10:20:06:629 action-translator LogManager.java:25 qattr [@-1,77:90='l_AccessStruct',<0>,462:113].[@-1,92:96='start',<0>,462:128]
2023-09-06 10:20:06:632 action-translator LogManager.java:25 qattr [@-1,109:122='l_AccessStruct',<0>,462:145].[@-1,124:128='start',<0>,462:160]
2023-09-06 10:20:06:636 action-translator LogManager.java:25 translate $instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-06 10:20:06:636 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,466:76]
2023-09-06 10:20:06:637 action-translator LogManager.java:25 qattr [@-1,39:40='id',<0>,466:114].[@-1,42:45='text',<0>,466:117]
2023-09-06 10:20:06:638 action-translator LogManager.java:25 qattr [@-1,49:53='index',<0>,466:124].[@-1,55:55='p',<0>,466:130]
2023-09-06 10:20:06:639 action-translator LogManager.java:25 qattr [@-1,59:72='l_AccessStruct',<0>,466:134].[@-1,74:74='l',<0>,466:149]
2023-09-06 10:20:06:640 action-translator LogManager.java:25 qattr [@-1,78:80='val',<0>,466:153].[@-1,82:82='p',<0>,466:157]
2023-09-06 10:20:06:641 action-translator LogManager.java:25 qattr [@-1,86:87='id',<0>,466:161].[@-1,89:92='line',<0>,466:164]
2023-09-06 10:20:06:641 action-translator LogManager.java:25 translate $instr = instruction.NewIncrement($id.text,$expression.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn())
2023-09-06 10:20:06:641 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,472:29]
2023-09-06 10:20:06:641 action-translator LogManager.java:25 qattr [@-1,35:36='id',<0>,472:63].[@-1,38:41='text',<0>,472:66]
2023-09-06 10:20:06:642 action-translator LogManager.java:25 qattr [@-1,44:53='expression',<0>,472:72].[@-1,55:55='p',<0>,472:83]
2023-09-06 10:20:06:642 action-translator LogManager.java:25 qattr [@-1,59:60='id',<0>,472:87].[@-1,62:65='line',<0>,472:90]
2023-09-06 10:20:06:643 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:643 action-translator LogManager.java:25 translate 
            $l = arrayList.New()
            $l.Add($ID.text)

2023-09-06 10:20:06:643 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-06 10:20:06:643 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-06 10:20:06:643 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,4:20].[@-1,59:62='text',<0>,4:23]
2023-09-06 10:20:06:643 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:644 action-translator LogManager.java:25 translate 
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            
2023-09-06 10:20:06:644 action-translator LogManager.java:25 qattr [@-1,48:51='list',<0>,9:46].[@-1,53:53='l',<0>,9:51]
2023-09-06 10:20:06:644 action-translator LogManager.java:25 qattr [@-1,60:61='ID',<0>,9:58].[@-1,63:66='text',<0>,9:61]
2023-09-06 10:20:06:644 action-translator LogManager.java:25 attr [@-1,116:116='l',<0>,10:46]
2023-09-06 10:20:06:644 action-translator LogManager.java:25 qattr [@-1,121:124='list',<0>,10:51].[@-1,126:126='l',<0>,10:56]
2023-09-06 10:20:06:644 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:645 action-translator LogManager.java:25 translate 
    $lista = arrayList.New()

2023-09-06 10:20:06:645 action-translator LogManager.java:25 attr [@-1,7:11='lista',<0>,490:5]
2023-09-06 10:20:06:645 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:645 action-translator LogManager.java:25 translate $lista.Add($index_array.index)
2023-09-06 10:20:06:645 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,2:44]
2023-09-06 10:20:06:646 action-translator LogManager.java:25 qattr [@-1,12:22='index_array',<0>,2:55].[@-1,24:28='index',<0>,2:67]
2023-09-06 10:20:06:646 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:646 action-translator LogManager.java:25 translate 
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            
2023-09-06 10:20:06:646 action-translator LogManager.java:25 qattr [@-1,51:55='listi',<0>,6:49].[@-1,57:61='lista',<0>,6:55]
2023-09-06 10:20:06:646 action-translator LogManager.java:25 qattr [@-1,68:78='index_array',<0>,6:66].[@-1,80:84='index',<0>,6:78]
2023-09-06 10:20:06:646 action-translator LogManager.java:25 attr [@-1,137:141='lista',<0>,7:49]
2023-09-06 10:20:06:647 action-translator LogManager.java:25 qattr [@-1,146:150='listi',<0>,7:58].[@-1,152:156='lista',<0>,7:64]
2023-09-06 10:20:06:647 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:648 action-translator LogManager.java:25 translate $index = $expression.p
2023-09-06 10:20:06:648 action-translator LogManager.java:25 attr [@-1,1:5='index',<0>,500:29]
2023-09-06 10:20:06:648 action-translator LogManager.java:25 qattr [@-1,10:19='expression',<0>,500:38].[@-1,21:21='p',<0>,500:49]
2023-09-06 10:20:06:649 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-06 10:20:06:649 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,505:34]
2023-09-06 10:20:06:649 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,505:61].[@-1,39:39='p',<0>,505:72]
2023-09-06 10:20:06:650 action-translator LogManager.java:25 qattr [@-1,43:53='bloque_inst',<0>,505:76].[@-1,55:55='l',<0>,505:88]
2023-09-06 10:20:06:650 action-translator LogManager.java:25 qattr [@-1,68:69='IF',<0>,505:101].[@-1,71:74='line',<0>,505:104]
2023-09-06 10:20:06:650 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-06 10:20:06:650 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,506:69]
2023-09-06 10:20:06:650 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,506:96].[@-1,39:39='p',<0>,506:107]
2023-09-06 10:20:06:650 action-translator LogManager.java:25 qattr [@-1,42:46='bprin',<0>,506:110].[@-1,48:48='l',<0>,506:116]
2023-09-06 10:20:06:651 action-translator LogManager.java:25 qattr [@-1,55:59='belse',<0>,506:123].[@-1,61:61='l',<0>,506:129]
2023-09-06 10:20:06:652 action-translator LogManager.java:25 qattr [@-1,65:66='IF',<0>,506:133].[@-1,68:71='line',<0>,506:136]
2023-09-06 10:20:06:654 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-06 10:20:06:657 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,507:53]
2023-09-06 10:20:06:657 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,507:80].[@-1,39:39='p',<0>,507:91]
2023-09-06 10:20:06:658 action-translator LogManager.java:25 qattr [@-1,42:46='bprin',<0>,507:94].[@-1,48:48='l',<0>,507:100]
2023-09-06 10:20:06:658 action-translator LogManager.java:25 qattr [@-1,51:61='list_elseif',<0>,507:103].[@-1,63:67='lista',<0>,507:115]
2023-09-06 10:20:06:658 action-translator LogManager.java:25 qattr [@-1,76:77='IF',<0>,507:128].[@-1,79:82='line',<0>,507:131]
2023-09-06 10:20:06:659 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-06 10:20:06:659 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,508:79]
2023-09-06 10:20:06:659 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,508:106].[@-1,39:39='p',<0>,508:117]
2023-09-06 10:20:06:660 action-translator LogManager.java:25 qattr [@-1,42:46='bprin',<0>,508:120].[@-1,48:48='l',<0>,508:126]
2023-09-06 10:20:06:660 action-translator LogManager.java:25 qattr [@-1,51:61='list_elseif',<0>,508:129].[@-1,63:67='lista',<0>,508:141]
2023-09-06 10:20:06:660 action-translator LogManager.java:25 qattr [@-1,71:75='belse',<0>,508:149].[@-1,77:77='l',<0>,508:155]
2023-09-06 10:20:06:661 action-translator LogManager.java:25 qattr [@-1,81:82='IF',<0>,508:159].[@-1,84:87='line',<0>,508:162]
2023-09-06 10:20:06:662 action-translator LogManager.java:25 translate $p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )
2023-09-06 10:20:06:662 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,513:69]
2023-09-06 10:20:06:663 action-translator LogManager.java:25 qattr [@-1,29:38='expression',<0>,513:97].[@-1,40:40='p',<0>,513:108]
2023-09-06 10:20:06:663 action-translator LogManager.java:25 qattr [@-1,59:60='IF',<0>,513:127].[@-1,62:65='line',<0>,513:130]
2023-09-06 10:20:06:663 action-translator LogManager.java:25 qattr [@-1,123:129='bprin_e',<0>,513:191].[@-1,131:131='p',<0>,513:199]
2023-09-06 10:20:06:663 action-translator LogManager.java:25 qattr [@-1,140:146='belse_e',<0>,513:208].[@-1,148:148='p',<0>,513:216]
2023-09-06 10:20:06:663 action-translator LogManager.java:25 translate 
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    
2023-09-06 10:20:06:664 action-translator LogManager.java:25 attr [@-1,11:11='p',<0>,515:9]
2023-09-06 10:20:06:664 action-translator LogManager.java:25 qattr [@-1,39:48='expression',<0>,515:37].[@-1,50:50='p',<0>,515:48]
2023-09-06 10:20:06:664 action-translator LogManager.java:25 qattr [@-1,67:68='IF',<0>,515:65].[@-1,70:73='line',<0>,515:68]
2023-09-06 10:20:06:664 action-translator LogManager.java:25 qattr [@-1,131:137='bprin_e',<0>,515:129].[@-1,139:139='p',<0>,515:137]
2023-09-06 10:20:06:664 action-translator LogManager.java:25 qattr [@-1,143:157='list_elseif_exp',<0>,515:141].[@-1,159:163='lista',<0>,515:157]
2023-09-06 10:20:06:664 action-translator LogManager.java:25 qattr [@-1,168:174='belse_e',<0>,515:166].[@-1,176:176='p',<0>,515:174]
2023-09-06 10:20:06:665 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2023-09-06 10:20:06:665 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,520:7]
2023-09-06 10:20:06:665 action-translator LogManager.java:25 translate 
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    
2023-09-06 10:20:06:665 action-translator LogManager.java:25 attr [@-1,149:153='lista',<0>,524:25]
2023-09-06 10:20:06:666 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2023-09-06 10:20:06:666 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,530:7]
2023-09-06 10:20:06:667 action-translator LogManager.java:25 translate 
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    
2023-09-06 10:20:06:668 action-translator LogManager.java:25 attr [@-1,153:157='lista',<0>,534:25]
2023-09-06 10:20:06:670 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )
2023-09-06 10:20:06:670 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,540:39]
2023-09-06 10:20:06:673 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,540:66].[@-1,39:39='p',<0>,540:77]
2023-09-06 10:20:06:675 action-translator LogManager.java:25 qattr [@-1,42:52='bloque_inst',<0>,540:80].[@-1,54:54='l',<0>,540:92]
2023-09-06 10:20:06:676 action-translator LogManager.java:25 qattr [@-1,66:69='ELSE',<0>,540:104].[@-1,71:74='line',<0>,540:109]
2023-09-06 10:20:06:687 action-translator LogManager.java:25 translate $p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )
2023-09-06 10:20:06:687 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,544:38]
2023-09-06 10:20:06:688 action-translator LogManager.java:25 qattr [@-1,29:38='expression',<0>,544:66].[@-1,40:40='p',<0>,544:77]
2023-09-06 10:20:06:689 action-translator LogManager.java:25 qattr [@-1,56:59='ELSE',<0>,544:93].[@-1,61:64='line',<0>,544:98]
2023-09-06 10:20:06:692 action-translator LogManager.java:25 qattr [@-1,129:138='bloque_exp',<0>,544:166].[@-1,140:140='p',<0>,544:177]
2023-09-06 10:20:06:720 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-06 10:20:06:721 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,551:25]
2023-09-06 10:20:06:721 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,551:60].[@-1,73:73='p',<0>,551:71]
2023-09-06 10:20:06:721 action-translator LogManager.java:25 qattr [@-1,77:82='brazos',<0>,551:75].[@-1,84:91='l_brazos',<0>,551:82]
2023-09-06 10:20:06:721 action-translator LogManager.java:25 qattr [@-1,105:110='SWITCH',<0>,551:103].[@-1,112:115='line',<0>,551:110]
2023-09-06 10:20:06:722 action-translator LogManager.java:25 translate 
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-06 10:20:06:722 action-translator LogManager.java:25 attr [@-1,29:33='instr',<0>,554:27]
2023-09-06 10:20:06:723 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,554:62].[@-1,75:75='p',<0>,554:73]
2023-09-06 10:20:06:723 action-translator LogManager.java:25 qattr [@-1,79:84='brazos',<0>,554:77].[@-1,86:93='l_brazos',<0>,554:84]
2023-09-06 10:20:06:723 action-translator LogManager.java:25 qattr [@-1,97:107='bloque_inst',<0>,554:95].[@-1,109:109='l',<0>,554:107]
2023-09-06 10:20:06:723 action-translator LogManager.java:25 qattr [@-1,118:123='SWITCH',<0>,554:116].[@-1,125:128='line',<0>,554:123]
2023-09-06 10:20:06:724 action-translator LogManager.java:25 translate 
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_dentro.instr,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-06 10:20:06:724 action-translator LogManager.java:25 attr [@-1,29:33='instr',<0>,557:27]
2023-09-06 10:20:06:724 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,557:62].[@-1,75:75='p',<0>,557:73]
2023-09-06 10:20:06:724 action-translator LogManager.java:25 qattr [@-1,79:84='brazos',<0>,557:77].[@-1,86:93='l_brazos',<0>,557:84]
2023-09-06 10:20:06:724 action-translator LogManager.java:25 qattr [@-1,103:120='instruccion_dentro',<0>,557:101].[@-1,122:126='instr',<0>,557:120]
2023-09-06 10:20:06:725 action-translator LogManager.java:25 qattr [@-1,131:136='SWITCH',<0>,557:129].[@-1,138:141='line',<0>,557:136]
2023-09-06 10:20:06:725 action-translator LogManager.java:25 translate 
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, true )
      
2023-09-06 10:20:06:725 action-translator LogManager.java:25 attr [@-1,27:27='p',<0>,562:25]
2023-09-06 10:20:06:725 action-translator LogManager.java:25 qattr [@-1,58:60='exp',<0>,562:56].[@-1,62:62='p',<0>,562:60]
2023-09-06 10:20:06:725 action-translator LogManager.java:25 qattr [@-1,66:74='brazosexp',<0>,562:64].[@-1,76:83='l_brazos',<0>,562:74]
2023-09-06 10:20:06:726 action-translator LogManager.java:25 qattr [@-1,97:102='SWITCH',<0>,562:95].[@-1,104:107='line',<0>,562:102]
2023-09-06 10:20:06:726 action-translator LogManager.java:25 translate 
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      
2023-09-06 10:20:06:726 action-translator LogManager.java:25 attr [@-1,27:27='p',<0>,565:25]
2023-09-06 10:20:06:726 action-translator LogManager.java:25 qattr [@-1,58:60='exp',<0>,565:56].[@-1,62:62='p',<0>,565:60]
2023-09-06 10:20:06:726 action-translator LogManager.java:25 qattr [@-1,66:74='brazosexp',<0>,565:64].[@-1,76:83='l_brazos',<0>,565:74]
2023-09-06 10:20:06:726 action-translator LogManager.java:25 qattr [@-1,99:104='SWITCH',<0>,565:97].[@-1,106:109='line',<0>,565:104]
2023-09-06 10:20:06:727 action-translator LogManager.java:25 qattr [@-1,170:173='exp_',<0>,565:168].[@-1,175:175='p',<0>,565:173]
2023-09-06 10:20:06:727 action-translator LogManager.java:25 translate 
    $l_brazos = arrayList.New()

2023-09-06 10:20:06:727 action-translator LogManager.java:25 attr [@-1,7:14='l_brazos',<0>,572:5]
2023-09-06 10:20:06:727 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:727 action-translator LogManager.java:25 translate $l_brazos.Add($matchbrazo.brazo)
2023-09-06 10:20:06:728 action-translator LogManager.java:25 attr [@-1,1:8='l_brazos',<0>,2:42]
2023-09-06 10:20:06:728 action-translator LogManager.java:25 qattr [@-1,15:24='matchbrazo',<0>,2:56].[@-1,26:30='brazo',<0>,2:67]
2023-09-06 10:20:06:728 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:728 action-translator LogManager.java:25 translate 
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          
2023-09-06 10:20:06:728 action-translator LogManager.java:25 qattr [@-1,49:53='listb',<0>,6:47].[@-1,55:62='l_brazos',<0>,6:53]
2023-09-06 10:20:06:729 action-translator LogManager.java:25 qattr [@-1,69:78='matchbrazo',<0>,6:67].[@-1,80:84='brazo',<0>,6:78]
2023-09-06 10:20:06:729 action-translator LogManager.java:25 attr [@-1,135:142='l_brazos',<0>,7:47]
2023-09-06 10:20:06:729 action-translator LogManager.java:25 qattr [@-1,147:151='listb',<0>,7:59].[@-1,153:160='l_brazos',<0>,7:65]
2023-09-06 10:20:06:733 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:733 action-translator LogManager.java:25 translate 
    $l_brazos = arrayList.New()

2023-09-06 10:20:06:734 action-translator LogManager.java:25 attr [@-1,7:14='l_brazos',<0>,583:5]
2023-09-06 10:20:06:734 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:737 action-translator LogManager.java:25 translate $l_brazos.Add($matchbrazo_exp.brazo)
2023-09-06 10:20:06:737 action-translator LogManager.java:25 attr [@-1,1:8='l_brazos',<0>,2:46]
2023-09-06 10:20:06:738 action-translator LogManager.java:25 qattr [@-1,15:28='matchbrazo_exp',<0>,2:60].[@-1,30:34='brazo',<0>,2:75]
2023-09-06 10:20:06:738 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:739 action-translator LogManager.java:25 translate 
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          
2023-09-06 10:20:06:739 action-translator LogManager.java:25 qattr [@-1,49:53='listb',<0>,6:47].[@-1,55:62='l_brazos',<0>,6:53]
2023-09-06 10:20:06:739 action-translator LogManager.java:25 qattr [@-1,69:82='matchbrazo_exp',<0>,6:67].[@-1,84:88='brazo',<0>,6:82]
2023-09-06 10:20:06:739 action-translator LogManager.java:25 attr [@-1,139:146='l_brazos',<0>,7:47]
2023-09-06 10:20:06:740 action-translator LogManager.java:25 qattr [@-1,151:155='listb',<0>,7:59].[@-1,157:164='l_brazos',<0>,7:65]
2023-09-06 10:20:06:740 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:743 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) 
2023-09-06 10:20:06:743 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,593:47]
2023-09-06 10:20:06:743 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,593:87].[@-1,56:60='lisop',<0>,593:101]
2023-09-06 10:20:06:743 action-translator LogManager.java:25 qattr [@-1,64:74='bloque_inst',<0>,593:109].[@-1,76:76='l',<0>,593:121]
2023-09-06 10:20:06:743 action-translator LogManager.java:25 qattr [@-1,85:86='th',<0>,593:130].[@-1,88:91='line',<0>,593:133]
2023-09-06 10:20:06:744 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_dentro.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) 
2023-09-06 10:20:06:744 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,594:54]
2023-09-06 10:20:06:744 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,594:94].[@-1,56:60='lisop',<0>,594:108]
2023-09-06 10:20:06:744 action-translator LogManager.java:25 qattr [@-1,70:87='instruccion_dentro',<0>,594:122].[@-1,89:93='instr',<0>,594:141]
2023-09-06 10:20:06:744 action-translator LogManager.java:25 qattr [@-1,97:98='th',<0>,594:149].[@-1,100:103='line',<0>,594:152]
2023-09-06 10:20:06:745 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) 
2023-09-06 10:20:06:745 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,601:41]
2023-09-06 10:20:06:745 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,601:81].[@-1,56:60='lisop',<0>,601:95]
2023-09-06 10:20:06:745 action-translator LogManager.java:25 qattr [@-1,75:76='th',<0>,601:114].[@-1,78:81='line',<0>,601:117]
2023-09-06 10:20:06:746 action-translator LogManager.java:25 qattr [@-1,140:149='expression',<0>,601:179].[@-1,151:151='p',<0>,601:190]
2023-09-06 10:20:06:747 action-translator LogManager.java:25 translate 
    $lisop = arrayList.New()

2023-09-06 10:20:06:747 action-translator LogManager.java:25 attr [@-1,7:11='lisop',<0>,607:5]
2023-09-06 10:20:06:747 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:747 action-translator LogManager.java:25 translate 
                    $lisop.Add( $primitivo.p )
                  
2023-09-06 10:20:06:748 action-translator LogManager.java:25 attr [@-1,23:27='lisop',<0>,3:21]
2023-09-06 10:20:06:748 action-translator LogManager.java:25 qattr [@-1,35:43='primitivo',<0>,3:33].[@-1,45:45='p',<0>,3:43]
2023-09-06 10:20:06:748 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:748 action-translator LogManager.java:25 translate 
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    
2023-09-06 10:20:06:748 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,8:55].[@-1,62:66='lisop',<0>,8:60]
2023-09-06 10:20:06:748 action-translator LogManager.java:25 qattr [@-1,74:82='primitivo',<0>,8:72].[@-1,84:84='p',<0>,8:82]
2023-09-06 10:20:06:751 action-translator LogManager.java:25 attr [@-1,144:148='lisop',<0>,9:55]
2023-09-06 10:20:06:755 action-translator LogManager.java:25 qattr [@-1,154:157='list',<0>,9:65].[@-1,159:163='lisop',<0>,9:70]
2023-09-06 10:20:06:756 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:757 action-translator LogManager.java:25 translate $l = $instrucciones.l 
2023-09-06 10:20:06:757 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,619:41]
2023-09-06 10:20:06:757 action-translator LogManager.java:25 qattr [@-1,6:18='instrucciones',<0>,619:46].[@-1,20:20='l',<0>,619:60]
2023-09-06 10:20:06:758 action-translator LogManager.java:25 translate $l = arrayList.New()
2023-09-06 10:20:06:758 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,620:27]
2023-09-06 10:20:06:759 action-translator LogManager.java:25 translate $l = $instrucciones.l 
2023-09-06 10:20:06:759 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,623:24]
2023-09-06 10:20:06:760 action-translator LogManager.java:25 qattr [@-1,6:18='instrucciones',<0>,623:29].[@-1,20:20='l',<0>,623:43]
2023-09-06 10:20:06:760 action-translator LogManager.java:25 translate $l = arrayList.New()
2023-09-06 10:20:06:760 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,624:9]
2023-09-06 10:20:06:761 action-translator LogManager.java:25 translate $p = $expression.p
2023-09-06 10:20:06:761 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,628:38]
2023-09-06 10:20:06:761 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,628:43].[@-1,17:17='p',<0>,628:54]
2023-09-06 10:20:06:764 action-translator LogManager.java:25 translate $tipo = interfaces.INTEGER
2023-09-06 10:20:06:764 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,634:26]
2023-09-06 10:20:06:795 action-translator LogManager.java:25 translate $tipo = interfaces.STRING
2023-09-06 10:20:06:795 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,635:27]
2023-09-06 10:20:06:795 action-translator LogManager.java:25 translate $tipo = interfaces.FLOAT
2023-09-06 10:20:06:796 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,636:25]
2023-09-06 10:20:06:796 action-translator LogManager.java:25 translate $tipo = interfaces.BOOLEAN
2023-09-06 10:20:06:796 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,637:25]
2023-09-06 10:20:06:796 action-translator LogManager.java:25 translate $tipo = interfaces.STR
2023-09-06 10:20:06:796 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,638:23]
2023-09-06 10:20:06:796 action-translator LogManager.java:25 translate $tipo = interfaces.STRUCT
2023-09-06 10:20:06:796 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,639:24]
2023-09-06 10:20:06:806 action-translator LogManager.java:25 translate $tipo = interfaces.CHAR
2023-09-06 10:20:06:806 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,640:24]
2023-09-06 10:20:06:812 action-translator LogManager.java:25 translate $tipo = interfaces.ARRAY
2023-09-06 10:20:06:812 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,642:25]
2023-09-06 10:20:06:812 action-translator LogManager.java:25 translate $tipo = interfaces.VECTOR
2023-09-06 10:20:06:813 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,643:26]
2023-09-06 10:20:06:817 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:826 action-translator LogManager.java:25 translate $p = $expr_arit.p
2023-09-06 10:20:06:827 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:44]
2023-09-06 10:20:06:827 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,2:49].[@-1,16:16='p',<0>,2:59]
2023-09-06 10:20:06:827 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2023-09-06 10:20:06:827 action-translator LogManager.java:25 translate  $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) 
2023-09-06 10:20:06:827 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:159]
2023-09-06 10:20:06:828 action-translator LogManager.java:25 qattr [@-1,27:31='e_ini',<0>,5:184].[@-1,33:33='p',<0>,5:190]
2023-09-06 10:20:06:828 action-translator LogManager.java:25 qattr [@-1,37:41='e_fin',<0>,5:194].[@-1,43:43='p',<0>,5:200]
2023-09-06 10:20:06:828 action-translator LogManager.java:25 qattr [@-1,47:51='e_ini',<0>,5:204].[@-1,53:57='start',<0>,5:210]
2023-09-06 10:20:06:828 action-translator LogManager.java:25 qattr [@-1,70:74='e_ini',<0>,5:227].[@-1,76:80='start',<0>,5:233]
2023-09-06 10:20:06:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2023-09-06 10:20:06:848 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:848 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-06 10:20:06:848 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:76]
2023-09-06 10:20:06:848 action-translator LogManager.java:25 qattr [@-1,29:31='opU',<0>,2:104].[@-1,33:33='p',<0>,2:108]
2023-09-06 10:20:06:856 action-translator LogManager.java:25 qattr [@-1,50:51='op',<0>,2:125].[@-1,53:56='line',<0>,2:128]
2023-09-06 10:20:06:862 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-06 10:20:06:862 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:73]
2023-09-06 10:20:06:865 action-translator LogManager.java:25 qattr [@-1,29:31='opU',<0>,3:101].[@-1,33:33='p',<0>,3:105]
2023-09-06 10:20:06:866 action-translator LogManager.java:25 qattr [@-1,50:51='op',<0>,3:122].[@-1,53:56='line',<0>,3:125]
2023-09-06 10:20:06:875 action-translator LogManager.java:25 translate  $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) 
2023-09-06 10:20:06:875 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:112]
2023-09-06 10:20:06:876 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,4:139].[@-1,34:34='p',<0>,4:144]
2023-09-06 10:20:06:895 action-translator LogManager.java:25 qattr [@-1,38:41='opIz',<0>,4:148].[@-1,43:47='start',<0>,4:153]
2023-09-06 10:20:06:895 action-translator LogManager.java:25 qattr [@-1,61:64='opIz',<0>,4:171].[@-1,66:70='start',<0>,4:176]
2023-09-06 10:20:06:896 action-translator LogManager.java:25 translate $p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )
2023-09-06 10:20:06:896 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,5:171]
2023-09-06 10:20:06:896 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,5:198].[@-1,31:34='text',<0>,5:201]
2023-09-06 10:20:06:896 action-translator LogManager.java:25 qattr [@-1,38:40='val',<0>,5:208].[@-1,42:42='p',<0>,5:212]
2023-09-06 10:20:06:896 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,5:216].[@-1,49:52='line',<0>,5:219]
2023-09-06 10:20:06:896 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,5:226].[@-1,59:61='pos',<0>,5:229]
2023-09-06 10:20:06:897 action-translator LogManager.java:25 translate $p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )
2023-09-06 10:20:06:897 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,6:74]
2023-09-06 10:20:06:897 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,6:101].[@-1,31:34='text',<0>,6:104]
2023-09-06 10:20:06:898 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,6:111].[@-1,41:44='line',<0>,6:114]
2023-09-06 10:20:06:898 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,6:121].[@-1,51:53='pos',<0>,6:124]
2023-09-06 10:20:06:899 action-translator LogManager.java:25 translate  $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-06 10:20:06:899 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:149]
2023-09-06 10:20:06:900 action-translator LogManager.java:25 qattr [@-1,32:34='exp',<0>,7:179].[@-1,36:36='p',<0>,7:183]
2023-09-06 10:20:06:900 action-translator LogManager.java:25 qattr [@-1,40:42='tam',<0>,7:187].[@-1,44:44='p',<0>,7:191]
2023-09-06 10:20:06:900 action-translator LogManager.java:25 qattr [@-1,51:56='CORIZQ',<0>,7:198].[@-1,58:61='line',<0>,7:205]
2023-09-06 10:20:06:900 action-translator LogManager.java:25 qattr [@-1,65:70='CORIZQ',<0>,7:212].[@-1,72:74='pos',<0>,7:219]
2023-09-06 10:20:06:900 action-translator LogManager.java:25 translate  $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-06 10:20:06:900 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,8:93]
2023-09-06 10:20:06:901 action-translator LogManager.java:25 qattr [@-1,27:30='live',<0>,8:118].[@-1,32:34='l_e',<0>,8:123]
2023-09-06 10:20:06:901 action-translator LogManager.java:25 qattr [@-1,51:56='CORIZQ',<0>,8:142].[@-1,58:61='line',<0>,8:149]
2023-09-06 10:20:06:904 action-translator LogManager.java:25 qattr [@-1,65:70='CORIZQ',<0>,8:156].[@-1,72:74='pos',<0>,8:163]
2023-09-06 10:20:06:907 action-translator LogManager.java:25 translate  $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) 
2023-09-06 10:20:06:907 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,9:109]
2023-09-06 10:20:06:908 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,9:146].[@-1,42:45='text',<0>,9:149]
2023-09-06 10:20:06:908 action-translator LogManager.java:25 qattr [@-1,49:59='l_StructExp',<0>,9:156].[@-1,61:61='l',<0>,9:168]
2023-09-06 10:20:06:908 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,9:172].[@-1,68:71='line',<0>,9:175]
2023-09-06 10:20:06:908 action-translator LogManager.java:25 qattr [@-1,75:76='ID',<0>,9:182].[@-1,78:80='pos',<0>,9:185]
2023-09-06 10:20:06:908 action-translator LogManager.java:25 translate $p = $primitivo.p
2023-09-06 10:20:06:908 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,10:38]
2023-09-06 10:20:06:909 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,10:43].[@-1,16:16='p',<0>,10:53]
2023-09-06 10:20:06:909 action-translator LogManager.java:25 translate $p = $expression.p
2023-09-06 10:20:06:909 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,11:87]
2023-09-06 10:20:06:909 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,11:92].[@-1,17:17='p',<0>,11:103]
2023-09-06 10:20:06:909 action-translator LogManager.java:25 translate $p = $casteo.p
2023-09-06 10:20:06:909 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,12:35]
2023-09-06 10:20:06:909 action-translator LogManager.java:25 qattr [@-1,6:11='casteo',<0>,12:40].[@-1,13:13='p',<0>,12:47]
2023-09-06 10:20:06:910 action-translator LogManager.java:25 translate $p = $if_exp.p
2023-09-06 10:20:06:910 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,13:35]
2023-09-06 10:20:06:910 action-translator LogManager.java:25 qattr [@-1,6:11='if_exp',<0>,13:40].[@-1,13:13='p',<0>,13:47]
2023-09-06 10:20:06:910 action-translator LogManager.java:25 translate $p = $switch_sent.p
2023-09-06 10:20:06:910 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,14:40]
2023-09-06 10:20:06:910 action-translator LogManager.java:25 qattr [@-1,6:16='switch_sent',<0>,14:45].[@-1,18:18='p',<0>,14:57]
2023-09-06 10:20:06:910 action-translator LogManager.java:25 translate  $p = $while_true.p 
2023-09-06 10:20:06:910 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,15:40]
2023-09-06 10:20:06:910 action-translator LogManager.java:25 qattr [@-1,7:16='while_true',<0>,15:45].[@-1,18:18='p',<0>,15:56]
2023-09-06 10:20:06:910 action-translator LogManager.java:25 translate $p = $callFunction.p
2023-09-06 10:20:06:911 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,16:41]
2023-09-06 10:20:06:911 action-translator LogManager.java:25 qattr [@-1,6:17='callFunction',<0>,16:46].[@-1,19:19='p',<0>,16:59]
2023-09-06 10:20:06:911 action-translator LogManager.java:25 translate  $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-06 10:20:06:911 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,17:147]
2023-09-06 10:20:06:911 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,17:179].[@-1,37:40='text',<0>,17:182]
2023-09-06 10:20:06:911 action-translator LogManager.java:25 qattr [@-1,44:53='expression',<0>,17:189].[@-1,55:55='p',<0>,17:200]
2023-09-06 10:20:06:911 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,17:204].[@-1,62:65='line',<0>,17:207]
2023-09-06 10:20:06:912 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,17:214].[@-1,72:74='pos',<0>,17:217]
2023-09-06 10:20:06:912 action-translator LogManager.java:25 translate  $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) 
2023-09-06 10:20:06:912 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,18:59]
2023-09-06 10:20:06:912 action-translator LogManager.java:25 qattr [@-1,30:38='primitivo',<0>,18:87].[@-1,40:40='p',<0>,18:97]
2023-09-06 10:20:06:912 action-translator LogManager.java:25 qattr [@-1,44:45='IN',<0>,18:101].[@-1,47:50='line',<0>,18:104]
2023-09-06 10:20:06:912 action-translator LogManager.java:25 qattr [@-1,54:55='IN',<0>,18:111].[@-1,57:59='pos',<0>,18:114]
2023-09-06 10:20:06:915 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-06 10:20:06:916 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-06 10:20:06:916 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,21:168]
2023-09-06 10:20:06:916 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,21:196].[@-1,34:34='p',<0>,21:201]
2023-09-06 10:20:06:916 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,21:204].[@-1,40:43='text',<0>,21:207]
2023-09-06 10:20:06:927 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,21:213].[@-1,51:51='p',<0>,21:218]
2023-09-06 10:20:06:927 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,21:228].[@-1,64:67='line',<0>,21:231]
2023-09-06 10:20:06:927 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-06 10:20:06:928 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-06 10:20:06:928 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,22:157]
2023-09-06 10:20:06:928 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,22:185].[@-1,34:34='p',<0>,22:190]
2023-09-06 10:20:06:928 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,22:193].[@-1,40:43='text',<0>,22:196]
2023-09-06 10:20:06:928 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,22:202].[@-1,51:51='p',<0>,22:207]
2023-09-06 10:20:06:928 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,22:217].[@-1,64:67='line',<0>,22:220]
2023-09-06 10:20:06:928 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-06 10:20:06:929 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-06 10:20:06:929 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,23:245]
2023-09-06 10:20:06:929 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,23:273].[@-1,34:34='p',<0>,23:278]
2023-09-06 10:20:06:929 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,23:281].[@-1,40:43='text',<0>,23:284]
2023-09-06 10:20:06:929 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,23:290].[@-1,51:51='p',<0>,23:295]
2023-09-06 10:20:06:929 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,23:305].[@-1,64:67='line',<0>,23:308]
2023-09-06 10:20:06:929 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-06 10:20:06:929 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-06 10:20:06:930 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,24:135]
2023-09-06 10:20:06:932 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,24:163].[@-1,34:34='p',<0>,24:168]
2023-09-06 10:20:06:932 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,24:171].[@-1,40:43='text',<0>,24:174]
2023-09-06 10:20:06:932 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,24:180].[@-1,51:51='p',<0>,24:185]
2023-09-06 10:20:06:932 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,24:195].[@-1,64:67='line',<0>,24:198]
2023-09-06 10:20:06:932 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-06 10:20:06:933 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-06 10:20:06:933 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,25:135]
2023-09-06 10:20:06:933 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,25:163].[@-1,34:34='p',<0>,25:168]
2023-09-06 10:20:06:933 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,25:171].[@-1,40:43='text',<0>,25:174]
2023-09-06 10:20:06:934 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,25:180].[@-1,51:51='p',<0>,25:185]
2023-09-06 10:20:06:934 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,25:195].[@-1,64:67='line',<0>,25:198]
2023-09-06 10:20:06:934 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-06 10:20:06:937 action-translator LogManager.java:25 translate $p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )
2023-09-06 10:20:06:938 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,26:113]
2023-09-06 10:20:06:938 action-translator LogManager.java:25 qattr [@-1,23:26='opIz',<0>,26:135].[@-1,28:28='p',<0>,26:140]
2023-09-06 10:20:06:942 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,26:144].[@-1,37:41='start',<0>,26:149]
2023-09-06 10:20:06:942 action-translator LogManager.java:25 qattr [@-1,55:58='opIz',<0>,26:167].[@-1,60:64='start',<0>,26:172]
2023-09-06 10:20:06:943 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-06 10:20:06:943 action-translator LogManager.java:25 translate  $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) 
2023-09-06 10:20:06:943 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,27:116]
2023-09-06 10:20:06:943 action-translator LogManager.java:25 qattr [@-1,26:29='opIz',<0>,27:140].[@-1,31:31='p',<0>,27:145]
2023-09-06 10:20:06:943 action-translator LogManager.java:25 qattr [@-1,35:38='opIz',<0>,27:149].[@-1,40:44='start',<0>,27:154]
2023-09-06 10:20:06:944 action-translator LogManager.java:25 qattr [@-1,58:61='opIz',<0>,27:172].[@-1,63:67='start',<0>,27:177]
2023-09-06 10:20:06:944 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-06 10:20:06:944 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-06 10:20:06:944 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-06 10:20:06:944 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-06 10:20:06:944 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-06 10:20:06:945 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-06 10:20:06:945 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-06 10:20:06:946 action-translator LogManager.java:25 translate $p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )
2023-09-06 10:20:06:946 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,742:51]
2023-09-06 10:20:06:946 action-translator LogManager.java:25 qattr [@-1,26:35='expression',<0>,742:76].[@-1,37:37='p',<0>,742:87]
2023-09-06 10:20:06:946 action-translator LogManager.java:25 qattr [@-1,41:45='typec',<0>,742:91].[@-1,47:48='tc',<0>,742:97]
2023-09-06 10:20:06:946 action-translator LogManager.java:25 qattr [@-1,52:57='PARIZQ',<0>,742:102].[@-1,59:62='line',<0>,742:109]
2023-09-06 10:20:06:949 action-translator LogManager.java:25 translate $tc = interfaces.FLOAT
2023-09-06 10:20:06:949 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,746:13]
2023-09-06 10:20:06:949 action-translator LogManager.java:25 translate $tc = interfaces.INTEGER
2023-09-06 10:20:06:949 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,747:14]
2023-09-06 10:20:06:949 action-translator LogManager.java:25 translate $tc = interfaces.INTEGER
2023-09-06 10:20:06:949 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,748:11]
2023-09-06 10:20:06:953 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:954 action-translator LogManager.java:25 translate 
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                
2023-09-06 10:20:06:955 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,3:67].[@-1,72:75='text',<0>,3:70]
2023-09-06 10:20:06:955 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,3:77].[@-1,90:90='p',<0>,3:88]
2023-09-06 10:20:06:956 action-translator LogManager.java:25 setAttr [@-1,115:115='l',<0>,4:21] [@-1,118:133=' arrayList.New()',<0>,4:24]
2023-09-06 10:20:06:956 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-06 10:20:06:956 action-translator LogManager.java:25 attr [@-1,158:158='l',<0>,5:21]
2023-09-06 10:20:06:956 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:957 action-translator LogManager.java:25 translate 
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              
2023-09-06 10:20:06:958 action-translator LogManager.java:25 qattr [@-1,99:100='ID',<0>,10:97].[@-1,102:105='text',<0>,10:100]
2023-09-06 10:20:06:960 action-translator LogManager.java:25 qattr [@-1,109:118='expression',<0>,10:107].[@-1,120:120='p',<0>,10:118]
2023-09-06 10:20:06:960 action-translator LogManager.java:25 qattr [@-1,175:178='list',<0>,11:51].[@-1,180:180='l',<0>,11:56]
2023-09-06 10:20:06:961 action-translator LogManager.java:25 setAttr [@-1,247:247='l',<0>,12:51] [@-1,250:257=' $list.l',<0>,12:54]
2023-09-06 10:20:06:961 action-translator LogManager.java:25 translate  $list.l
2023-09-06 10:20:06:963 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,9:151].[@-1,7:7='l',<0>,9:156]
2023-09-06 10:20:06:966 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:967 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      
2023-09-06 10:20:06:970 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,766:38].[@-1,47:50='text',<0>,766:45]
2023-09-06 10:20:06:971 action-translator LogManager.java:25 attr [@-1,155:155='p',<0>,770:13]
2023-09-06 10:20:06:971 action-translator LogManager.java:25 qattr [@-1,207:212='NUMBER',<0>,770:65].[@-1,214:217='line',<0>,770:72]
2023-09-06 10:20:06:971 action-translator LogManager.java:25 translate 
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      
2023-09-06 10:20:06:972 action-translator LogManager.java:25 qattr [@-1,47:51='FLOAT',<0>,773:45].[@-1,53:56='text',<0>,773:51]
2023-09-06 10:20:06:972 action-translator LogManager.java:25 attr [@-1,160:160='p',<0>,777:15]
2023-09-06 10:20:06:972 action-translator LogManager.java:25 qattr [@-1,211:215='FLOAT',<0>,777:66].[@-1,217:220='line',<0>,777:72]
2023-09-06 10:20:06:972 action-translator LogManager.java:25 translate $p = $strings.p
2023-09-06 10:20:06:972 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,780:15]
2023-09-06 10:20:06:972 action-translator LogManager.java:25 qattr [@-1,6:12='strings',<0>,780:20].[@-1,14:14='p',<0>,780:28]
2023-09-06 10:20:06:973 action-translator LogManager.java:25 translate 
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                
2023-09-06 10:20:06:973 action-translator LogManager.java:25 qattr [@-1,26:29='CHAR',<0>,783:24].[@-1,31:34='text',<0>,783:29]
2023-09-06 10:20:06:973 action-translator LogManager.java:25 attr [@-1,54:54='p',<0>,784:17]
2023-09-06 10:20:06:973 action-translator LogManager.java:25 qattr [@-1,117:120='CHAR',<0>,784:80].[@-1,122:125='line',<0>,784:85]
2023-09-06 10:20:06:973 action-translator LogManager.java:25 qattr [@-1,129:132='CHAR',<0>,784:92].[@-1,134:136='pos',<0>,784:97]
2023-09-06 10:20:06:973 action-translator LogManager.java:25 translate  $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())
2023-09-06 10:20:06:974 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,789:14]
2023-09-06 10:20:06:974 action-translator LogManager.java:25 qattr [@-1,55:58='TRUE',<0>,789:67].[@-1,60:63='line',<0>,789:72]
2023-09-06 10:20:06:974 action-translator LogManager.java:25 translate  $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())
2023-09-06 10:20:06:974 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,790:14]
2023-09-06 10:20:06:974 action-translator LogManager.java:25 qattr [@-1,56:60='FALSE',<0>,790:68].[@-1,62:65='line',<0>,790:74]
2023-09-06 10:20:06:974 action-translator LogManager.java:25 translate  $p = $list.p
2023-09-06 10:20:06:975 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,791:25]
2023-09-06 10:20:06:975 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,791:30].[@-1,12:12='p',<0>,791:35]
2023-09-06 10:20:06:975 action-translator LogManager.java:25 translate 
2023-09-06 10:20:06:976 action-translator LogManager.java:25 translate  
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )
2023-09-06 10:20:06:976 action-translator LogManager.java:25 attr [@-1,10:10='p',<0>,3:7]
2023-09-06 10:20:06:976 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,3:39].[@-1,45:48='text',<0>,3:42]
2023-09-06 10:20:06:976 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,3:49].[@-1,55:58='line',<0>,3:52]
2023-09-06 10:20:06:976 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-06 10:20:06:976 action-translator LogManager.java:25 translate  $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-06 10:20:06:977 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:136]
2023-09-06 10:20:06:977 action-translator LogManager.java:25 qattr [@-1,32:35='list',<0>,6:166].[@-1,37:37='p',<0>,6:171]
2023-09-06 10:20:06:977 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,6:175].[@-1,52:52='p',<0>,6:186]
2023-09-06 10:20:06:977 action-translator LogManager.java:25 qattr [@-1,56:61='CORIZQ',<0>,6:190].[@-1,63:66='line',<0>,6:197]
2023-09-06 10:20:06:977 action-translator LogManager.java:25 qattr [@-1,70:75='CORIZQ',<0>,6:204].[@-1,77:79='pos',<0>,6:211]
2023-09-06 10:20:06:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:977 action-translator LogManager.java:25 translate  $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  
2023-09-06 10:20:06:978 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:111]
2023-09-06 10:20:06:978 action-translator LogManager.java:25 qattr [@-1,33:36='list',<0>,7:142].[@-1,38:38='p',<0>,7:147]
2023-09-06 10:20:06:978 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,7:151].[@-1,45:48='text',<0>,7:154]
2023-09-06 10:20:06:978 action-translator LogManager.java:25 qattr [@-1,52:55='list',<0>,7:161].[@-1,57:61='start',<0>,7:166]
2023-09-06 10:20:06:978 action-translator LogManager.java:25 qattr [@-1,75:78='list',<0>,7:184].[@-1,80:84='start',<0>,7:189]
2023-09-06 10:20:06:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-06 10:20:06:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-06 10:20:06:979 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-06 10:20:06:979 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,803:13].[@-1,23:26='text',<0>,803:20]
2023-09-06 10:20:06:982 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,803:32].[@-1,42:45='text',<0>,803:39]
2023-09-06 10:20:06:982 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,804:7]
2023-09-06 10:20:06:983 action-translator LogManager.java:25 qattr [@-1,107:112='STRING',<0>,804:55].[@-1,114:117='line',<0>,804:62]
2023-09-06 10:20:06:983 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-06 10:20:06:983 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,807:13].[@-1,23:26='text',<0>,807:20]
2023-09-06 10:20:06:984 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,807:32].[@-1,42:45='text',<0>,807:39]
2023-09-06 10:20:06:984 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,808:7]
2023-09-06 10:20:06:984 action-translator LogManager.java:25 qattr [@-1,110:115='STRING',<0>,808:58].[@-1,117:120='line',<0>,808:65]
2023-09-06 10:20:06:987 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-06 10:20:06:987 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,811:13].[@-1,23:26='text',<0>,811:20]
2023-09-06 10:20:06:987 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,811:32].[@-1,42:45='text',<0>,811:39]
2023-09-06 10:20:06:987 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,812:7]
2023-09-06 10:20:06:988 action-translator LogManager.java:25 qattr [@-1,107:112='STRING',<0>,812:55].[@-1,114:117='line',<0>,812:62]
2023-09-06 10:20:09:929 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




2023-09-06 10:20:09:929 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




2023-09-06 10:20:10:133 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




2023-09-06 10:20:10:134 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




