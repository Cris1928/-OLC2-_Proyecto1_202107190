2023-09-04 03:09:05:846 grammar LogManager.java:25 before: (PARSER_GRAMMAR swiftgrammar (OPTIONS (= tokenVocab swiftlexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"

    import "Servidor1/modules"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT list_globals {$lista = $list_globals.lista}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    }))) (RULE list_globals (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= lisfun list_globals) in_global {
                                          $lisfun.lista.Add( $in_global.globals)
                                          $lista =  $lisfun.lista
                                        }) (ALT in_global { $lista.Add( $in_global.globals ) }))) (RULE in_global (returns  interfaces.Instruction globals ) (BLOCK (ALT funcion {$globals = $funcion.instr}) (ALT module { $globals = $module.modu }) (ALT newStruct {$globals = $newStruct.str}))) (RULE module (returns  interfaces.Instruction modu ) (BLOCK (ALT MODULO ID LLAVEIZQ bodyModule_l LLAVEDER { 
        $modu = modules.NewModule( $ID.text, $bodyModule_l.mod_list, $MODULO.line, $MODULO.pos ) 
    }))) (RULE bodyModule_l (returns *arrayList.List mod_list) (BLOCK (ALT (= l_mod bodyModule_l) t_access module {
                                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                                            $l_mod.mod_list.Add(newmod)
                                            $mod_list = $l_mod.mod_list
                                        }) (ALT (= l_mod bodyModule_l) t_access itemMod {
                                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                                            $l_mod.mod_list.Add(newmod)
                                            $mod_list = $l_mod.mod_list
                                        }) (ALT t_access module {
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                            $mod_list.Add(newmod)
                        }) (ALT t_access itemMod {
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                            $mod_list.Add(newmod)
                        }))) (RULE t_access (returns interfaces.TipoAccess  modAccess) (BLOCK (ALT PUBLIC { $modAccess = interfaces.PUBLIC}) (ALT { $modAccess = interfaces.PRIVATE}))) (RULE itemMod (returns interfaces.Instruction instr) (BLOCK (ALT funcion {$instr = $funcion.instr}) (ALT newStruct {$instr = $newStruct.str}))) (RULE funcion (returns  interfaces.Instruction  instr) (@ init { listParams :=  arrayList.New() }) (BLOCK (ALT fn_main {$instr =  $fn_main.instr}) (ALT FN ID '(' ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' ')' '->' VECN '<' (= idob ID) '>' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )}) (ALT FN ID '(' ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )}) (ALT FN ID '(' ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN (= id ID) '(' params_declar ')' '->' VECN '<' (= idob ID) '>' bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VECTOR, $id.line, $id.pos, $idob.text  )}) (ALT FN (= id ID) '(' params_declar ')' '->' VECN '<' tipos_var '>' bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VECTOR, $id.line, $id.pos, ""  )}) (ALT FN (= id ID) '(' params_declar ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )}))) (RULE params_declar (returns *arrayList.List lista) (@ init {
$lista =  arrayList.New()
}) (BLOCK (ALT (= listdec params_declar) ',' declar_parametros {
                                                            $listdec.lista.Add($declar_parametros.in_dec)
                                                            $lista =  $listdec.lista }) (ALT declar_parametros {   $lista.Add($declar_parametros.in_dec) }))) (RULE declar_parametros (returns interfaces.Instruction in_dec) (BLOCK (ALT (= isMut is_mut) ID ':' tipos_var {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isMut.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT ID ':' AMP MUT array_type {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' is_ref VECN '<' (= idob ID) '>' {
                        //listaIdes := arrayList.New()
                        //listaIdes.Add(expresion.NewIdentificador($id.text, $id.line, $id.pos ))
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $is_ref.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }) (ALT (= id ID) ':' is_ref VECN '<' tipos_var '>' {
                        //listaIdes := arrayList.New()
                        //listaIdes.Add(expresion.NewIdentificador($id.text, $id.line, $id.pos ))
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $is_ref.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    }) (ALT (= id ID) ':' is_ref (= idstruct ID) { 
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $is_ref.ref, $id.line, $id.pos)
                            $in_dec = decl
                        }) (ALT (= isMut is_mut) (= id ID) ':' VECN '<' (= idob ID) '>' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isMut.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }))) (RULE fn_main (returns interfaces.Instruction instr) (@ init { listParams:= arrayList.New() }) (BLOCK (ALT bloque_princip '.' { $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )}))) (RULE bloque_princip (returns  *arrayList.List  l) (BLOCK (ALT instrucciones {$l = $instrucciones.l }) (ALT {$l = arrayList.New()}))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printconsola ';' {$instr = $printconsola.instr}) (ALT declaracion ';' {$instr = $declaracion.instr}) (ALT asignacion ';' {$instr = $asignacion.instr}) (ALT pushVec ';' {$instr = $pushVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT match_sent {$instr = $match_sent.instr}) (ALT loopB { $instr = $loopB.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak ';' { $instr = $lBreak.br }) (ALT lContinue ';' { $instr = $lContinue.cn }) (ALT newStruct {$instr = $newStruct.str}) (ALT callFunction ';' {$instr = $callFunction.instr}) (ALT returnFun ';' {$instr = $returnFun.instr}) (ALT callModulo ';' {$instr = $callModulo.instr}) (ALT ID '.' REMOVE '(' expression ')' ';' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE instruccion_only (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT pushVec {$instr = $pushVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT match_sent {$instr = $match_sent.instr}) (ALT loopB { $instr = $loopB.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT callModulo {$instr = $callModulo.instr}) (ALT ID '.' REMOVE '(' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE pushVec (returns interfaces.Instruction instr) (BLOCK (ALT ID '.' PUSH '(' (= val expression) ')' {$instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' INSERT '(' (= val1 expression) ',' (= val2 expression) ')' { $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) }))) (RULE newStruct (returns interfaces.Instruction str) (BLOCK (ALT STRUCT ID LLAVEIZQ listdecStruct LLAVEDER { $str = instructionExpre.NewStruct($ID.text, $listdecStruct.l, $STRUCT.line, $STRUCT.pos) }))) (RULE listdecStruct (returns *arrayList.List l) (BLOCK (ALT (= list listdecStruct) COMA (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list listdecStruct) COMA (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }))) (RULE callFunction (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT ID '(' ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    }) (ALT ID '(' listParamsCall ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    }))) (RULE callModulo (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT listModulec expression {
        $p = instructionExpre.NewModuleAccess($listModulec.lm, $expression.p, $listModulec.start.GetLine(),$listModulec.start.GetColumn() )
        $instr = instructionExpre.NewModuleAccess($listModulec.lm, $expression.p, $listModulec.start.GetLine(),$listModulec.start.GetColumn() )
    }))) (RULE listModulec (returns *arrayList.List lm) (@ init {  $lm = arrayList.New()   }) (BLOCK (ALT (= list listModulec) ID '::' {
                                $list.lm.Add($ID.text)
                                $lm = $list.lm
                            }) (ALT ID '::' {
                    $lm.Add($ID.text)
                }))) (RULE returnFun (returns interfaces.Instruction instr) (BLOCK (ALT RETURN { $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )}) (ALT RETURN expression { $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )}))) (RULE printconsola (returns interfaces.Instruction instr) (BLOCK (ALT PRINT_CON PARIZQ listParams PARDER {$instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )}))) (RULE loopB (returns interfaces.Instruction lop, interfaces.Expresion p) (BLOCK (ALT LOOP bloque_inst { 
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $LOOP.line, $LOOP.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $LOOP.line, $LOOP.pos ) 
                    }))) (RULE lWhile (returns interfaces.Instruction lwh) (BLOCK (ALT WHILE expression bloque_inst { $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) }))) (RULE lForin (returns interfaces.Instruction lfor) (BLOCK (ALT FOR ID IN expression bloque_inst { $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) }))) (RULE lBreak (returns interfaces.Instruction br) (BLOCK (ALT BREAK { $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) }) (ALT BREAK expression { $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) }))) (RULE lContinue (returns interfaces.Instruction cn) (BLOCK (ALT CONTINUE { $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE listParams (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParams) ',' expression {
                                    $list.l_e.Add($expression.p)
                                    $l_e = $list.l_e
                                }) (ALT expression {$l_e.Add($expression.p)}))) (RULE listParamsCall (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParamsCall) ',' is_ref expression {
                                    ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                                    $list.l_e.Add(ref)
                                    $l_e = $list.l_e
                                }) (ALT is_ref expression {   ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                        $l_e.Add(ref)
                    }))) (RULE is_ref (returns bool ref) (BLOCK (ALT AMP MUT { $ref = true }) (ALT { $ref = false }))) (RULE declaracion (returns interfaces.Instruction instr) (BLOCK (ALT LET (= isMut is_mut) (= id ID) ':' tipos_var (= asig '=') expression {
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      }) (ALT LET (= isMut is_mut) (= id ID) letid (= asig '=') expression { 
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' array_type (= asig '=') expression {
                      $instr = instruction.NewArrayDeclaration($id.text, $array_type.ty, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' vector_types '=' VECN '::' NEW {
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isMut.mut, $VECN.line, $VECN.pos, nil, "")
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' (= idob ID) '>' '=' VECN '::' NEW {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isMut.mut, $VECN.line, $VECN.pos, nil, $idob.text)
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' tipos_var '>' '=' VECN '::' CAPACITY '(' expression ')' {
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, $expression.p, $isMut.mut, $VECN.line, $VECN.pos, nil, "")
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' (= idob ID) '>' '=' VECN '::' CAPACITY '(' expression ')' {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, $expression.p, $isMut.mut, $VECN.line, $VECN.pos, nil, $idob.text)
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' (= idob ID) '>' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isMut.mut, $VECN.line, $VECN.pos, $expression.p, $idob.text)
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' tipos_var '>' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isMut.mut, $VECN.line, $VECN.pos, $expression.p, "")
                    }))) (RULE is_mut (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT EPSILON))) (RULE letid (returns ) (BLOCK (ALT ':' ID) (ALT EPSILON))) (RULE vector_types (returns interfaces.TipoExpresion tipo) (BLOCK (ALT VECN '<' vector_types '>' { $tipo = interfaces.VECTOR }) (ALT VECN '<' tipos_var '>' { $tipo = $tipos_var.tipo }))) (RULE array_type (returns *arrayList.List ty) (@ init {
    $ty = arrayList.New()
}) (BLOCK (ALT CORIZQ array_type ';' expression ']' {
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    }) (ALT CORIZQ tipos_var ';' expression ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }) (ALT CORIZQ tipos_var ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }))) (RULE asignacion (returns interfaces.Instruction instr) (BLOCK (ALT (= id ID) '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) list_index '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT l_AccessStruct '=' expression { $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) }) (ALT (= id ID) '[' (= index expression) ']' '.' l_AccessStruct '=' (= val expression) {$instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) '=' VECN '::' CAPACITY '(' expression ')' {
                        $instr = instruction.NewAssignmentVecap($id.text, $expression.p, $id.line, $id.pos)
                }))) (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list l_AccessStruct) '.' ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
            $l = arrayList.New()
            $l.Add($ID.text)
}))) (RULE list_index (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= listi list_index) index_array {
                                      $listi.lista.Add($index_array.index)
                                      $lista = $listi.lista
                                  }) (ALT index_array {$lista.Add($index_array.index)}))) (RULE index_array (returns interfaces.Expresion index) (BLOCK (ALT '[' expression ']' {$index = $expression.p}))) (RULE if_sent (returns interfaces.Instruction instr) (BLOCK (ALT IF expression bloque_inst {$instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif {
        $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
    }) (ALT IF expression (= bprin bloque_inst) list_elseif ELSE (= belse bloque_inst) {
        $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
    }))) (RULE if_exp (returns interfaces.Expresion p) (BLOCK (ALT IF expression (= bprin_e bloque_exp) ELSE (= belse_e bloque_exp) {$p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )}) (ALT IF expression (= bprin_e bloque_exp) list_elseif_exp ELSE (= belse_e bloque_exp) {
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    }))) (RULE list_elseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if)))) {
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    }))) (RULE list_elseif_exp (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if_exp)))) {
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT ELSE IF expression bloque_inst {$instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )}))) (RULE else_if_exp (returns interfaces.Expresion p) (BLOCK (ALT ELSE IF expression bloque_exp {$p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )}))) (RULE match_sent (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) LLAVEDER {
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') bloque_inst LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') instruccion_only LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_only.instr,  $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, true )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) DEFAULT (= th ':') (= exp_ expression) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      }))) (RULE match_brazos (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos) matchbrazo {
                                    $listb.l_brazos.Add($matchbrazo.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo {$l_brazos.Add($matchbrazo.brazo)}))) (RULE match_brazos_exp (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos_exp) matchbrazo_exp {
                                    $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo_exp {$l_brazos.Add($matchbrazo_exp.brazo)}))) (RULE matchbrazo (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT listaOpciones (= th '=>') bloque_inst (? (BLOCK (ALT ','))) { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }) (ALT listaOpciones (= th '=>') instruccion_only ',' { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_only.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }))) (RULE matchbrazo_exp (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT listaOpciones (= th '=>') expression ',' { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) }))) (RULE listaOpciones (returns *arrayList.List lisop) (@ init {
    $lisop = arrayList.New()
}) (BLOCK (ALT (= list listaOpciones) '|' primitivo {
                                            $list.lisop.Add( $primitivo.p )
                                            $lisop =  $list.lisop
                                          }) (ALT primitivo {
                    $lisop.Add( $primitivo.p )
                  }))) (RULE bloque_inst (returns  *arrayList.List  l) (BLOCK (ALT LLAVEIZQ instrucciones LLAVEDER {$l = $instrucciones.l }) (ALT LLAVEIZQ LLAVEDER {$l = arrayList.New()}))) (RULE bloque_exp (returns interfaces.Expresion p) (BLOCK (ALT LLAVEIZQ expression LLAVEDER {$p = $expression.p}))) (RULE tipos_var (returns interfaces.TipoExpresion tipo) (BLOCK (ALT T_NUMBER {$tipo = interfaces.INTEGER}) (ALT T_STRING {$tipo = interfaces.STRING}) (ALT T_FLOAT {$tipo = interfaces.FLOAT}) (ALT T_BOOL {$tipo = interfaces.BOOLEAN}) (ALT T_STR {$tipo = interfaces.STR}) (ALT STRUCT {$tipo = interfaces.STRUCT}) (ALT T_CHAT {$tipo = interfaces.CHAR}) (ALT T_ARRAY {$tipo = interfaces.ARRAY}) (ALT T_VECTOR {$tipo = interfaces.VECTOR}) (ALT USIZE { $tipo = interfaces.INTEGER }))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}) (ALT (= e_ini expression) '.' '.' (= e_fin expression) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }) (ALT (= exp expression) '.' ABS { $p = expresion.NewAbs($exp.p, $exp.start.GetLine(), $exp.start.GetColumn() ) }))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= op '-') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' LEN {$p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '!='))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op '!') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '&&') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '||') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' CLONE { $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT (= opIz expr_arit) TO_STRING { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT (= opIz expr_arit) TO_OWNED { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT ID '.' CONTAINS '(' '&' (= val expression) ')' {$p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' CAPF {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT VEC CORIZQ (= exp expression) ';' (= tam expression) CORDER { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT VEC CORIZQ (= live listParams) CORDER { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT CORIZQ (= exp expression) ';' (= tam expression) CORDER { $p = expresion.NewArray(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT CORIZQ listParams CORDER {    $p = expresion.NewArray($listParams.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ID LLAVEIZQ l_StructExp LLAVEDER { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}) (ALT casteo {$p = $casteo.p}) (ALT if_exp {$p = $if_exp.p}) (ALT match_sent {$p = $match_sent.p}) (ALT loopB { $p = $loopB.p }) (ALT callFunction {$p = $callFunction.p}) (ALT callModulo {$p = $callModulo.p}) (ALT ID '.' REMOVE '(' expression ')' { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE casteo (returns interfaces.Expresion p) (BLOCK (ALT PARIZQ expression AS (= typec tipo_cast) PARDER {$p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )}))) (RULE tipo_cast (returns interfaces.TipoExpresion tc) (BLOCK (ALT T_FLOAT {$tc = interfaces.FLOAT}) (ALT T_NUMBER {$tc = interfaces.INTEGER}) (ALT USIZE {$tc = interfaces.INTEGER}))) (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (= list l_StructExp) COMA ID ':' expression {
                                        Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                        $list.l.Add(Str_ep);
                                        $l = $list.l;
                                    }) (ALT ID ':' expression {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      }) (ALT FLOAT {
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      }) (ALT strings {$p = $strings.p}) (ALT CHAR {
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                }) (ALT TRUE { $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())}) (ALT FALSE { $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())}) (ALT (= list listIDArray) { $p = $list.p}))) (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listIDArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (= list listIDArray) '.' ID { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }) (ALT ID { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )}))) (RULE strings (returns interfaces.Expresion p) (BLOCK (ALT (+ (BLOCK (ALT AMP))) STRING (? (BLOCK (ALT TO_STRING) (ALT TO_OWNED))) { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT STRING (BLOCK (ALT TO_STRING) (ALT TO_OWNED)) { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())})))))
2023-09-04 03:09:05:909 grammar LogManager.java:25 after: (PARSER_GRAMMAR swiftgrammar (OPTIONS (= tokenVocab swiftlexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"

    import "Servidor1/modules"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT list_globals {$lista = $list_globals.lista}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    }))) (RULE list_globals (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= lisfun list_globals) in_global {
                                          $lisfun.lista.Add( $in_global.globals)
                                          $lista =  $lisfun.lista
                                        }) (ALT in_global { $lista.Add( $in_global.globals ) }))) (RULE in_global (returns  interfaces.Instruction globals ) (BLOCK (ALT funcion {$globals = $funcion.instr}) (ALT module { $globals = $module.modu }) (ALT newStruct {$globals = $newStruct.str}))) (RULE module (returns  interfaces.Instruction modu ) (BLOCK (ALT MODULO ID LLAVEIZQ bodyModule_l LLAVEDER { 
        $modu = modules.NewModule( $ID.text, $bodyModule_l.mod_list, $MODULO.line, $MODULO.pos ) 
    }))) (RULE bodyModule_l (returns *arrayList.List mod_list) (BLOCK (ALT (= l_mod bodyModule_l) t_access module {
                                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                                            $l_mod.mod_list.Add(newmod)
                                            $mod_list = $l_mod.mod_list
                                        }) (ALT (= l_mod bodyModule_l) t_access itemMod {
                                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                                            $l_mod.mod_list.Add(newmod)
                                            $mod_list = $l_mod.mod_list
                                        }) (ALT t_access module {
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                            $mod_list.Add(newmod)
                        }) (ALT t_access itemMod {
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                            $mod_list.Add(newmod)
                        }))) (RULE t_access (returns interfaces.TipoAccess  modAccess) (BLOCK (ALT PUBLIC { $modAccess = interfaces.PUBLIC}) (ALT { $modAccess = interfaces.PRIVATE}))) (RULE itemMod (returns interfaces.Instruction instr) (BLOCK (ALT funcion {$instr = $funcion.instr}) (ALT newStruct {$instr = $newStruct.str}))) (RULE funcion (returns  interfaces.Instruction  instr) (@ init { listParams :=  arrayList.New() }) (BLOCK (ALT fn_main {$instr =  $fn_main.instr}) (ALT FN ID '(' ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' ')' '->' VECN '<' (= idob ID) '>' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )}) (ALT FN ID '(' ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )}) (ALT FN ID '(' ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN (= id ID) '(' params_declar ')' '->' VECN '<' (= idob ID) '>' bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VECTOR, $id.line, $id.pos, $idob.text  )}) (ALT FN (= id ID) '(' params_declar ')' '->' VECN '<' tipos_var '>' bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VECTOR, $id.line, $id.pos, ""  )}) (ALT FN (= id ID) '(' params_declar ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )}))) (RULE params_declar (returns *arrayList.List lista) (@ init {
$lista =  arrayList.New()
}) (BLOCK (ALT (= listdec params_declar) ',' declar_parametros {
                                                            $listdec.lista.Add($declar_parametros.in_dec)
                                                            $lista =  $listdec.lista }) (ALT declar_parametros {   $lista.Add($declar_parametros.in_dec) }))) (RULE declar_parametros (returns interfaces.Instruction in_dec) (BLOCK (ALT (= isMut is_mut) ID ':' tipos_var {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isMut.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT ID ':' AMP MUT array_type {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' is_ref VECN '<' (= idob ID) '>' {
                        //listaIdes := arrayList.New()
                        //listaIdes.Add(expresion.NewIdentificador($id.text, $id.line, $id.pos ))
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $is_ref.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }) (ALT (= id ID) ':' is_ref VECN '<' tipos_var '>' {
                        //listaIdes := arrayList.New()
                        //listaIdes.Add(expresion.NewIdentificador($id.text, $id.line, $id.pos ))
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $is_ref.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    }) (ALT (= id ID) ':' is_ref (= idstruct ID) { 
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $is_ref.ref, $id.line, $id.pos)
                            $in_dec = decl
                        }) (ALT (= isMut is_mut) (= id ID) ':' VECN '<' (= idob ID) '>' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isMut.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }))) (RULE fn_main (returns interfaces.Instruction instr) (@ init { listParams:= arrayList.New() }) (BLOCK (ALT bloque_princip '.' { $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )}))) (RULE bloque_princip (returns  *arrayList.List  l) (BLOCK (ALT instrucciones {$l = $instrucciones.l }) (ALT {$l = arrayList.New()}))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printconsola ';' {$instr = $printconsola.instr}) (ALT declaracion ';' {$instr = $declaracion.instr}) (ALT asignacion ';' {$instr = $asignacion.instr}) (ALT pushVec ';' {$instr = $pushVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT match_sent {$instr = $match_sent.instr}) (ALT loopB { $instr = $loopB.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak ';' { $instr = $lBreak.br }) (ALT lContinue ';' { $instr = $lContinue.cn }) (ALT newStruct {$instr = $newStruct.str}) (ALT callFunction ';' {$instr = $callFunction.instr}) (ALT returnFun ';' {$instr = $returnFun.instr}) (ALT callModulo ';' {$instr = $callModulo.instr}) (ALT ID '.' REMOVE '(' expression ')' ';' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE instruccion_only (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT pushVec {$instr = $pushVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT match_sent {$instr = $match_sent.instr}) (ALT loopB { $instr = $loopB.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT callModulo {$instr = $callModulo.instr}) (ALT ID '.' REMOVE '(' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE pushVec (returns interfaces.Instruction instr) (BLOCK (ALT ID '.' PUSH '(' (= val expression) ')' {$instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' INSERT '(' (= val1 expression) ',' (= val2 expression) ')' { $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) }))) (RULE newStruct (returns interfaces.Instruction str) (BLOCK (ALT STRUCT ID LLAVEIZQ listdecStruct LLAVEDER { $str = instructionExpre.NewStruct($ID.text, $listdecStruct.l, $STRUCT.line, $STRUCT.pos) }))) (RULE listdecStruct (returns *arrayList.List l) (BLOCK (ALT (= list listdecStruct) COMA (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list listdecStruct) COMA (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }))) (RULE callFunction (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT ID '(' ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    }) (ALT ID '(' listParamsCall ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    }))) (RULE callModulo (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT listModulec expression {
        $p = instructionExpre.NewModuleAccess($listModulec.lm, $expression.p, $listModulec.start.GetLine(),$listModulec.start.GetColumn() )
        $instr = instructionExpre.NewModuleAccess($listModulec.lm, $expression.p, $listModulec.start.GetLine(),$listModulec.start.GetColumn() )
    }))) (RULE listModulec (returns *arrayList.List lm) (@ init {  $lm = arrayList.New()   }) (BLOCK (ALT (= list listModulec) ID '::' {
                                $list.lm.Add($ID.text)
                                $lm = $list.lm
                            }) (ALT ID '::' {
                    $lm.Add($ID.text)
                }))) (RULE returnFun (returns interfaces.Instruction instr) (BLOCK (ALT RETURN { $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )}) (ALT RETURN expression { $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )}))) (RULE printconsola (returns interfaces.Instruction instr) (BLOCK (ALT PRINT_CON PARIZQ listParams PARDER {$instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )}))) (RULE loopB (returns interfaces.Instruction lop, interfaces.Expresion p) (BLOCK (ALT LOOP bloque_inst { 
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $LOOP.line, $LOOP.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $LOOP.line, $LOOP.pos ) 
                    }))) (RULE lWhile (returns interfaces.Instruction lwh) (BLOCK (ALT WHILE expression bloque_inst { $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) }))) (RULE lForin (returns interfaces.Instruction lfor) (BLOCK (ALT FOR ID IN expression bloque_inst { $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) }))) (RULE lBreak (returns interfaces.Instruction br) (BLOCK (ALT BREAK { $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) }) (ALT BREAK expression { $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) }))) (RULE lContinue (returns interfaces.Instruction cn) (BLOCK (ALT CONTINUE { $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE listParams (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParams) ',' expression {
                                    $list.l_e.Add($expression.p)
                                    $l_e = $list.l_e
                                }) (ALT expression {$l_e.Add($expression.p)}))) (RULE listParamsCall (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParamsCall) ',' is_ref expression {
                                    ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                                    $list.l_e.Add(ref)
                                    $l_e = $list.l_e
                                }) (ALT is_ref expression {   ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                        $l_e.Add(ref)
                    }))) (RULE is_ref (returns bool ref) (BLOCK (ALT AMP MUT { $ref = true }) (ALT { $ref = false }))) (RULE declaracion (returns interfaces.Instruction instr) (BLOCK (ALT LET (= isMut is_mut) (= id ID) ':' tipos_var (= asig '=') expression {
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      }) (ALT LET (= isMut is_mut) (= id ID) letid (= asig '=') expression { 
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' array_type (= asig '=') expression {
                      $instr = instruction.NewArrayDeclaration($id.text, $array_type.ty, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' vector_types '=' VECN '::' NEW {
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isMut.mut, $VECN.line, $VECN.pos, nil, "")
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' (= idob ID) '>' '=' VECN '::' NEW {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isMut.mut, $VECN.line, $VECN.pos, nil, $idob.text)
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' tipos_var '>' '=' VECN '::' CAPACITY '(' expression ')' {
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, $expression.p, $isMut.mut, $VECN.line, $VECN.pos, nil, "")
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' (= idob ID) '>' '=' VECN '::' CAPACITY '(' expression ')' {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, $expression.p, $isMut.mut, $VECN.line, $VECN.pos, nil, $idob.text)
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' (= idob ID) '>' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isMut.mut, $VECN.line, $VECN.pos, $expression.p, $idob.text)
                    }) (ALT LET (= isMut is_mut) (= id ID) ':' VECN '<' tipos_var '>' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isMut.mut, $VECN.line, $VECN.pos, $expression.p, "")
                    }))) (RULE is_mut (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT EPSILON))) (RULE letid (returns ) (BLOCK (ALT ':' ID) (ALT EPSILON))) (RULE vector_types (returns interfaces.TipoExpresion tipo) (BLOCK (ALT VECN '<' vector_types '>' { $tipo = interfaces.VECTOR }) (ALT VECN '<' tipos_var '>' { $tipo = $tipos_var.tipo }))) (RULE array_type (returns *arrayList.List ty) (@ init {
    $ty = arrayList.New()
}) (BLOCK (ALT CORIZQ array_type ';' expression ']' {
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    }) (ALT CORIZQ tipos_var ';' expression ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }) (ALT CORIZQ tipos_var ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }))) (RULE asignacion (returns interfaces.Instruction instr) (BLOCK (ALT (= id ID) '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) list_index '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT l_AccessStruct '=' expression { $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) }) (ALT (= id ID) '[' (= index expression) ']' '.' l_AccessStruct '=' (= val expression) {$instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) '=' VECN '::' CAPACITY '(' expression ')' {
                        $instr = instruction.NewAssignmentVecap($id.text, $expression.p, $id.line, $id.pos)
                }))) (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list l_AccessStruct) '.' ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
            $l = arrayList.New()
            $l.Add($ID.text)
}))) (RULE list_index (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= listi list_index) index_array {
                                      $listi.lista.Add($index_array.index)
                                      $lista = $listi.lista
                                  }) (ALT index_array {$lista.Add($index_array.index)}))) (RULE index_array (returns interfaces.Expresion index) (BLOCK (ALT '[' expression ']' {$index = $expression.p}))) (RULE if_sent (returns interfaces.Instruction instr) (BLOCK (ALT IF expression bloque_inst {$instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif {
        $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
    }) (ALT IF expression (= bprin bloque_inst) list_elseif ELSE (= belse bloque_inst) {
        $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
    }))) (RULE if_exp (returns interfaces.Expresion p) (BLOCK (ALT IF expression (= bprin_e bloque_exp) ELSE (= belse_e bloque_exp) {$p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )}) (ALT IF expression (= bprin_e bloque_exp) list_elseif_exp ELSE (= belse_e bloque_exp) {
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    }))) (RULE list_elseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if)))) {
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    }))) (RULE list_elseif_exp (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if_exp)))) {
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT ELSE IF expression bloque_inst {$instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )}))) (RULE else_if_exp (returns interfaces.Expresion p) (BLOCK (ALT ELSE IF expression bloque_exp {$p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )}))) (RULE match_sent (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) LLAVEDER {
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') bloque_inst LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') instruccion_only LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_only.instr,  $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, true )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) DEFAULT (= th ':') (= exp_ expression) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      }))) (RULE match_brazos (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos) matchbrazo {
                                    $listb.l_brazos.Add($matchbrazo.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo {$l_brazos.Add($matchbrazo.brazo)}))) (RULE match_brazos_exp (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos_exp) matchbrazo_exp {
                                    $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo_exp {$l_brazos.Add($matchbrazo_exp.brazo)}))) (RULE matchbrazo (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT listaOpciones (= th '=>') bloque_inst (? (BLOCK (ALT ','))) { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }) (ALT listaOpciones (= th '=>') instruccion_only ',' { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_only.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }))) (RULE matchbrazo_exp (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT listaOpciones (= th '=>') expression ',' { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) }))) (RULE listaOpciones (returns *arrayList.List lisop) (@ init {
    $lisop = arrayList.New()
}) (BLOCK (ALT (= list listaOpciones) '|' primitivo {
                                            $list.lisop.Add( $primitivo.p )
                                            $lisop =  $list.lisop
                                          }) (ALT primitivo {
                    $lisop.Add( $primitivo.p )
                  }))) (RULE bloque_inst (returns  *arrayList.List  l) (BLOCK (ALT LLAVEIZQ instrucciones LLAVEDER {$l = $instrucciones.l }) (ALT LLAVEIZQ LLAVEDER {$l = arrayList.New()}))) (RULE bloque_exp (returns interfaces.Expresion p) (BLOCK (ALT LLAVEIZQ expression LLAVEDER {$p = $expression.p}))) (RULE tipos_var (returns interfaces.TipoExpresion tipo) (BLOCK (ALT T_NUMBER {$tipo = interfaces.INTEGER}) (ALT T_STRING {$tipo = interfaces.STRING}) (ALT T_FLOAT {$tipo = interfaces.FLOAT}) (ALT T_BOOL {$tipo = interfaces.BOOLEAN}) (ALT T_STR {$tipo = interfaces.STR}) (ALT STRUCT {$tipo = interfaces.STRUCT}) (ALT T_CHAT {$tipo = interfaces.CHAR}) (ALT T_ARRAY {$tipo = interfaces.ARRAY}) (ALT T_VECTOR {$tipo = interfaces.VECTOR}) (ALT USIZE { $tipo = interfaces.INTEGER }))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}) (ALT (= e_ini expression) '.' '.' (= e_fin expression) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }) (ALT (= exp expression) '.' ABS { $p = expresion.NewAbs($exp.p, $exp.start.GetLine(), $exp.start.GetColumn() ) }))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= op '-') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '*' '/' '%')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' LEN {$p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>' '>=' '==' '!=')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op '!') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '&&') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '||') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' CLONE { $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT (= opIz expr_arit) TO_STRING { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT (= opIz expr_arit) TO_OWNED { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT ID '.' CONTAINS '(' '&' (= val expression) ')' {$p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' CAPF {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT VEC CORIZQ (= exp expression) ';' (= tam expression) CORDER { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT VEC CORIZQ (= live listParams) CORDER { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT CORIZQ (= exp expression) ';' (= tam expression) CORDER { $p = expresion.NewArray(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT CORIZQ listParams CORDER {    $p = expresion.NewArray($listParams.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ID LLAVEIZQ l_StructExp LLAVEDER { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}) (ALT casteo {$p = $casteo.p}) (ALT if_exp {$p = $if_exp.p}) (ALT match_sent {$p = $match_sent.p}) (ALT loopB { $p = $loopB.p }) (ALT callFunction {$p = $callFunction.p}) (ALT callModulo {$p = $callModulo.p}) (ALT ID '.' REMOVE '(' expression ')' { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE casteo (returns interfaces.Expresion p) (BLOCK (ALT PARIZQ expression AS (= typec tipo_cast) PARDER {$p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )}))) (RULE tipo_cast (returns interfaces.TipoExpresion tc) (BLOCK (ALT T_FLOAT {$tc = interfaces.FLOAT}) (ALT T_NUMBER {$tc = interfaces.INTEGER}) (ALT USIZE {$tc = interfaces.INTEGER}))) (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (= list l_StructExp) COMA ID ':' expression {
                                        Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                        $list.l.Add(Str_ep);
                                        $l = $list.l;
                                    }) (ALT ID ':' expression {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      }) (ALT FLOAT {
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      }) (ALT strings {$p = $strings.p}) (ALT CHAR {
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                }) (ALT TRUE { $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())}) (ALT FALSE { $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())}) (ALT (= list listIDArray) { $p = $list.p}))) (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listIDArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (= list listIDArray) '.' ID { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }) (ALT ID { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )}))) (RULE strings (returns interfaces.Expresion p) (BLOCK (ALT (+ (BLOCK (ALT AMP))) STRING (? (BLOCK (ALT (SET TO_STRING TO_OWNED)))) { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT STRING (SET TO_STRING TO_OWNED) { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())})))))
2023-09-04 03:09:06:176 left-recursion LogManager.java:25 list_globals returns [*arrayList.List lista]
    :   ( {} in_global<tokenIndex=89>     { $lista.Add( $in_global.globals ) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> in_global<tokenIndex=83>  {
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  }
        )*
    ;
2023-09-04 03:09:06:176 grammar LogManager.java:25 added: (RULE list_globals (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (in_global (ELEMENT_OPTIONS (= tokenIndex 89))) { $lista.Add( $in_global.globals ) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (in_global (ELEMENT_OPTIONS (= tokenIndex 83))) {
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  }))))))
2023-09-04 03:09:06:176 left-recursion LogManager.java:25 bodyModule_l returns [*arrayList.List mod_list]
    :   ( {} t_access<tokenIndex=172> module<tokenIndex=174>   {
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                            $mod_list.Add(newmod)
                        } 
        | t_access<tokenIndex=180> itemMod<tokenIndex=182> {
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                            $mod_list.Add(newmod)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> t_access<tokenIndex=152> module<tokenIndex=154>    {
                                                      newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                                                      $l_mod.mod_list.Add(newmod)
                                                      $mod_list = $l_mod.mod_list
                                                  }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> t_access<tokenIndex=164> itemMod<tokenIndex=166>    {
                                                      newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                                                      $l_mod.mod_list.Add(newmod)
                                                      $mod_list = $l_mod.mod_list
                                                  }
        )*
    ;
2023-09-04 03:09:06:191 grammar LogManager.java:25 added: (RULE bodyModule_l (returns *arrayList.List mod_list) (BLOCK (ALT (BLOCK (ALT {} (t_access (ELEMENT_OPTIONS (= tokenIndex 172))) (module (ELEMENT_OPTIONS (= tokenIndex 174))) {
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                            $mod_list.Add(newmod)
                        }) (ALT (t_access (ELEMENT_OPTIONS (= tokenIndex 180))) (itemMod (ELEMENT_OPTIONS (= tokenIndex 182))) {
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                            $mod_list.Add(newmod)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (t_access (ELEMENT_OPTIONS (= tokenIndex 152))) (module (ELEMENT_OPTIONS (= tokenIndex 154))) {
                                                      newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                                                      $l_mod.mod_list.Add(newmod)
                                                      $mod_list = $l_mod.mod_list
                                                  }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (t_access (ELEMENT_OPTIONS (= tokenIndex 164))) (itemMod (ELEMENT_OPTIONS (= tokenIndex 166))) {
                                                      newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                                                      $l_mod.mod_list.Add(newmod)
                                                      $mod_list = $l_mod.mod_list
                                                  }))))))
2023-09-04 03:09:06:191 left-recursion LogManager.java:25 params_declar returns [*arrayList.List lista]
    :   ( {} declar_parametros<tokenIndex=467> {   $lista.Add($declar_parametros.in_dec) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=459>  declar_parametros<tokenIndex=461>    {
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista }
        )*
    ;
2023-09-04 03:09:06:207 grammar LogManager.java:25 added: (RULE params_declar (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (declar_parametros (ELEMENT_OPTIONS (= tokenIndex 467))) {   $lista.Add($declar_parametros.in_dec) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 459))) (declar_parametros (ELEMENT_OPTIONS (= tokenIndex 461))) {
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista }))))))
2023-09-04 03:09:06:207 left-recursion LogManager.java:25 listdecStruct returns [*arrayList.List l]
    :   ( {} id=ID<tokenIndex=1006> ':'<tokenIndex=1008> tipos_var<tokenIndex=1010> {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        | id=ID<tokenIndex=1018> ':'<tokenIndex=1020> idstru=ID<tokenIndex=1024> {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=970> id=ID<tokenIndex=974> ':'<tokenIndex=976> tipos_var<tokenIndex=978> {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=988> id=ID<tokenIndex=992> ':'<tokenIndex=994> idstru=ID<tokenIndex=998> {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
        )*
    ;
2023-09-04 03:09:06:207 grammar LogManager.java:25 added: (RULE listdecStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (= id (ID (ELEMENT_OPTIONS (= tokenIndex 1006)))) (':' (ELEMENT_OPTIONS (= tokenIndex 1008))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 1010))) {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (= id (ID (ELEMENT_OPTIONS (= tokenIndex 1018)))) (':' (ELEMENT_OPTIONS (= tokenIndex 1020))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 1024)))) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 970))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 974)))) (':' (ELEMENT_OPTIONS (= tokenIndex 976))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 978))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 988))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 992)))) (':' (ELEMENT_OPTIONS (= tokenIndex 994))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 998)))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }))))))
2023-09-04 03:09:06:207 left-recursion LogManager.java:25 listModulec returns [*arrayList.List lm]
    :   ( {} ID<tokenIndex=1106> '::'<tokenIndex=1108>   {
                    $lm.Add($ID.text)
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ID<tokenIndex=1098> '::'<tokenIndex=1100>    {
                                          $list.lm.Add($ID.text)
                                          $lm = $list.lm
                                      }
        )*
    ;
2023-09-04 03:09:06:207 grammar LogManager.java:25 added: (RULE listModulec (returns *arrayList.List lm) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1106))) ('::' (ELEMENT_OPTIONS (= tokenIndex 1108))) {
                    $lm.Add($ID.text)
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (ID (ELEMENT_OPTIONS (= tokenIndex 1098))) ('::' (ELEMENT_OPTIONS (= tokenIndex 1100))) {
                                          $list.lm.Add($ID.text)
                                          $lm = $list.lm
                                      }))))))
2023-09-04 03:09:06:207 left-recursion LogManager.java:25 listParams returns [*arrayList.List l_e]
    :   ( {} expression<tokenIndex=1272> {$l_e.Add($expression.p)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=1264> expression<tokenIndex=1266>   {
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          }
        )*
    ;
2023-09-04 03:09:06:222 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l_e) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 1272))) {$l_e.Add($expression.p)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 1264))) (expression (ELEMENT_OPTIONS (= tokenIndex 1266))) {
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          }))))))
2023-09-04 03:09:06:222 left-recursion LogManager.java:25 listParamsCall returns [*arrayList.List l_e]
    :   ( {} is_ref<tokenIndex=1306> expression<tokenIndex=1308>    {   ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                        $l_e.Add(ref)
                    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=1296> is_ref<tokenIndex=1298> expression<tokenIndex=1300>   {
                                              ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          }
        )*
    ;
2023-09-04 03:09:06:222 grammar LogManager.java:25 added: (RULE listParamsCall (returns *arrayList.List l_e) (BLOCK (ALT (BLOCK (ALT {} (is_ref (ELEMENT_OPTIONS (= tokenIndex 1306))) (expression (ELEMENT_OPTIONS (= tokenIndex 1308))) {   ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                        $l_e.Add(ref)
                    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 1296))) (is_ref (ELEMENT_OPTIONS (= tokenIndex 1298))) (expression (ELEMENT_OPTIONS (= tokenIndex 1300))) {
                                              ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          }))))))
2023-09-04 03:09:06:222 left-recursion LogManager.java:25 l_AccessStruct returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=1850> {
            $l = arrayList.New()
            $l.Add($ID.text)
} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> '.'<tokenIndex=1842> ID<tokenIndex=1844> {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }
        )*
    ;
2023-09-04 03:09:06:222 grammar LogManager.java:25 added: (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1850))) {
            $l = arrayList.New()
            $l.Add($ID.text)
})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) ('.' (ELEMENT_OPTIONS (= tokenIndex 1842))) (ID (ELEMENT_OPTIONS (= tokenIndex 1844))) {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }))))))
2023-09-04 03:09:06:222 left-recursion LogManager.java:25 list_index returns [*arrayList.List lista]
    :   ( {} index_array<tokenIndex=1879>  {$lista.Add($index_array.index)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> index_array<tokenIndex=1873> {
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            }
        )*
    ;
2023-09-04 03:09:06:222 grammar LogManager.java:25 added: (RULE list_index (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (index_array (ELEMENT_OPTIONS (= tokenIndex 1879))) {$lista.Add($index_array.index)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (index_array (ELEMENT_OPTIONS (= tokenIndex 1873))) {
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            }))))))
2023-09-04 03:09:06:238 left-recursion LogManager.java:25 match_brazos returns [*arrayList.List l_brazos]
    :   ( {} matchbrazo<tokenIndex=2286> {$l_brazos.Add($matchbrazo.brazo)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> matchbrazo<tokenIndex=2280>   {
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }
        )*
    ;
2023-09-04 03:09:06:238 grammar LogManager.java:25 added: (RULE match_brazos (returns *arrayList.List l_brazos) (BLOCK (ALT (BLOCK (ALT {} (matchbrazo (ELEMENT_OPTIONS (= tokenIndex 2286))) {$l_brazos.Add($matchbrazo.brazo)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (matchbrazo (ELEMENT_OPTIONS (= tokenIndex 2280))) {
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }))))))
2023-09-04 03:09:06:238 left-recursion LogManager.java:25 match_brazos_exp returns [*arrayList.List l_brazos]
    :   ( {} matchbrazo_exp<tokenIndex=2316> {$l_brazos.Add($matchbrazo_exp.brazo)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> matchbrazo_exp<tokenIndex=2310>   {
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }
        )*
    ;
2023-09-04 03:09:06:238 grammar LogManager.java:25 added: (RULE match_brazos_exp (returns *arrayList.List l_brazos) (BLOCK (ALT (BLOCK (ALT {} (matchbrazo_exp (ELEMENT_OPTIONS (= tokenIndex 2316))) {$l_brazos.Add($matchbrazo_exp.brazo)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (matchbrazo_exp (ELEMENT_OPTIONS (= tokenIndex 2310))) {
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }))))))
2023-09-04 03:09:06:238 left-recursion LogManager.java:25 listaOpciones returns [*arrayList.List lisop]
    :   ( {} primitivo<tokenIndex=2411>   {
                    $lisop.Add( $primitivo.p )
                  } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> '|'<tokenIndex=2403> primitivo<tokenIndex=2405>  {
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    }
        )*
    ;
2023-09-04 03:09:06:238 grammar LogManager.java:25 added: (RULE listaOpciones (returns *arrayList.List lisop) (BLOCK (ALT (BLOCK (ALT {} (primitivo (ELEMENT_OPTIONS (= tokenIndex 2411))) {
                    $lisop.Add( $primitivo.p )
                  })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) ('|' (ELEMENT_OPTIONS (= tokenIndex 2403))) (primitivo (ELEMENT_OPTIONS (= tokenIndex 2405))) {
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    }))))))
2023-09-04 03:09:06:238 left-recursion LogManager.java:25 expression returns [interfaces.Expresion p]
    :   ( {} expr_arit<tokenIndex=2539>    {$p = $expr_arit.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> '.'<tokenIndex=2553>'.'<tokenIndex=2554> e_fin=expression<tokenIndex=2558,p=3> { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }
                  | {p.Precpred(p.GetParserRuleContext(), 1)}?<p=1> '.'<tokenIndex=2570> ABS<tokenIndex=2572> { $p = expresion.NewAbs($exp.p, $exp.start.GetLine(), $exp.start.GetColumn() ) }
        )*
    ;
2023-09-04 03:09:06:254 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2539))) {$p = $expr_arit.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2553))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2554))) (= e_fin (expression (ELEMENT_OPTIONS (= tokenIndex 2558) (= p 3)))) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 1)}? (ELEMENT_OPTIONS (= p 1))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2570))) (ABS (ELEMENT_OPTIONS (= tokenIndex 2572))) { $p = expresion.NewAbs($exp.p, $exp.start.GetLine(), $exp.start.GetColumn() ) }))))))
2023-09-04 03:09:06:254 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} op='-'<tokenIndex=2593> opU = expr_arit<tokenIndex=2599,p=27> {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())} 
        | op='!'<tokenIndex=2713> opU = expr_arit<tokenIndex=2719,p=22> {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())} 
        | ID<tokenIndex=2799> '.'<tokenIndex=2801> CONTAINS<tokenIndex=2803> '('<tokenIndex=2805>'&'<tokenIndex=2806> val=expression<tokenIndex=2810>')'<tokenIndex=2811> {$p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )} 
        | ID<tokenIndex=2817> '.'<tokenIndex=2819> CAPF<tokenIndex=2821> {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )} 
        | VEC<tokenIndex=2829> CORIZQ<tokenIndex=2831> exp = expression<tokenIndex=2837> ';'<tokenIndex=2839> tam = expression<tokenIndex=2845> CORDER<tokenIndex=2847> { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) } 
        | VEC<tokenIndex=2853> CORIZQ<tokenIndex=2855> live=listParams<tokenIndex=2859> CORDER<tokenIndex=2861> { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) } 
        | CORIZQ<tokenIndex=2869> exp = expression<tokenIndex=2875> ';'<tokenIndex=2877> tam = expression<tokenIndex=2883> CORDER<tokenIndex=2885> { $p = expresion.NewArray(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) } 
        | CORIZQ<tokenIndex=2891> listParams<tokenIndex=2893> CORDER<tokenIndex=2895> {    $p = expresion.NewArray($listParams.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) } 
        | ID<tokenIndex=2903> LLAVEIZQ<tokenIndex=2905> l_StructExp<tokenIndex=2907> LLAVEDER<tokenIndex=2909> { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) } 
        | primitivo<tokenIndex=2915> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=2921> expression<tokenIndex=2923> PARDER<tokenIndex=2925> {$p = $expression.p} 
        | casteo<tokenIndex=2931> {$p = $casteo.p} 
        | if_exp<tokenIndex=2937> {$p = $if_exp.p} 
        | match_sent<tokenIndex=2943> {$p = $match_sent.p} 
        | loopB<tokenIndex=2951> { $p = $loopB.p } 
        | callFunction<tokenIndex=2957> {$p = $callFunction.p} 
        | callModulo<tokenIndex=2963> {$p = $callModulo.p} 
        | ID<tokenIndex=2969> '.'<tokenIndex=2971> REMOVE<tokenIndex=2973> '('<tokenIndex=2975> expression<tokenIndex=2977> ')'<tokenIndex=2979> { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 26)}?<p=26> op=('*'<tokenIndex=2620>|'/'<tokenIndex=2622>|'%'<tokenIndex=2624>) opDe = expr_arit<tokenIndex=2631,p=27> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> op=('+'<tokenIndex=2662>|'-'<tokenIndex=2664>) opDe = expr_arit<tokenIndex=2671,p=25> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=('<'<tokenIndex=2686>|'<='<tokenIndex=2688>|'>'<tokenIndex=2690>|'>='<tokenIndex=2692>|'=='<tokenIndex=2694>|'!='<tokenIndex=2696>) opDe = expr_arit<tokenIndex=2703,p=24> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op='&&'<tokenIndex=2735> opDe = expr_arit<tokenIndex=2741,p=22> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op='||'<tokenIndex=2755> opDe = expr_arit<tokenIndex=2761,p=21> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 25)}?<p=25> '.'<tokenIndex=2645> LEN<tokenIndex=2647> {$p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> '.'<tokenIndex=2771> CLONE<tokenIndex=2773> { $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> TO_STRING<tokenIndex=2783> { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> TO_OWNED<tokenIndex=2793> { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }
        )*
    ;
2023-09-04 03:09:06:285 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (= op ('-' (ELEMENT_OPTIONS (= tokenIndex 2593)))) (= opU (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2599) (= p 27)))) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op ('!' (ELEMENT_OPTIONS (= tokenIndex 2713)))) (= opU (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2719) (= p 22)))) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2799))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2801))) (CONTAINS (ELEMENT_OPTIONS (= tokenIndex 2803))) ('(' (ELEMENT_OPTIONS (= tokenIndex 2805))) ('&' (ELEMENT_OPTIONS (= tokenIndex 2806))) (= val (expression (ELEMENT_OPTIONS (= tokenIndex 2810)))) (')' (ELEMENT_OPTIONS (= tokenIndex 2811))) {$p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2817))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2819))) (CAPF (ELEMENT_OPTIONS (= tokenIndex 2821))) {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT (VEC (ELEMENT_OPTIONS (= tokenIndex 2829))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2831))) (= exp (expression (ELEMENT_OPTIONS (= tokenIndex 2837)))) (';' (ELEMENT_OPTIONS (= tokenIndex 2839))) (= tam (expression (ELEMENT_OPTIONS (= tokenIndex 2845)))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2847))) { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (VEC (ELEMENT_OPTIONS (= tokenIndex 2853))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2855))) (= live (listParams (ELEMENT_OPTIONS (= tokenIndex 2859)))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2861))) { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2869))) (= exp (expression (ELEMENT_OPTIONS (= tokenIndex 2875)))) (';' (ELEMENT_OPTIONS (= tokenIndex 2877))) (= tam (expression (ELEMENT_OPTIONS (= tokenIndex 2883)))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2885))) { $p = expresion.NewArray(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2891))) (listParams (ELEMENT_OPTIONS (= tokenIndex 2893))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2895))) {    $p = expresion.NewArray($listParams.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2903))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 2905))) (l_StructExp (ELEMENT_OPTIONS (= tokenIndex 2907))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 2909))) { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 2915))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2921))) (expression (ELEMENT_OPTIONS (= tokenIndex 2923))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2925))) {$p = $expression.p}) (ALT (casteo (ELEMENT_OPTIONS (= tokenIndex 2931))) {$p = $casteo.p}) (ALT (if_exp (ELEMENT_OPTIONS (= tokenIndex 2937))) {$p = $if_exp.p}) (ALT (match_sent (ELEMENT_OPTIONS (= tokenIndex 2943))) {$p = $match_sent.p}) (ALT (loopB (ELEMENT_OPTIONS (= tokenIndex 2951))) { $p = $loopB.p }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2957))) {$p = $callFunction.p}) (ALT (callModulo (ELEMENT_OPTIONS (= tokenIndex 2963))) {$p = $callModulo.p}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2969))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2971))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2973))) ('(' (ELEMENT_OPTIONS (= tokenIndex 2975))) (expression (ELEMENT_OPTIONS (= tokenIndex 2977))) (')' (ELEMENT_OPTIONS (= tokenIndex 2979))) { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 26)}? (ELEMENT_OPTIONS (= p 26))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 2620))) ('/' (ELEMENT_OPTIONS (= tokenIndex 2622))) ('%' (ELEMENT_OPTIONS (= tokenIndex 2624))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2631) (= p 27)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 2662))) ('-' (ELEMENT_OPTIONS (= tokenIndex 2664))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2671) (= p 25)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 2686))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 2688))) ('>' (ELEMENT_OPTIONS (= tokenIndex 2690))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 2692))) ('==' (ELEMENT_OPTIONS (= tokenIndex 2694))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 2696))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2703) (= p 24)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op ('&&' (ELEMENT_OPTIONS (= tokenIndex 2735)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2741) (= p 22)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op ('||' (ELEMENT_OPTIONS (= tokenIndex 2755)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2761) (= p 21)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 25)}? (ELEMENT_OPTIONS (= p 25))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2645))) (LEN (ELEMENT_OPTIONS (= tokenIndex 2647))) {$p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2771))) (CLONE (ELEMENT_OPTIONS (= tokenIndex 2773))) { $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (TO_STRING (ELEMENT_OPTIONS (= tokenIndex 2783))) { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (TO_OWNED (ELEMENT_OPTIONS (= tokenIndex 2793))) { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }))))))
2023-09-04 03:09:06:285 left-recursion LogManager.java:25 l_StructExp returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=3060> ':'<tokenIndex=3062> expression<tokenIndex=3064>{
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=3048> ID<tokenIndex=3050> ':'<tokenIndex=3052> expression<tokenIndex=3054> {
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              }
        )*
    ;
2023-09-04 03:09:06:285 grammar LogManager.java:25 added: (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 3060))) (':' (ELEMENT_OPTIONS (= tokenIndex 3062))) (expression (ELEMENT_OPTIONS (= tokenIndex 3064))) {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 3048))) (ID (ELEMENT_OPTIONS (= tokenIndex 3050))) (':' (ELEMENT_OPTIONS (= tokenIndex 3052))) (expression (ELEMENT_OPTIONS (= tokenIndex 3054))) {
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              }))))))
2023-09-04 03:09:06:301 left-recursion LogManager.java:25 listIDArray returns [interfaces.Expresion p]
    :   ( {} ID<tokenIndex=3158> { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=3134> expression<tokenIndex=3136> CORDER<tokenIndex=3138> { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> '.'<tokenIndex=3150> ID<tokenIndex=3152> { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }
        )*
    ;
2023-09-04 03:09:06:306 grammar LogManager.java:25 added: (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 3158))) { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 3134))) (expression (ELEMENT_OPTIONS (= tokenIndex 3136))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 3138))) { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) ('.' (ELEMENT_OPTIONS (= tokenIndex 3150))) (ID (ELEMENT_OPTIONS (= tokenIndex 3152))) { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }))))))
2023-09-04 03:09:06:349 grammar LogManager.java:25 import PRINT_CON=1
2023-09-04 03:09:06:349 grammar LogManager.java:25 import T_NUMBER=2
2023-09-04 03:09:06:349 grammar LogManager.java:25 import T_FLOAT=3
2023-09-04 03:09:06:349 grammar LogManager.java:25 import T_STRING=4
2023-09-04 03:09:06:349 grammar LogManager.java:25 import T_BOOL=5
2023-09-04 03:09:06:349 grammar LogManager.java:25 import T_STR=6
2023-09-04 03:09:06:349 grammar LogManager.java:25 import T_CHAT=7
2023-09-04 03:09:06:349 grammar LogManager.java:25 import T_ARRAY=8
2023-09-04 03:09:06:349 grammar LogManager.java:25 import T_VECTOR=9
2023-09-04 03:09:06:349 grammar LogManager.java:25 import USIZE=10
2023-09-04 03:09:06:349 grammar LogManager.java:25 import IF=11
2023-09-04 03:09:06:349 grammar LogManager.java:25 import ELSE=12
2023-09-04 03:09:06:349 grammar LogManager.java:25 import WHILE=13
2023-09-04 03:09:06:349 grammar LogManager.java:25 import LOOP=14
2023-09-04 03:09:06:349 grammar LogManager.java:25 import FOR=15
2023-09-04 03:09:06:349 grammar LogManager.java:25 import IN=16
2023-09-04 03:09:06:349 grammar LogManager.java:25 import BREAK=17
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CONTINUE=18
2023-09-04 03:09:06:349 grammar LogManager.java:25 import SWITCH=19
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MTOR=20
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CASE=21
2023-09-04 03:09:06:349 grammar LogManager.java:25 import DEFAULT=22
2023-09-04 03:09:06:349 grammar LogManager.java:25 import TRUE=23
2023-09-04 03:09:06:349 grammar LogManager.java:25 import FALSE=24
2023-09-04 03:09:06:349 grammar LogManager.java:25 import AS=25
2023-09-04 03:09:06:349 grammar LogManager.java:25 import AT=26
2023-09-04 03:09:06:349 grammar LogManager.java:25 import LET=27
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MUT=28
2023-09-04 03:09:06:349 grammar LogManager.java:25 import STRUCT=29
2023-09-04 03:09:06:349 grammar LogManager.java:25 import VEC=30
2023-09-04 03:09:06:349 grammar LogManager.java:25 import VECN=31
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CAPACITY=32
2023-09-04 03:09:06:349 grammar LogManager.java:25 import TO_STRING=33
2023-09-04 03:09:06:349 grammar LogManager.java:25 import TO_OWNED=34
2023-09-04 03:09:06:349 grammar LogManager.java:25 import LEN=35
2023-09-04 03:09:06:349 grammar LogManager.java:25 import NEW=36
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CAPF=37
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CLONE=38
2023-09-04 03:09:06:349 grammar LogManager.java:25 import ABS=39
2023-09-04 03:09:06:349 grammar LogManager.java:25 import PUSH=40
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CONTAINS=41
2023-09-04 03:09:06:349 grammar LogManager.java:25 import INSERT=42
2023-09-04 03:09:06:349 grammar LogManager.java:25 import REMOVE=43
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MODULO=44
2023-09-04 03:09:06:349 grammar LogManager.java:25 import PUBLIC=45
2023-09-04 03:09:06:349 grammar LogManager.java:25 import TYPETHEN=46
2023-09-04 03:09:06:349 grammar LogManager.java:25 import FN=47
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MAIN=48
2023-09-04 03:09:06:349 grammar LogManager.java:25 import RETURN=49
2023-09-04 03:09:06:349 grammar LogManager.java:25 import NUMBER=50
2023-09-04 03:09:06:349 grammar LogManager.java:25 import FLOAT=51
2023-09-04 03:09:06:349 grammar LogManager.java:25 import STRING=52
2023-09-04 03:09:06:349 grammar LogManager.java:25 import PUNTO=53
2023-09-04 03:09:06:349 grammar LogManager.java:25 import COMA=54
2023-09-04 03:09:06:349 grammar LogManager.java:25 import PTCOMA=55
2023-09-04 03:09:06:349 grammar LogManager.java:25 import DOSPUNTO=56
2023-09-04 03:09:06:349 grammar LogManager.java:25 import DPUNTO2=57
2023-09-04 03:09:06:349 grammar LogManager.java:25 import ASIGNACION=58
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MTHEN=59
2023-09-04 03:09:06:349 grammar LogManager.java:25 import GUIONB=60
2023-09-04 03:09:06:349 grammar LogManager.java:25 import ID=61
2023-09-04 03:09:06:349 grammar LogManager.java:25 import DISTINTO=62
2023-09-04 03:09:06:349 grammar LogManager.java:25 import IGUAL=63
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MAYORIGUAL=64
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MENORIGUAL=65
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MAYOR=66
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MENOR=67
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MUL=68
2023-09-04 03:09:06:349 grammar LogManager.java:25 import DIV=69
2023-09-04 03:09:06:349 grammar LogManager.java:25 import ADD=70
2023-09-04 03:09:06:349 grammar LogManager.java:25 import SUB=71
2023-09-04 03:09:06:349 grammar LogManager.java:25 import MOD=72
2023-09-04 03:09:06:349 grammar LogManager.java:25 import AND=73
2023-09-04 03:09:06:349 grammar LogManager.java:25 import OR=74
2023-09-04 03:09:06:349 grammar LogManager.java:25 import NOT=75
2023-09-04 03:09:06:349 grammar LogManager.java:25 import INTERROG=76
2023-09-04 03:09:06:349 grammar LogManager.java:25 import AMP=77
2023-09-04 03:09:06:349 grammar LogManager.java:25 import INOUT=78
2023-09-04 03:09:06:349 grammar LogManager.java:25 import PARIZQ=79
2023-09-04 03:09:06:349 grammar LogManager.java:25 import PARDER=80
2023-09-04 03:09:06:349 grammar LogManager.java:25 import LLAVEIZQ=81
2023-09-04 03:09:06:349 grammar LogManager.java:25 import LLAVEDER=82
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CORIZQ=83
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CORDER=84
2023-09-04 03:09:06:349 grammar LogManager.java:25 import CHAR=85
2023-09-04 03:09:06:349 grammar LogManager.java:25 import WHITESPACE=86
2023-09-04 03:09:06:349 grammar LogManager.java:25 import L_COMMENT=87
2023-09-04 03:09:06:349 grammar LogManager.java:25 import COMMENT=88
2023-09-04 03:09:06:349 grammar LogManager.java:25 import 'print'=1
2023-09-04 03:09:06:349 grammar LogManager.java:25 import 'Int'=2
2023-09-04 03:09:06:349 grammar LogManager.java:25 import 'Float'=3
2023-09-04 03:09:06:349 grammar LogManager.java:25 import 'String'=4
2023-09-04 03:09:06:349 grammar LogManager.java:25 import 'Bool'=5
2023-09-04 03:09:06:349 grammar LogManager.java:25 import ' String'=6
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'Character'=7
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'array'=8
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'Vector'=9
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'usize'=10
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'if'=11
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'else'=12
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'while'=13
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'loop'=14
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'for'=15
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'in'=16
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'break'=17
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'continue'=18
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'switch'=19
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '|'=20
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'case'=21
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'default'=22
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'true'=23
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'false'=24
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'as'=25
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'at'=26
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'let'=27
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'var'=28
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'struct'=29
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'vec!'=30
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'vec'=31
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'with_capacity'=32
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '.to_string()'=33
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '.to_owned()'=34
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'count'=35
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'new()'=36
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'capacity()'=37
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'clone()'=38
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'abs()'=39
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'append'=40
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'contains'=41
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'insert'=42
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'remove'=43
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'mod'=44
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'pub'=45
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '->'=46
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'func'=47
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'main'=48
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'return'=49
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '.'=53
2023-09-04 03:09:06:365 grammar LogManager.java:25 import ','=54
2023-09-04 03:09:06:365 grammar LogManager.java:25 import ';'=55
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '::'=56
2023-09-04 03:09:06:365 grammar LogManager.java:25 import ':'=57
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '='=58
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '=>'=59
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '_'=60
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '!='=62
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '=='=63
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '>='=64
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '<='=65
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '>'=66
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '<'=67
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '*'=68
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '/'=69
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '+'=70
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '-'=71
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '%'=72
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '&&'=73
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '||'=74
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '!'=75
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '?'=76
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '&'=77
2023-09-04 03:09:06:365 grammar LogManager.java:25 import 'inout'=78
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '('=79
2023-09-04 03:09:06:365 grammar LogManager.java:25 import ')'=80
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '{'=81
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '}'=82
2023-09-04 03:09:06:365 grammar LogManager.java:25 import '['=83
2023-09-04 03:09:06:365 grammar LogManager.java:25 import ']'=84
2023-09-04 03:09:06:365 grammar LogManager.java:25 tokens={PRINT_CON=1, T_NUMBER=2, T_FLOAT=3, T_STRING=4, T_BOOL=5, T_STR=6, T_CHAT=7, T_ARRAY=8, T_VECTOR=9, USIZE=10, IF=11, ELSE=12, WHILE=13, LOOP=14, FOR=15, IN=16, BREAK=17, CONTINUE=18, SWITCH=19, MTOR=20, CASE=21, DEFAULT=22, TRUE=23, FALSE=24, AS=25, AT=26, LET=27, MUT=28, STRUCT=29, VEC=30, VECN=31, CAPACITY=32, TO_STRING=33, TO_OWNED=34, LEN=35, NEW=36, CAPF=37, CLONE=38, ABS=39, PUSH=40, CONTAINS=41, INSERT=42, REMOVE=43, MODULO=44, PUBLIC=45, TYPETHEN=46, FN=47, MAIN=48, RETURN=49, NUMBER=50, FLOAT=51, STRING=52, PUNTO=53, COMA=54, PTCOMA=55, DOSPUNTO=56, DPUNTO2=57, ASIGNACION=58, MTHEN=59, GUIONB=60, ID=61, DISTINTO=62, IGUAL=63, MAYORIGUAL=64, MENORIGUAL=65, MAYOR=66, MENOR=67, MUL=68, DIV=69, ADD=70, SUB=71, MOD=72, AND=73, OR=74, NOT=75, INTERROG=76, AMP=77, INOUT=78, PARIZQ=79, PARDER=80, LLAVEIZQ=81, LLAVEDER=82, CORIZQ=83, CORDER=84, CHAR=85, WHITESPACE=86, L_COMMENT=87, COMMENT=88, 'print'=1, 'Int'=2, 'Float'=3, 'String'=4, 'Bool'=5, ' String'=6, 'Character'=7, 'array'=8, 'Vector'=9, 'usize'=10, 'if'=11, 'else'=12, 'while'=13, 'loop'=14, 'for'=15, 'in'=16, 'break'=17, 'continue'=18, 'switch'=19, '|'=20, 'case'=21, 'default'=22, 'true'=23, 'false'=24, 'as'=25, 'at'=26, 'let'=27, 'var'=28, 'struct'=29, 'vec!'=30, 'vec'=31, 'with_capacity'=32, '.to_string()'=33, '.to_owned()'=34, 'count'=35, 'new()'=36, 'capacity()'=37, 'clone()'=38, 'abs()'=39, 'append'=40, 'contains'=41, 'insert'=42, 'remove'=43, 'mod'=44, 'pub'=45, '->'=46, 'func'=47, 'main'=48, 'return'=49, '.'=53, ','=54, ';'=55, '::'=56, ':'=57, '='=58, '=>'=59, '_'=60, '!='=62, '=='=63, '>='=64, '<='=65, '>'=66, '<'=67, '*'=68, '/'=69, '+'=70, '-'=71, '%'=72, '&&'=73, '||'=74, '!'=75, '?'=76, '&'=77, 'inout'=78, '('=79, ')'=80, '{'=81, '}'=82, '['=83, ']'=84}
2023-09-04 03:09:06:365 semantics LogManager.java:25 tokens={EOF=-1, PRINT_CON=1, T_NUMBER=2, T_FLOAT=3, T_STRING=4, T_BOOL=5, T_STR=6, T_CHAT=7, T_ARRAY=8, T_VECTOR=9, USIZE=10, IF=11, ELSE=12, WHILE=13, LOOP=14, FOR=15, IN=16, BREAK=17, CONTINUE=18, SWITCH=19, MTOR=20, CASE=21, DEFAULT=22, TRUE=23, FALSE=24, AS=25, AT=26, LET=27, MUT=28, STRUCT=29, VEC=30, VECN=31, CAPACITY=32, TO_STRING=33, TO_OWNED=34, LEN=35, NEW=36, CAPF=37, CLONE=38, ABS=39, PUSH=40, CONTAINS=41, INSERT=42, REMOVE=43, MODULO=44, PUBLIC=45, TYPETHEN=46, FN=47, MAIN=48, RETURN=49, NUMBER=50, FLOAT=51, STRING=52, PUNTO=53, COMA=54, PTCOMA=55, DOSPUNTO=56, DPUNTO2=57, ASIGNACION=58, MTHEN=59, GUIONB=60, ID=61, DISTINTO=62, IGUAL=63, MAYORIGUAL=64, MENORIGUAL=65, MAYOR=66, MENOR=67, MUL=68, DIV=69, ADD=70, SUB=71, MOD=72, AND=73, OR=74, NOT=75, INTERROG=76, AMP=77, INOUT=78, PARIZQ=79, PARDER=80, LLAVEIZQ=81, LLAVEDER=82, CORIZQ=83, CORDER=84, CHAR=85, WHITESPACE=86, L_COMMENT=87, COMMENT=88}
2023-09-04 03:09:06:365 semantics LogManager.java:25 strings={'print'=1, 'Int'=2, 'Float'=3, 'String'=4, 'Bool'=5, ' String'=6, 'Character'=7, 'array'=8, 'Vector'=9, 'usize'=10, 'if'=11, 'else'=12, 'while'=13, 'loop'=14, 'for'=15, 'in'=16, 'break'=17, 'continue'=18, 'switch'=19, '|'=20, 'case'=21, 'default'=22, 'true'=23, 'false'=24, 'as'=25, 'at'=26, 'let'=27, 'var'=28, 'struct'=29, 'vec!'=30, 'vec'=31, 'with_capacity'=32, '.to_string()'=33, '.to_owned()'=34, 'count'=35, 'new()'=36, 'capacity()'=37, 'clone()'=38, 'abs()'=39, 'append'=40, 'contains'=41, 'insert'=42, 'remove'=43, 'mod'=44, 'pub'=45, '->'=46, 'func'=47, 'main'=48, 'return'=49, '.'=53, ','=54, ';'=55, '::'=56, ':'=57, '='=58, '=>'=59, '_'=60, '!='=62, '=='=63, '>='=64, '<='=65, '>'=66, '<'=67, '*'=68, '/'=69, '+'=70, '-'=71, '%'=72, '&&'=73, '||'=74, '!'=75, '?'=76, '&'=77, 'inout'=78, '('=79, ')'=80, '{'=81, '}'=82, '['=83, ']'=84}
2023-09-04 03:09:06:497 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2023-09-04 03:09:06:497 LL1 LogManager.java:25 look=[{1, 11, 13..15, 17..19, 27, 29, 49, 61}, {53, 82}]
2023-09-04 03:09:06:497 LL1 LogManager.java:25 LL(1)? true
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 1 in rule list_globals
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, <EOF>]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 2 in rule in_global
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[{1, 11, 13..15, 17..19, 27, 29, 47, 49, 53, 61}, 44, 29]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 3 in rule bodyModule_l
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[{44..45}, {1, 11, 13..15, 17..19, 27, 29, 45, 47, 49, 53, 61}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 4 in rule bodyModule_l
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 5 in rule bodyModule_l
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, 82]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 6 in rule t_access
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[45, {1, 11, 13..15, 17..19, 27, 29, 44, 47, 49, 53, 61}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? true
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 7 in rule itemMod
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[{1, 11, 13..15, 17..19, 27, 29, 47, 49, 53, 61}, 29]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 8 in rule funcion
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[{1, 11, 13..15, 17..19, 27, 29, 49, 53, 61}, 47, 47, 47, 47, 47, 47, 47, 47, 47]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 9 in rule params_declar
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, 80]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 10 in rule declar_parametros
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[{28, 61}, 61, 61, 61, 61, {28, 61}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 11 in rule bloque_princip
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[{1, 11, 13..15, 17..19, 27, 29, 49, 53, 61}, 53]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 12 in rule instruccion
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[1, 27, 61, 61, 11, 19, 14, 13, 15, 17, 18, 29, 61, 49, 61, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 13 in rule instruccion_only
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[1, 27, 61, 61, 11, 19, 14, 13, 15, 17, 18, 61, 49, 61, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 14 in rule pushVec
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[61, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 15 in rule listdecStruct
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[61, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 16 in rule listdecStruct
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 17 in rule listdecStruct
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, 82]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 18 in rule callFunction
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[61, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 19 in rule listModulec
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, {11, 14, 19, 23..24, 30, 50..52, 61, 71, 75, 77, 79, 83, 85}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 20 in rule returnFun
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[49, 49]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 21 in rule lBreak
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[17, 17]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 22 in rule listParams
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, {80, 84}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 23 in rule listParamsCall
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, 80]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 24 in rule is_ref
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[77, {11, 14, 19, 23..24, 30..31, 50..52, 61, 71, 75, 77, 79, 83, 85}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 25 in rule declaracion
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[27, 27, 27, 27, 27, 27, 27, 27, 27]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 26 in rule is_mut
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[28, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? true
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 27 in rule letid
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[57, 58]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? true
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 28 in rule vector_types
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[31, 31]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 29 in rule array_type
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[83, 83, 83]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 30 in rule asignacion
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[61, 61, 61, 61, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 31 in rule l_AccessStruct
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, 58]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 32 in rule list_index
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, 58]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 33 in rule if_sent
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[11, 11, 11, 11]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 34 in rule if_exp
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[11, 11]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 35 in rule list_elseif
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[12, {1, 11..15, 17..19, 27, 29, 49, 53..54, 61, 82}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 36 in rule list_elseif_exp
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[12, 12]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 37 in rule match_sent
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[19, 19, 19, 19, 19]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 38 in rule match_brazos
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, {22, 82}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 39 in rule match_brazos_exp
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, {22, 82}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 40 in rule matchbrazo
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[54, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 41 in rule matchbrazo
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[{23..24, 50..52, 61, 77, 85}, {23..24, 50..52, 61, 77, 85}]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 42 in rule listaOpciones
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, 59]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 43 in rule bloque_inst
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[81, 81]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 44 in rule tipos_var
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[2, 4, 3, 5, 6, 29, 7, 8, 9, 10]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? true
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 45 in rule expression
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 46 in rule expression
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 47 in rule expr_arit
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[71, 75, 61, 61, 30, 30, 83, 83, 61, {23..24, 50..52, 61, 77, 85}, 79, 79, 11, 19, 14, 61, 61, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 48 in rule expr_arit
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 49 in rule expr_arit
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 50 in rule tipo_cast
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[3, 2, 10]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? true
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 51 in rule l_StructExp
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, 82]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 52 in rule primitivo
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[50, 51, {52, 77}, 85, 23, 24, 61]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? true
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 53 in rule listIDArray
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 54 in rule listIDArray
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[null, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 55 in rule strings
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[77, 52]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? true
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 56 in rule strings
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[{33..34}, null]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:512 LL1 LogManager.java:25 
DECISION 57 in rule strings
2023-09-04 03:09:06:512 LL1 LogManager.java:25 look=[77, 52, 52]
2023-09-04 03:09:06:512 LL1 LogManager.java:25 LL(1)? false
2023-09-04 03:09:06:528 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"

    import "Servidor1/modules"


2023-09-04 03:09:06:559 action-translator LogManager.java:25 translate $lista = $list_globals.lista
2023-09-04 03:09:06:559 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,19:18]
2023-09-04 03:09:06:559 action-translator LogManager.java:25 qattr [@-1,10:21='list_globals',<0>,19:27].[@-1,23:27='lista',<0>,19:40]
2023-09-04 03:09:06:559 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2023-09-04 03:09:06:559 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,24:5]
2023-09-04 03:09:06:559 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    
2023-09-04 03:09:06:559 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,29:13]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate 
    $lista = arrayList.New()

2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,7:11='lista',<0>,59:5]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate  $lista.Add( $in_global.globals ) 
2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,2:44]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,14:22='in_global',<0>,2:56].[@-1,24:30='globals',<0>,2:66]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate 
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,55:60='lisfun',<0>,6:53].[@-1,62:66='lista',<0>,6:60]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,74:82='in_global',<0>,6:72].[@-1,84:90='globals',<0>,6:82]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,147:151='lista',<0>,7:53]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,157:162='lisfun',<0>,7:63].[@-1,164:168='lista',<0>,7:70]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate $globals = $funcion.instr
2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,1:7='globals',<0>,69:17]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,12:18='funcion',<0>,69:28].[@-1,20:24='instr',<0>,69:36]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate  $globals = $module.modu 
2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,2:8='globals',<0>,70:18]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,13:18='module',<0>,70:29].[@-1,20:23='modu',<0>,70:36]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate $globals = $newStruct.str
2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,1:7='globals',<0>,71:17]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,12:20='newStruct',<0>,71:28].[@-1,22:24='str',<0>,71:38]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate  
        $modu = modules.NewModule( $ID.text, $bodyModule_l.mod_list, $MODULO.line, $MODULO.pos ) 
    
2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,12:15='modu',<0>,76:9]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,76:36].[@-1,42:45='text',<0>,76:39]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,49:60='bodyModule_l',<0>,76:46].[@-1,62:69='mod_list',<0>,76:59]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,73:78='MODULO',<0>,76:70].[@-1,80:83='line',<0>,76:77]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,87:92='MODULO',<0>,76:84].[@-1,94:96='pos',<0>,76:91]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:575 action-translator LogManager.java:25 translate 
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                            $mod_list.Add(newmod)
                        
2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,31:38='mod_list',<0>,3:29]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,120:127='t_access',<0>,4:61].[@-1,129:137='modAccess',<0>,4:70]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 qattr [@-1,157:162='module',<0>,4:98].[@-1,164:167='modu',<0>,4:105]
2023-09-04 03:09:06:575 action-translator LogManager.java:25 attr [@-1,200:207='mod_list',<0>,5:29]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate 
                            $mod_list = arrayList.New()
                            newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                            $mod_list.Add(newmod)
                        
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,31:38='mod_list',<0>,8:29]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,120:127='t_access',<0>,9:61].[@-1,129:137='modAccess',<0>,9:70]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,157:163='itemMod',<0>,9:98].[@-1,165:169='instr',<0>,9:106]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,202:209='mod_list',<0>,10:29]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate 
                                                      newmod := modules.NewModuleCont($t_access.modAccess, interfaces.MOD, $module.modu)
                                                      $l_mod.mod_list.Add(newmod)
                                                      $mod_list = $l_mod.mod_list
                                                  
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,89:96='t_access',<0>,15:87].[@-1,98:106='modAccess',<0>,15:96]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,126:131='module',<0>,15:124].[@-1,133:136='modu',<0>,15:131]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,195:199='l_mod',<0>,16:55].[@-1,201:208='mod_list',<0>,16:61]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,278:285='mod_list',<0>,17:55]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,290:294='l_mod',<0>,17:67].[@-1,296:303='mod_list',<0>,17:73]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate 
                                                      newmod := modules.NewModuleCont($t_access.modAccess, interfaces.INS, $itemMod.instr)
                                                      $l_mod.mod_list.Add(newmod)
                                                      $mod_list = $l_mod.mod_list
                                                  
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,89:96='t_access',<0>,20:87].[@-1,98:106='modAccess',<0>,20:96]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,126:132='itemMod',<0>,20:124].[@-1,134:138='instr',<0>,20:132]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,197:201='l_mod',<0>,21:55].[@-1,203:210='mod_list',<0>,21:61]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,280:287='mod_list',<0>,22:55]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,292:296='l_mod',<0>,22:67].[@-1,298:305='mod_list',<0>,22:73]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate  $modAccess = interfaces.PUBLIC
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,2:10='modAccess',<0>,105:16]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate  $modAccess = interfaces.PRIVATE
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,2:10='modAccess',<0>,106:16]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate $instr = $funcion.instr
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,110:21]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,10:16='funcion',<0>,110:30].[@-1,18:22='instr',<0>,110:38]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate $instr = $newStruct.str
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,111:21]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,10:18='newStruct',<0>,111:30].[@-1,20:22='str',<0>,111:40]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate  listParams :=  arrayList.New() 
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate $instr =  $fn_main.instr
2023-09-04 03:09:06:590 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,117:27]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 qattr [@-1,11:17='fn_main',<0>,117:37].[@-1,19:23='instr',<0>,117:45]
2023-09-04 03:09:06:590 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,118:53]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,118:91].[@-1,43:46='text',<0>,118:94]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,118:111].[@-1,72:72='l',<0>,118:123]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,76:84='tipos_var',<0>,118:127].[@-1,86:89='tipo',<0>,118:137]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,118:144].[@-1,96:99='line',<0>,118:147]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,118:154].[@-1,106:108='pos',<0>,118:157]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,119:64]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,119:102].[@-1,43:46='text',<0>,119:105]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,119:122].[@-1,72:72='l',<0>,119:134]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,119:155].[@-1,96:99='line',<0>,119:158]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,119:165].[@-1,106:108='pos',<0>,119:168]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,113:116='idob',<0>,119:175].[@-1,118:121='text',<0>,119:180]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,120:51]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,120:89].[@-1,43:46='text',<0>,120:92]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,120:109].[@-1,72:72='l',<0>,120:121]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,120:142].[@-1,96:99='line',<0>,120:145]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,120:152].[@-1,106:108='pos',<0>,120:155]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,113:116='idob',<0>,120:162].[@-1,118:121='text',<0>,120:167]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,122:53]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,122:91].[@-1,43:46='text',<0>,122:94]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,122:111].[@-1,72:72='l',<0>,122:123]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,122:144].[@-1,96:99='line',<0>,122:147]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,122:154].[@-1,106:108='pos',<0>,122:157]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,123:53]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,123:91].[@-1,43:46='text',<0>,123:94]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,123:100].[@-1,63:67='lista',<0>,123:114]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,70:80='bloque_inst',<0>,123:121].[@-1,82:82='l',<0>,123:133]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,123:154].[@-1,106:109='line',<0>,123:157]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,123:164].[@-1,116:118='pos',<0>,123:167]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,125:67]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,125:105].[@-1,43:46='text',<0>,125:108]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,125:114].[@-1,63:67='lista',<0>,125:128]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,71:81='bloque_inst',<0>,125:136].[@-1,83:83='l',<0>,125:148]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,86:94='tipos_var',<0>,125:151].[@-1,96:99='tipo',<0>,125:161]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,125:168].[@-1,106:109='line',<0>,125:171]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,125:178].[@-1,116:118='pos',<0>,125:181]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VECTOR, $id.line, $id.pos, $idob.text  )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,126:81]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='id',<0>,126:119].[@-1,43:46='text',<0>,126:122]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,126:128].[@-1,63:67='lista',<0>,126:142]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,71:81='bloque_inst',<0>,126:150].[@-1,83:83='l',<0>,126:162]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,106:107='id',<0>,126:185].[@-1,109:112='line',<0>,126:188]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,116:117='id',<0>,126:195].[@-1,119:121='pos',<0>,126:198]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,125:128='idob',<0>,126:204].[@-1,130:133='text',<0>,126:209]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VECTOR, $id.line, $id.pos, ""  )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,127:83]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='id',<0>,127:121].[@-1,43:46='text',<0>,127:124]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,127:130].[@-1,63:67='lista',<0>,127:144]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,71:81='bloque_inst',<0>,127:152].[@-1,83:83='l',<0>,127:164]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,106:107='id',<0>,127:187].[@-1,109:112='line',<0>,127:190]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,116:117='id',<0>,127:197].[@-1,119:121='pos',<0>,127:200]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,128:68]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,40:41='id',<0>,128:106].[@-1,43:46='text',<0>,128:109]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,128:115].[@-1,63:67='lista',<0>,128:129]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,71:81='bloque_inst',<0>,128:137].[@-1,83:83='l',<0>,128:149]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,104:105='id',<0>,128:170].[@-1,107:110='line',<0>,128:173]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,114:115='id',<0>,128:180].[@-1,117:119='pos',<0>,128:183]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,123:126='idob',<0>,128:189].[@-1,128:131='text',<0>,128:194]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate 
$lista =  arrayList.New()

2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,3:7='lista',<0>,154:1]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate    $lista.Add($declar_parametros.in_dec) 
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,4:8='lista',<0>,2:51]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,15:31='declar_parametros',<0>,2:62].[@-1,33:38='in_dec',<0>,2:80]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:606 action-translator LogManager.java:25 translate 
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista 
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,73:79='listdec',<0>,6:71].[@-1,81:85='lista',<0>,6:79]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 qattr [@-1,92:108='declar_parametros',<0>,6:90].[@-1,110:115='in_dec',<0>,6:108]
2023-09-04 03:09:06:606 action-translator LogManager.java:25 attr [@-1,190:194='lista',<0>,7:71]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,200:206='listdec',<0>,7:81].[@-1,208:212='lista',<0>,7:89]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate 
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isMut.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,122:123='ID',<0>,165:66].[@-1,125:128='text',<0>,165:69]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,132:133='ID',<0>,165:76].[@-1,135:138='line',<0>,165:79]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,142:143='ID',<0>,165:86].[@-1,145:147='pos',<0>,165:89]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,213:214='ID',<0>,166:60].[@-1,216:219='text',<0>,166:63]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,223:231='tipos_var',<0>,166:70].[@-1,233:236='tipo',<0>,166:80]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,245:249='isMut',<0>,166:92].[@-1,251:253='mut',<0>,166:98]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,257:258='ID',<0>,166:104].[@-1,260:263='line',<0>,166:107]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,267:268='ID',<0>,166:114].[@-1,270:272='pos',<0>,166:117]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 attr [@-1,302:307='in_dec',<0>,167:25]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate 
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,122:123='ID',<0>,173:66].[@-1,125:128='text',<0>,173:69]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,132:133='ID',<0>,173:76].[@-1,135:138='line',<0>,173:79]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,142:143='ID',<0>,173:86].[@-1,145:147='pos',<0>,173:89]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,218:219='ID',<0>,174:65].[@-1,221:224='text',<0>,174:68]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,228:237='array_type',<0>,174:75].[@-1,239:240='ty',<0>,174:86]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,255:256='ID',<0>,174:102].[@-1,258:261='line',<0>,174:105]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,265:266='ID',<0>,174:112].[@-1,268:270='pos',<0>,174:115]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 attr [@-1,300:305='in_dec',<0>,175:25]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate 
                        //listaIdes := arrayList.New()
                        //listaIdes.Add(expresion.NewIdentificador($id.text, $id.line, $id.pos ))
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $is_ref.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,126:127='id',<0>,179:68].[@-1,129:132='text',<0>,179:71]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,136:137='id',<0>,179:78].[@-1,139:142='line',<0>,179:81]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,146:147='id',<0>,179:88].[@-1,149:151='pos',<0>,179:91]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,223:224='id',<0>,180:66].[@-1,226:229='text',<0>,180:69]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,255:260='is_ref',<0>,180:98].[@-1,262:264='ref',<0>,180:105]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,268:269='id',<0>,180:111].[@-1,271:274='line',<0>,180:114]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,278:279='id',<0>,180:121].[@-1,281:283='pos',<0>,180:124]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,292:295='idob',<0>,180:135].[@-1,297:300='text',<0>,180:140]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 attr [@-1,329:334='in_dec',<0>,181:25]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate 
                        //listaIdes := arrayList.New()
                        //listaIdes.Add(expresion.NewIdentificador($id.text, $id.line, $id.pos ))
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $is_ref.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,126:127='id',<0>,185:68].[@-1,129:132='text',<0>,185:71]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,136:137='id',<0>,185:78].[@-1,139:142='line',<0>,185:81]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,146:147='id',<0>,185:88].[@-1,149:151='pos',<0>,185:91]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,223:224='id',<0>,186:66].[@-1,226:229='text',<0>,186:69]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,233:241='tipos_var',<0>,186:76].[@-1,243:246='tipo',<0>,186:86]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,255:260='is_ref',<0>,186:98].[@-1,262:264='ref',<0>,186:105]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,268:269='id',<0>,186:111].[@-1,271:274='line',<0>,186:114]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,278:279='id',<0>,186:121].[@-1,281:283='pos',<0>,186:124]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 attr [@-1,321:326='in_dec',<0>,187:25]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate  
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $is_ref.ref, $id.line, $id.pos)
                            $in_dec = decl
                        
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,67:68='id',<0>,190:64].[@-1,70:73='text',<0>,190:67]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,101:106='is_ref',<0>,190:98].[@-1,108:110='ref',<0>,190:105]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,114:115='id',<0>,190:111].[@-1,117:120='line',<0>,190:114]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,124:125='id',<0>,190:121].[@-1,127:129='pos',<0>,190:124]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 attr [@-1,162:167='in_dec',<0>,191:29]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate 
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isMut.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,68:69='id',<0>,195:66].[@-1,71:74='text',<0>,195:69]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,100:104='isMut',<0>,195:98].[@-1,106:108='mut',<0>,195:104]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,112:113='id',<0>,195:110].[@-1,115:118='line',<0>,195:113]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,122:123='id',<0>,195:120].[@-1,125:127='pos',<0>,195:123]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,136:139='idob',<0>,195:134].[@-1,141:144='text',<0>,195:139]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 attr [@-1,173:178='in_dec',<0>,196:25]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate  listParams:= arrayList.New() 
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )
2023-09-04 03:09:06:622 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,220:6]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 qattr [@-1,58:71='bloque_princip',<0>,220:62].[@-1,73:73='l',<0>,220:77]
2023-09-04 03:09:06:622 action-translator LogManager.java:25 translate $l = $instrucciones.l 
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,224:24]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,6:18='instrucciones',<0>,224:29].[@-1,20:20='l',<0>,224:43]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $l = arrayList.New()
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,225:9]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $printconsola.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,228:22]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:21='printconsola',<0>,228:31].[@-1,23:27='instr',<0>,228:44]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $declaracion.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,229:21]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:20='declaracion',<0>,229:30].[@-1,22:26='instr',<0>,229:42]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $asignacion.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,230:20]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,230:29].[@-1,21:25='instr',<0>,230:40]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $pushVec.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,232:17]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:16='pushVec',<0>,232:26].[@-1,18:22='instr',<0>,232:34]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $if_sent.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,234:14]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:16='if_sent',<0>,234:23].[@-1,18:22='instr',<0>,234:31]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $match_sent.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,235:16]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:19='match_sent',<0>,235:25].[@-1,21:25='instr',<0>,235:36]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate  $instr = $loopB.lop 
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,237:12]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,11:15='loopB',<0>,237:21].[@-1,17:19='lop',<0>,237:27]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate  $instr = $lWhile.lwh 
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,238:13]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,11:16='lWhile',<0>,238:22].[@-1,18:20='lwh',<0>,238:29]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate  $instr = $lForin.lfor 
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,239:13]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,11:16='lForin',<0>,239:22].[@-1,18:21='lfor',<0>,239:29]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate  $instr = $lBreak.br 
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,242:17]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,11:16='lBreak',<0>,242:26].[@-1,18:19='br',<0>,242:33]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate  $instr = $lContinue.cn 
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,243:20]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,11:19='lContinue',<0>,243:29].[@-1,21:22='cn',<0>,243:39]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $newStruct.str
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,245:16]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:18='newStruct',<0>,245:25].[@-1,20:22='str',<0>,245:35]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $callFunction.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,247:22]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,247:31].[@-1,23:27='instr',<0>,247:44]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $returnFun.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,248:19]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:18='returnFun',<0>,248:28].[@-1,20:24='instr',<0>,248:38]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $callModulo.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,249:20]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:19='callModulo',<0>,249:29].[@-1,21:25='instr',<0>,249:40]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,251:43]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,251:79].[@-1,41:44='text',<0>,251:82]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,48:57='expression',<0>,251:89].[@-1,59:59='p',<0>,251:100]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,251:104].[@-1,66:69='line',<0>,251:107]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,251:114].[@-1,76:78='pos',<0>,251:117]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $printconsola.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,256:26]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:21='printconsola',<0>,256:35].[@-1,23:27='instr',<0>,256:48]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 translate $instr = $declaracion.instr
2023-09-04 03:09:06:637 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,257:25]
2023-09-04 03:09:06:637 action-translator LogManager.java:25 qattr [@-1,10:20='declaracion',<0>,257:34].[@-1,22:26='instr',<0>,257:46]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate $instr = $asignacion.instr
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,258:24]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,258:33].[@-1,21:25='instr',<0>,258:44]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate $instr = $pushVec.instr
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,260:14]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,10:16='pushVec',<0>,260:23].[@-1,18:22='instr',<0>,260:31]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate $instr = $if_sent.instr
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,262:14]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,10:16='if_sent',<0>,262:23].[@-1,18:22='instr',<0>,262:31]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate $instr = $match_sent.instr
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,263:16]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,10:19='match_sent',<0>,263:25].[@-1,21:25='instr',<0>,263:36]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  $instr = $loopB.lop 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,265:12]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,11:15='loopB',<0>,265:21].[@-1,17:19='lop',<0>,265:27]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  $instr = $lWhile.lwh 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,266:13]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,11:16='lWhile',<0>,266:22].[@-1,18:20='lwh',<0>,266:29]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  $instr = $lForin.lfor 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,267:13]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,11:16='lForin',<0>,267:22].[@-1,18:21='lfor',<0>,267:29]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  $instr = $lBreak.br 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,269:14]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,11:16='lBreak',<0>,269:23].[@-1,18:19='br',<0>,269:30]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  $instr = $lContinue.cn 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,270:17]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,11:19='lContinue',<0>,270:26].[@-1,21:22='cn',<0>,270:36]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate $instr = $callFunction.instr
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,274:18]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,274:27].[@-1,23:27='instr',<0>,274:40]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate $instr = $returnFun.instr
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,275:16]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,10:18='returnFun',<0>,275:25].[@-1,20:24='instr',<0>,275:35]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate $instr = $callModulo.instr
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,276:16]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,10:19='callModulo',<0>,276:25].[@-1,21:25='instr',<0>,276:36]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,278:39]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,278:75].[@-1,41:44='text',<0>,278:78]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,48:57='expression',<0>,278:85].[@-1,59:59='p',<0>,278:96]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,278:100].[@-1,66:69='line',<0>,278:103]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,278:110].[@-1,76:78='pos',<0>,278:113]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate $instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,283:40]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,283:69].[@-1,33:36='text',<0>,283:72]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,40:42='val',<0>,283:79].[@-1,44:44='p',<0>,283:83]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,283:87].[@-1,51:54='line',<0>,283:90]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,283:97].[@-1,61:63='pos',<0>,283:100]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,284:66]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,284:97].[@-1,36:39='text',<0>,284:100]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,43:46='val1',<0>,284:107].[@-1,48:48='p',<0>,284:112]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,52:55='val2',<0>,284:116].[@-1,57:57='p',<0>,284:121]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,284:125].[@-1,64:67='line',<0>,284:128]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,71:72='ID',<0>,284:135].[@-1,74:76='pos',<0>,284:138]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  $str = instructionExpre.NewStruct($ID.text, $listdecStruct.l, $STRUCT.line, $STRUCT.pos) 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,2:4='str',<0>,287:46]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,287:80].[@-1,39:42='text',<0>,287:83]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,46:58='listdecStruct',<0>,287:90].[@-1,60:60='l',<0>,287:104]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,64:69='STRUCT',<0>,287:108].[@-1,71:74='line',<0>,287:115]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,78:83='STRUCT',<0>,287:122].[@-1,85:87='pos',<0>,287:129]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,3:59].[@-1,64:67='text',<0>,3:62]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,71:79='tipos_var',<0>,3:69].[@-1,81:84='tipo',<0>,3:79]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 setAttr [@-1,113:113='l',<0>,4:21] [@-1,116:131=' arrayList.New()',<0>,4:24]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,156:156='l',<0>,5:21]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,8:59].[@-1,64:67='text',<0>,8:62]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 qattr [@-1,88:93='idstru',<0>,8:86].[@-1,95:98='text',<0>,8:93]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 setAttr [@-1,123:123='l',<0>,9:21] [@-1,126:141=' arrayList.New()',<0>,9:24]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-04 03:09:06:653 action-translator LogManager.java:25 attr [@-1,166:166='l',<0>,10:21]
2023-09-04 03:09:06:653 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,15:89].[@-1,94:97='text',<0>,15:92]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,101:109='tipos_var',<0>,15:99].[@-1,111:114='tipo',<0>,15:109]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,173:176='list',<0>,16:51].[@-1,178:178='l',<0>,16:56]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 setAttr [@-1,248:248='l',<0>,17:51] [@-1,251:258=' $list.l',<0>,17:54]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate  $list.l
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,14:149].[@-1,7:7='l',<0>,14:154]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,20:89].[@-1,94:97='text',<0>,20:92]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,118:123='idstru',<0>,20:116].[@-1,125:128='text',<0>,20:123]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,183:186='list',<0>,21:51].[@-1,188:188='l',<0>,21:56]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 setAttr [@-1,258:258='l',<0>,22:51] [@-1,261:268=' $list.l',<0>,22:54]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate  $list.l
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,19:159].[@-1,7:7='l',<0>,19:164]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,317:25]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,317:67].[@-1,72:75='text',<0>,317:70]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,96:97='ID',<0>,317:94].[@-1,99:102='line',<0>,317:97]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,106:107='ID',<0>,317:104].[@-1,109:111='pos',<0>,317:107]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,141:141='p',<0>,318:25]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,179:180='ID',<0>,318:63].[@-1,182:185='text',<0>,318:66]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,206:207='ID',<0>,318:90].[@-1,209:212='line',<0>,318:93]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,216:217='ID',<0>,318:100].[@-1,219:221='pos',<0>,318:103]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,321:25]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,321:67].[@-1,72:75='text',<0>,321:70]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,79:92='listParamsCall',<0>,321:77].[@-1,94:96='l_e',<0>,321:92]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,321:98].[@-1,103:106='line',<0>,321:101]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,321:108].[@-1,113:115='pos',<0>,321:111]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,145:145='p',<0>,322:25]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,183:184='ID',<0>,322:63].[@-1,186:189='text',<0>,322:66]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,193:206='listParamsCall',<0>,322:73].[@-1,208:210='l_e',<0>,322:88]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,214:215='ID',<0>,322:94].[@-1,217:220='line',<0>,322:97]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,224:225='ID',<0>,322:104].[@-1,227:229='pos',<0>,322:107]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate 
        $p = instructionExpre.NewModuleAccess($listModulec.lm, $expression.p, $listModulec.start.GetLine(),$listModulec.start.GetColumn() )
        $instr = instructionExpre.NewModuleAccess($listModulec.lm, $expression.p, $listModulec.start.GetLine(),$listModulec.start.GetColumn() )
    
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,11:11='p',<0>,329:9]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,49:59='listModulec',<0>,329:47].[@-1,61:62='lm',<0>,329:59]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,66:75='expression',<0>,329:64].[@-1,77:77='p',<0>,329:75]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,81:91='listModulec',<0>,329:79].[@-1,93:97='start',<0>,329:91]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,110:120='listModulec',<0>,329:108].[@-1,122:126='start',<0>,329:120]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,152:156='instr',<0>,330:9]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,194:204='listModulec',<0>,330:51].[@-1,206:207='lm',<0>,330:63]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,211:220='expression',<0>,330:68].[@-1,222:222='p',<0>,330:79]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,226:236='listModulec',<0>,330:83].[@-1,238:242='start',<0>,330:95]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,255:265='listModulec',<0>,330:112].[@-1,267:271='start',<0>,330:124]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate   $lm = arrayList.New()   
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,3:4='lm',<0>,335:8]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate 
                    $lm.Add($ID.text)
                
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,23:24='lm',<0>,3:21]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,3:29].[@-1,34:37='text',<0>,3:32]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate 
                                          $list.lm.Add($ID.text)
                                          $lm = $list.lm
                                      
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,45:48='list',<0>,8:43].[@-1,50:51='lm',<0>,8:48]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,8:56].[@-1,61:64='text',<0>,8:59]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,111:112='lm',<0>,9:43]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,117:120='list',<0>,9:49].[@-1,122:123='lm',<0>,9:54]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,346:30]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,43:48='RETURN',<0>,346:71].[@-1,50:53='line',<0>,346:78]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,57:62='RETURN',<0>,346:85].[@-1,64:66='pos',<0>,346:92]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,347:30]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,38:47='expression',<0>,347:66].[@-1,49:49='p',<0>,347:77]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,53:58='RETURN',<0>,347:81].[@-1,60:63='line',<0>,347:88]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,67:72='RETURN',<0>,347:95].[@-1,74:76='pos',<0>,347:102]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,351:42]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,34:43='listParams',<0>,351:75].[@-1,45:47='l_e',<0>,351:86]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,51:59='PRINT_CON',<0>,351:92].[@-1,61:64='line',<0>,351:102]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate  
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $LOOP.line, $LOOP.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $LOOP.line, $LOOP.pos ) 
                    
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,28:30='lop',<0>,357:25]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,357:57].[@-1,72:72='l',<0>,357:69]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,76:79='LOOP',<0>,357:73].[@-1,81:84='line',<0>,357:78]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,88:91='LOOP',<0>,357:85].[@-1,93:95='pos',<0>,357:90]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,125:125='p',<0>,358:25]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,155:165='bloque_inst',<0>,358:55].[@-1,167:167='l',<0>,358:67]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,171:174='LOOP',<0>,358:71].[@-1,176:179='line',<0>,358:76]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,183:186='LOOP',<0>,358:83].[@-1,188:190='pos',<0>,358:88]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 translate  $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) 
2023-09-04 03:09:06:669 action-translator LogManager.java:25 attr [@-1,2:4='lwh',<0>,363:33]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,30:39='expression',<0>,363:61].[@-1,41:41='p',<0>,363:72]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,45:55='bloque_inst',<0>,363:76].[@-1,57:57='l',<0>,363:88]
2023-09-04 03:09:06:669 action-translator LogManager.java:25 qattr [@-1,61:65='WHILE',<0>,363:92].[@-1,67:70='line',<0>,363:98]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,74:78='WHILE',<0>,363:105].[@-1,80:82='pos',<0>,363:111]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate  $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) 
2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,2:5='lfor',<0>,368:37]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,368:66].[@-1,34:37='text',<0>,368:69]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,368:76].[@-1,52:52='p',<0>,368:87]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,56:66='bloque_inst',<0>,368:91].[@-1,68:68='l',<0>,368:103]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,72:74='FOR',<0>,368:107].[@-1,76:79='line',<0>,368:111]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,83:85='FOR',<0>,368:118].[@-1,87:89='pos',<0>,368:122]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate  $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) 
2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,2:3='br',<0>,372:10]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,39:43='BREAK',<0>,372:47].[@-1,45:48='line',<0>,372:53]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,52:56='BREAK',<0>,372:60].[@-1,58:60='pos',<0>,372:66]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate  $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) 
2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,2:3='br',<0>,373:21]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,373:53].[@-1,45:45='p',<0>,373:64]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,49:53='BREAK',<0>,373:68].[@-1,55:58='line',<0>,373:74]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,62:66='BREAK',<0>,373:81].[@-1,68:70='pos',<0>,373:87]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate  $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,2:3='cn',<0>,377:13]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,37:44='CONTINUE',<0>,377:48].[@-1,46:49='line',<0>,377:57]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,53:60='CONTINUE',<0>,377:64].[@-1,62:64='pos',<0>,377:73]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate 
    $l_e = arrayList.New()

2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,7:9='l_e',<0>,382:5]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate $l_e.Add($expression.p)
2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,1:3='l_e',<0>,2:42]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,10:19='expression',<0>,2:51].[@-1,21:21='p',<0>,2:62]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate 
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,49:52='list',<0>,6:47].[@-1,54:56='l_e',<0>,6:52]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,63:72='expression',<0>,6:61].[@-1,74:74='p',<0>,6:72]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,125:127='l_e',<0>,7:47]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,132:135='list',<0>,7:54].[@-1,137:139='l_e',<0>,7:59]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate 
    $l_e = arrayList.New()

2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,7:9='l_e',<0>,394:5]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate    ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                        $l_e.Add(ref)
                    
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,43:52='expression',<0>,2:111].[@-1,54:54='p',<0>,2:122]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,58:63='is_ref',<0>,2:126].[@-1,65:67='ref',<0>,2:133]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 attr [@-1,96:98='l_e',<0>,3:25]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:684 action-translator LogManager.java:25 translate 
                                              ref := instructionExpre.NewParameterBy($expression.p, $is_ref.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,88:97='expression',<0>,8:86].[@-1,99:99='p',<0>,8:97]
2023-09-04 03:09:06:684 action-translator LogManager.java:25 qattr [@-1,103:108='is_ref',<0>,8:101].[@-1,110:112='ref',<0>,8:108]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,163:166='list',<0>,9:47].[@-1,168:170='l_e',<0>,9:52]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,229:231='l_e',<0>,10:47]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,236:239='list',<0>,10:54].[@-1,241:243='l_e',<0>,10:59]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate  $ref = true 
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,2:4='ref',<0>,407:15]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate  $ref = false 
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,2:4='ref',<0>,408:7]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,413:25]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,63:64='id',<0>,413:61].[@-1,66:69='text',<0>,413:64]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,73:81='tipos_var',<0>,413:71].[@-1,83:86='tipo',<0>,413:81]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,413:88].[@-1,101:101='p',<0>,413:99]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,105:109='isMut',<0>,413:103].[@-1,111:113='mut',<0>,413:109]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,117:120='asig',<0>,413:115].[@-1,122:125='line',<0>,413:120]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate  
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,26:30='instr',<0>,416:23]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,62:63='id',<0>,416:59].[@-1,65:68='text',<0>,416:62]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,89:98='expression',<0>,416:86].[@-1,100:100='p',<0>,416:97]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,104:108='isMut',<0>,416:101].[@-1,110:112='mut',<0>,416:107]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,116:119='asig',<0>,416:113].[@-1,121:124='line',<0>,416:118]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate 
                      $instr = instruction.NewArrayDeclaration($id.text, $array_type.ty, $expression.p, $isMut.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,25:29='instr',<0>,420:23]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,66:67='id',<0>,420:64].[@-1,69:72='text',<0>,420:67]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,76:85='array_type',<0>,420:74].[@-1,87:88='ty',<0>,420:85]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,92:101='expression',<0>,420:90].[@-1,103:103='p',<0>,420:101]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,107:111='isMut',<0>,420:105].[@-1,113:115='mut',<0>,420:111]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,119:122='asig',<0>,420:117].[@-1,124:127='line',<0>,420:122]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isMut.mut, $VECN.line, $VECN.pos, nil, "")
                    
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,427:25]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,427:67].[@-1,72:75='text',<0>,427:70]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,79:90='vector_types',<0>,427:77].[@-1,92:95='tipo',<0>,427:90]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,104:108='isMut',<0>,427:102].[@-1,110:112='mut',<0>,427:108]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,116:119='VECN',<0>,427:114].[@-1,121:124='line',<0>,427:119]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,128:131='VECN',<0>,427:126].[@-1,133:135='pos',<0>,427:131]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isMut.mut, $VECN.line, $VECN.pos, nil, $idob.text)
                    
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,433:25]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,433:67].[@-1,72:75='text',<0>,433:70]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,103:107='isMut',<0>,433:101].[@-1,109:111='mut',<0>,433:107]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,115:118='VECN',<0>,433:113].[@-1,120:123='line',<0>,433:118]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,127:130='VECN',<0>,433:125].[@-1,132:134='pos',<0>,433:130]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,143:146='idob',<0>,433:141].[@-1,148:151='text',<0>,433:146]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, $expression.p, $isMut.mut, $VECN.line, $VECN.pos, nil, "")
                    
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,436:25]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,436:67].[@-1,72:75='text',<0>,436:70]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,79:87='tipos_var',<0>,436:77].[@-1,89:92='tipo',<0>,436:87]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,96:105='expression',<0>,436:94].[@-1,107:107='p',<0>,436:105]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,111:115='isMut',<0>,436:109].[@-1,117:119='mut',<0>,436:115]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,123:126='VECN',<0>,436:121].[@-1,128:131='line',<0>,436:126]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,135:138='VECN',<0>,436:133].[@-1,140:142='pos',<0>,436:138]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, $expression.p, $isMut.mut, $VECN.line, $VECN.pos, nil, $idob.text)
                    
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,439:25]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,439:67].[@-1,72:75='text',<0>,439:70]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,96:105='expression',<0>,439:94].[@-1,107:107='p',<0>,439:105]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,111:115='isMut',<0>,439:109].[@-1,117:119='mut',<0>,439:115]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,123:126='VECN',<0>,439:121].[@-1,128:131='line',<0>,439:126]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,135:138='VECN',<0>,439:133].[@-1,140:142='pos',<0>,439:138]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,151:154='idob',<0>,439:149].[@-1,156:159='text',<0>,439:154]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isMut.mut, $VECN.line, $VECN.pos, $expression.p, $idob.text)
                    
2023-09-04 03:09:06:700 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,443:25]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,443:67].[@-1,72:75='text',<0>,443:70]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,101:105='isMut',<0>,443:99].[@-1,107:109='mut',<0>,443:105]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,113:116='VECN',<0>,443:111].[@-1,118:121='line',<0>,443:116]
2023-09-04 03:09:06:700 action-translator LogManager.java:25 qattr [@-1,125:128='VECN',<0>,443:123].[@-1,130:132='pos',<0>,443:128]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,136:145='expression',<0>,443:134].[@-1,147:147='p',<0>,443:145]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,151:154='idob',<0>,443:149].[@-1,156:159='text',<0>,443:154]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isMut.mut, $VECN.line, $VECN.pos, $expression.p, "")
                    
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,446:25]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,446:67].[@-1,72:75='text',<0>,446:70]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,79:87='tipos_var',<0>,446:77].[@-1,89:92='tipo',<0>,446:87]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,101:105='isMut',<0>,446:99].[@-1,107:109='mut',<0>,446:105]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,113:116='VECN',<0>,446:111].[@-1,118:121='line',<0>,446:116]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,125:128='VECN',<0>,446:123].[@-1,130:132='pos',<0>,446:128]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,136:145='expression',<0>,446:134].[@-1,147:147='p',<0>,446:145]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate  $mut = true 
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,2:4='mut',<0>,451:11]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate  $tipo = interfaces.VECTOR 
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,461:34]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate  $tipo = $tipos_var.tipo 
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,462:31]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,10:18='tipos_var',<0>,462:39].[@-1,20:23='tipo',<0>,462:49]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
    $ty = arrayList.New()

2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,7:8='ty',<0>,468:5]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,94:103='expression',<0>,471:92].[@-1,105:105='p',<0>,471:103]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,109:114='CORIZQ',<0>,471:107].[@-1,116:119='line',<0>,471:114]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,123:128='CORIZQ',<0>,471:121].[@-1,130:132='pos',<0>,471:128]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,178:187='array_type',<0>,472:41].[@-1,189:190='ty',<0>,472:52]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,245:246='ty',<0>,473:41]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,251:260='array_type',<0>,473:47].[@-1,262:263='ty',<0>,473:58]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,74:82='tipos_var',<0>,476:72].[@-1,84:87='tipo',<0>,476:82]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,476:89].[@-1,102:102='p',<0>,476:100]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,106:111='CORIZQ',<0>,476:104].[@-1,113:116='line',<0>,476:111]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,120:125='CORIZQ',<0>,476:118].[@-1,127:129='pos',<0>,476:125]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,173:174='ty',<0>,477:39]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,74:82='tipos_var',<0>,481:72].[@-1,84:87='tipo',<0>,481:82]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,96:101='CORIZQ',<0>,481:94].[@-1,103:106='line',<0>,481:101]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,110:115='CORIZQ',<0>,481:108].[@-1,117:119='pos',<0>,481:115]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,163:164='ty',<0>,482:39]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,487:28]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,487:63].[@-1,39:42='text',<0>,487:66]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,487:72].[@-1,56:56='p',<0>,487:83]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,65:66='id',<0>,487:92].[@-1,68:71='line',<0>,487:95]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,489:39]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,489:74].[@-1,39:42='text',<0>,489:77]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,489:83].[@-1,56:56='p',<0>,489:94]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,60:69='list_index',<0>,489:98].[@-1,71:75='lista',<0>,489:109]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,79:80='id',<0>,489:117].[@-1,82:85='line',<0>,489:120]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate  $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) 
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,492:38]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,43:56='l_AccessStruct',<0>,492:79].[@-1,58:58='l',<0>,492:94]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,492:98].[@-1,73:73='p',<0>,492:109]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,77:90='l_AccessStruct',<0>,492:113].[@-1,92:96='start',<0>,492:128]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,109:122='l_AccessStruct',<0>,492:145].[@-1,124:128='start',<0>,492:160]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate $instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,496:76]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,39:40='id',<0>,496:114].[@-1,42:45='text',<0>,496:117]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,49:53='index',<0>,496:124].[@-1,55:55='p',<0>,496:130]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,59:72='l_AccessStruct',<0>,496:134].[@-1,74:74='l',<0>,496:149]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,78:80='val',<0>,496:153].[@-1,82:82='p',<0>,496:157]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,86:87='id',<0>,496:161].[@-1,89:92='line',<0>,496:164]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewAssignmentVecap($id.text, $expression.p, $id.line, $id.pos)
                
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,499:25]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,67:68='id',<0>,499:65].[@-1,70:73='text',<0>,499:68]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,77:86='expression',<0>,499:75].[@-1,88:88='p',<0>,499:86]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,92:93='id',<0>,499:90].[@-1,95:98='line',<0>,499:93]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,102:103='id',<0>,499:100].[@-1,105:107='pos',<0>,499:103]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
            $l = arrayList.New()
            $l.Add($ID.text)

2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,4:20].[@-1,59:62='text',<0>,4:23]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,48:51='list',<0>,9:46].[@-1,53:53='l',<0>,9:51]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,60:61='ID',<0>,9:58].[@-1,63:66='text',<0>,9:61]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,116:116='l',<0>,10:46]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 qattr [@-1,121:124='list',<0>,10:51].[@-1,126:126='l',<0>,10:56]
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:715 action-translator LogManager.java:25 translate 
    $lista = arrayList.New()

2023-09-04 03:09:06:715 action-translator LogManager.java:25 attr [@-1,7:11='lista',<0>,517:5]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate $lista.Add($index_array.index)
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,2:44]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,12:22='index_array',<0>,2:55].[@-1,24:28='index',<0>,2:67]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate 
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,51:55='listi',<0>,6:49].[@-1,57:61='lista',<0>,6:55]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,68:78='index_array',<0>,6:66].[@-1,80:84='index',<0>,6:78]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,137:141='lista',<0>,7:49]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,146:150='listi',<0>,7:58].[@-1,152:156='lista',<0>,7:64]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate $index = $expression.p
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,1:5='index',<0>,527:29]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,10:19='expression',<0>,527:38].[@-1,21:21='p',<0>,527:49]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,532:34]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,532:61].[@-1,39:39='p',<0>,532:72]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,43:53='bloque_inst',<0>,532:76].[@-1,55:55='l',<0>,532:88]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,68:69='IF',<0>,532:101].[@-1,71:74='line',<0>,532:104]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,533:69]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,533:96].[@-1,39:39='p',<0>,533:107]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,42:46='bprin',<0>,533:110].[@-1,48:48='l',<0>,533:116]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,55:59='belse',<0>,533:123].[@-1,61:61='l',<0>,533:129]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,65:66='IF',<0>,533:133].[@-1,68:71='line',<0>,533:136]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate 
        $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
    
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,535:9]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,38:47='expression',<0>,535:36].[@-1,49:49='p',<0>,535:47]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,52:56='bprin',<0>,535:50].[@-1,58:58='l',<0>,535:56]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,61:71='list_elseif',<0>,535:59].[@-1,73:77='lista',<0>,535:71]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,86:87='IF',<0>,535:84].[@-1,89:92='line',<0>,535:87]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate 
        $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
    
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,538:9]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,38:47='expression',<0>,538:36].[@-1,49:49='p',<0>,538:47]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,52:56='bprin',<0>,538:50].[@-1,58:58='l',<0>,538:56]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,61:71='list_elseif',<0>,538:59].[@-1,73:77='lista',<0>,538:71]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,81:85='belse',<0>,538:79].[@-1,87:87='l',<0>,538:85]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,91:92='IF',<0>,538:89].[@-1,94:97='line',<0>,538:92]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate $p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,544:69]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,29:38='expression',<0>,544:97].[@-1,40:40='p',<0>,544:108]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,59:60='IF',<0>,544:127].[@-1,62:65='line',<0>,544:130]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,123:129='bprin_e',<0>,544:191].[@-1,131:131='p',<0>,544:199]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,140:146='belse_e',<0>,544:208].[@-1,148:148='p',<0>,544:216]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate 
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,11:11='p',<0>,546:9]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,39:48='expression',<0>,546:37].[@-1,50:50='p',<0>,546:48]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,67:68='IF',<0>,546:65].[@-1,70:73='line',<0>,546:68]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,131:137='bprin_e',<0>,546:129].[@-1,139:139='p',<0>,546:137]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,143:157='list_elseif_exp',<0>,546:141].[@-1,159:163='lista',<0>,546:157]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,168:174='belse_e',<0>,546:166].[@-1,176:176='p',<0>,546:174]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,551:7]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate 
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,149:153='lista',<0>,555:25]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,561:7]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate 
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,153:157='lista',<0>,565:25]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,571:39]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,571:66].[@-1,39:39='p',<0>,571:77]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,42:52='bloque_inst',<0>,571:80].[@-1,54:54='l',<0>,571:92]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,66:69='ELSE',<0>,571:104].[@-1,71:74='line',<0>,571:109]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate $p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )
2023-09-04 03:09:06:731 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,575:38]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,29:38='expression',<0>,575:66].[@-1,40:40='p',<0>,575:77]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,56:59='ELSE',<0>,575:93].[@-1,61:64='line',<0>,575:98]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 qattr [@-1,129:138='bloque_exp',<0>,575:166].[@-1,140:140='p',<0>,575:177]
2023-09-04 03:09:06:731 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,588:25]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,588:60].[@-1,73:73='p',<0>,588:71]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,77:82='brazos',<0>,588:75].[@-1,84:91='l_brazos',<0>,588:82]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,105:110='SWITCH',<0>,588:103].[@-1,112:115='line',<0>,588:110]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,29:33='instr',<0>,591:27]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,591:62].[@-1,75:75='p',<0>,591:73]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,79:84='brazos',<0>,591:77].[@-1,86:93='l_brazos',<0>,591:84]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,97:107='bloque_inst',<0>,591:95].[@-1,109:109='l',<0>,591:107]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,118:123='SWITCH',<0>,591:116].[@-1,125:128='line',<0>,591:123]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_only.instr,  $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,29:33='instr',<0>,594:27]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,594:62].[@-1,75:75='p',<0>,594:73]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,79:84='brazos',<0>,594:77].[@-1,86:93='l_brazos',<0>,594:84]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,103:118='instruccion_only',<0>,594:101].[@-1,120:124='instr',<0>,594:118]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,129:134='SWITCH',<0>,594:127].[@-1,136:139='line',<0>,594:134]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), nil, true )
      
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,27:27='p',<0>,599:25]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,58:60='exp',<0>,599:56].[@-1,62:62='p',<0>,599:60]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,66:74='brazosexp',<0>,599:64].[@-1,76:83='l_brazos',<0>,599:74]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,97:102='SWITCH',<0>,599:95].[@-1,104:107='line',<0>,599:102]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Match_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,27:27='p',<0>,602:25]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,58:60='exp',<0>,602:56].[@-1,62:62='p',<0>,602:60]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,66:74='brazosexp',<0>,602:64].[@-1,76:83='l_brazos',<0>,602:74]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,99:104='SWITCH',<0>,602:97].[@-1,106:109='line',<0>,602:104]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,169:172='exp_',<0>,602:167].[@-1,174:174='p',<0>,602:172]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
    $l_brazos = arrayList.New()

2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,7:14='l_brazos',<0>,610:5]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate $l_brazos.Add($matchbrazo.brazo)
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,1:8='l_brazos',<0>,2:42]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,15:24='matchbrazo',<0>,2:56].[@-1,26:30='brazo',<0>,2:67]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,49:53='listb',<0>,6:47].[@-1,55:62='l_brazos',<0>,6:53]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,69:78='matchbrazo',<0>,6:67].[@-1,80:84='brazo',<0>,6:78]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,135:142='l_brazos',<0>,7:47]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,147:151='listb',<0>,7:59].[@-1,153:160='l_brazos',<0>,7:65]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
    $l_brazos = arrayList.New()

2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,7:14='l_brazos',<0>,621:5]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate $l_brazos.Add($matchbrazo_exp.brazo)
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,1:8='l_brazos',<0>,2:46]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,15:28='matchbrazo_exp',<0>,2:60].[@-1,30:34='brazo',<0>,2:75]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,49:53='listb',<0>,6:47].[@-1,55:62='l_brazos',<0>,6:53]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,69:82='matchbrazo_exp',<0>,6:67].[@-1,84:88='brazo',<0>,6:82]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,139:146='l_brazos',<0>,7:47]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,151:155='listb',<0>,7:59].[@-1,157:164='l_brazos',<0>,7:65]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) 
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,631:47]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,631:87].[@-1,56:60='lisop',<0>,631:101]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,64:74='bloque_inst',<0>,631:109].[@-1,76:76='l',<0>,631:121]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,85:86='th',<0>,631:130].[@-1,88:91='line',<0>,631:133]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_only.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) 
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,632:51]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,632:91].[@-1,56:60='lisop',<0>,632:105]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,70:85='instruccion_only',<0>,632:119].[@-1,87:91='instr',<0>,632:136]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,95:96='th',<0>,632:144].[@-1,98:101='line',<0>,632:147]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) 
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,639:45]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,639:85].[@-1,56:60='lisop',<0>,639:99]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,75:76='th',<0>,639:118].[@-1,78:81='line',<0>,639:121]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,140:149='expression',<0>,639:183].[@-1,151:151='p',<0>,639:194]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
    $lisop = arrayList.New()

2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,7:11='lisop',<0>,645:5]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
                    $lisop.Add( $primitivo.p )
                  
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,23:27='lisop',<0>,3:21]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,35:43='primitivo',<0>,3:33].[@-1,45:45='p',<0>,3:43]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate 
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,8:55].[@-1,62:66='lisop',<0>,8:60]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,74:82='primitivo',<0>,8:72].[@-1,84:84='p',<0>,8:82]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,144:148='lisop',<0>,9:55]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,154:157='list',<0>,9:65].[@-1,159:163='lisop',<0>,9:70]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate $l = $instrucciones.l 
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,657:41]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,6:18='instrucciones',<0>,657:46].[@-1,20:20='l',<0>,657:60]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate $l = arrayList.New()
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,658:27]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate $p = $expression.p
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,662:38]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,662:43].[@-1,17:17='p',<0>,662:54]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate $tipo = interfaces.INTEGER
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,668:16]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate $tipo = interfaces.STRING
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,669:17]
2023-09-04 03:09:06:747 action-translator LogManager.java:25 translate $tipo = interfaces.FLOAT
2023-09-04 03:09:06:747 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,670:15]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $tipo = interfaces.BOOLEAN
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,671:15]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $tipo = interfaces.STR
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,672:13]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $tipo = interfaces.STRUCT
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,673:14]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $tipo = interfaces.CHAR
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,674:14]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $tipo = interfaces.ARRAY
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,676:15]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $tipo = interfaces.VECTOR
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,677:16]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate  $tipo = interfaces.INTEGER 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,679:14]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = $expr_arit.p
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:44]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,2:49].[@-1,16:16='p',<0>,2:59]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate  $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:139]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,27:31='e_ini',<0>,5:164].[@-1,33:33='p',<0>,5:170]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,37:41='e_fin',<0>,5:174].[@-1,43:43='p',<0>,5:180]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,47:51='e_ini',<0>,5:184].[@-1,53:57='start',<0>,5:190]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,70:74='e_ini',<0>,5:207].[@-1,76:80='start',<0>,5:213]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate  $p = expresion.NewAbs($exp.p, $exp.start.GetLine(), $exp.start.GetColumn() ) 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:112]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,24:26='exp',<0>,6:134].[@-1,28:28='p',<0>,6:138]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,32:34='exp',<0>,6:142].[@-1,36:40='start',<0>,6:146]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,54:56='exp',<0>,6:164].[@-1,58:62='start',<0>,6:168]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:76]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,29:31='opU',<0>,2:104].[@-1,33:33='p',<0>,2:108]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,50:51='op',<0>,2:125].[@-1,53:56='line',<0>,2:128]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:73]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,29:31='opU',<0>,3:101].[@-1,33:33='p',<0>,3:105]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,50:51='op',<0>,3:122].[@-1,53:56='line',<0>,3:125]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = expresion.NewContains($ID.text, $val.p, $ID.line, $ID.pos  )
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,4:171]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,4:198].[@-1,31:34='text',<0>,4:201]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,38:40='val',<0>,4:208].[@-1,42:42='p',<0>,4:212]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,4:216].[@-1,49:52='line',<0>,4:219]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,4:226].[@-1,59:61='pos',<0>,4:229]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,5:74]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,5:101].[@-1,31:34='text',<0>,5:104]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,5:111].[@-1,41:44='line',<0>,5:114]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,5:121].[@-1,51:53='pos',<0>,5:124]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate  $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:170]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,32:34='exp',<0>,6:200].[@-1,36:36='p',<0>,6:204]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,40:42='tam',<0>,6:208].[@-1,44:44='p',<0>,6:212]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,51:56='CORIZQ',<0>,6:219].[@-1,58:61='line',<0>,6:226]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,65:70='CORIZQ',<0>,6:233].[@-1,72:74='pos',<0>,6:240]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate  $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:114]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,27:30='live',<0>,7:139].[@-1,32:34='l_e',<0>,7:144]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,51:56='CORIZQ',<0>,7:163].[@-1,58:61='line',<0>,7:170]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,65:70='CORIZQ',<0>,7:177].[@-1,72:74='pos',<0>,7:184]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate  $p = expresion.NewArray(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,8:149]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,31:33='exp',<0>,8:178].[@-1,35:35='p',<0>,8:182]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,39:41='tam',<0>,8:186].[@-1,43:43='p',<0>,8:190]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,50:55='CORIZQ',<0>,8:197].[@-1,57:60='line',<0>,8:204]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,64:69='CORIZQ',<0>,8:211].[@-1,71:73='pos',<0>,8:218]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate     $p = expresion.NewArray($listParams.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,5:5='p',<0>,9:91]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,29:38='listParams',<0>,9:115].[@-1,40:42='l_e',<0>,9:126]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,59:64='CORIZQ',<0>,9:145].[@-1,66:69='line',<0>,9:152]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,73:78='CORIZQ',<0>,9:159].[@-1,80:82='pos',<0>,9:166]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate  $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) 
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,10:113]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,10:150].[@-1,42:45='text',<0>,10:153]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,49:59='l_StructExp',<0>,10:160].[@-1,61:61='l',<0>,10:172]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,10:176].[@-1,68:71='line',<0>,10:179]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,75:76='ID',<0>,10:186].[@-1,78:80='pos',<0>,10:189]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = $primitivo.p
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,11:38]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,11:43].[@-1,16:16='p',<0>,11:53]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = $expression.p
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,12:87]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,12:92].[@-1,17:17='p',<0>,12:103]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = $casteo.p
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,13:35]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,6:11='casteo',<0>,13:40].[@-1,13:13='p',<0>,13:47]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 translate $p = $if_exp.p
2023-09-04 03:09:06:762 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,14:35]
2023-09-04 03:09:06:762 action-translator LogManager.java:25 qattr [@-1,6:11='if_exp',<0>,14:40].[@-1,13:13='p',<0>,14:47]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = $match_sent.p
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,15:39]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,6:15='match_sent',<0>,15:44].[@-1,17:17='p',<0>,15:55]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate  $p = $loopB.p 
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,16:35]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,7:11='loopB',<0>,16:40].[@-1,13:13='p',<0>,16:46]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = $callFunction.p
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,17:41]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,6:17='callFunction',<0>,17:46].[@-1,19:19='p',<0>,17:59]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = $callModulo.p
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,18:39]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,6:15='callModulo',<0>,18:44].[@-1,17:17='p',<0>,18:55]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate  $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,19:147]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,19:179].[@-1,37:40='text',<0>,19:182]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,44:53='expression',<0>,19:189].[@-1,55:55='p',<0>,19:200]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,19:204].[@-1,62:65='line',<0>,19:207]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,19:214].[@-1,72:74='pos',<0>,19:217]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,22:168]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,22:196].[@-1,34:34='p',<0>,22:201]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,22:204].[@-1,40:43='text',<0>,22:207]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,22:213].[@-1,51:51='p',<0>,22:218]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,22:228].[@-1,64:67='line',<0>,22:231]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,23:157]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,23:185].[@-1,34:34='p',<0>,23:190]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,23:193].[@-1,40:43='text',<0>,23:196]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,23:202].[@-1,51:51='p',<0>,23:207]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,23:217].[@-1,64:67='line',<0>,23:220]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,24:245]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,24:273].[@-1,34:34='p',<0>,24:278]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,24:281].[@-1,40:43='text',<0>,24:284]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,24:290].[@-1,51:51='p',<0>,24:295]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,24:305].[@-1,64:67='line',<0>,24:308]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,25:135]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,25:163].[@-1,34:34='p',<0>,25:168]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,25:171].[@-1,40:43='text',<0>,25:174]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,25:180].[@-1,51:51='p',<0>,25:185]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,25:195].[@-1,64:67='line',<0>,25:198]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,26:135]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,26:163].[@-1,34:34='p',<0>,26:168]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,26:171].[@-1,40:43='text',<0>,26:174]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,26:180].[@-1,51:51='p',<0>,26:185]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,26:195].[@-1,64:67='line',<0>,26:198]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = expresion.NewLen($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,27:113]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,23:26='opIz',<0>,27:135].[@-1,28:28='p',<0>,27:140]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,27:144].[@-1,37:41='start',<0>,27:149]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,55:58='opIz',<0>,27:167].[@-1,60:64='start',<0>,27:172]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate  $p = expresion.NewClone($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) 
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,28:116]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,26:29='opIz',<0>,28:140].[@-1,31:31='p',<0>,28:145]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,35:38='opIz',<0>,28:149].[@-1,40:44='start',<0>,28:154]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,58:61='opIz',<0>,28:172].[@-1,63:67='start',<0>,28:177]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate  $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) 
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,29:99]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,29:126].[@-1,34:34='p',<0>,29:131]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,38:41='opIz',<0>,29:135].[@-1,43:47='start',<0>,29:140]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,61:64='opIz',<0>,29:158].[@-1,66:70='start',<0>,29:163]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate  $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) 
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,30:98]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,30:125].[@-1,34:34='p',<0>,30:130]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,38:41='opIz',<0>,30:134].[@-1,43:47='start',<0>,30:139]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,61:64='opIz',<0>,30:157].[@-1,66:70='start',<0>,30:162]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,777:51]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,26:35='expression',<0>,777:76].[@-1,37:37='p',<0>,777:87]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,41:45='typec',<0>,777:91].[@-1,47:48='tc',<0>,777:97]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,52:57='PARIZQ',<0>,777:102].[@-1,59:62='line',<0>,777:109]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $tc = interfaces.FLOAT
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,781:13]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $tc = interfaces.INTEGER
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,782:14]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate $tc = interfaces.INTEGER
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,783:11]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate 
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,3:67].[@-1,72:75='text',<0>,3:70]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,3:77].[@-1,90:90='p',<0>,3:88]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 setAttr [@-1,115:115='l',<0>,4:21] [@-1,118:133=' arrayList.New()',<0>,4:24]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,158:158='l',<0>,5:21]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate 
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,99:100='ID',<0>,10:97].[@-1,102:105='text',<0>,10:100]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,109:118='expression',<0>,10:107].[@-1,120:120='p',<0>,10:118]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,175:178='list',<0>,11:51].[@-1,180:180='l',<0>,11:56]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 setAttr [@-1,247:247='l',<0>,12:51] [@-1,250:257=' $list.l',<0>,12:54]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate  $list.l
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,9:151].[@-1,7:7='l',<0>,9:156]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:778 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,801:38].[@-1,47:50='text',<0>,801:45]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 attr [@-1,155:155='p',<0>,805:13]
2023-09-04 03:09:06:778 action-translator LogManager.java:25 qattr [@-1,207:212='NUMBER',<0>,805:65].[@-1,214:217='line',<0>,805:72]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate 
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,47:51='FLOAT',<0>,808:45].[@-1,53:56='text',<0>,808:51]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,160:160='p',<0>,812:15]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,211:215='FLOAT',<0>,812:66].[@-1,217:220='line',<0>,812:72]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate $p = $strings.p
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,815:15]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,6:12='strings',<0>,815:20].[@-1,14:14='p',<0>,815:28]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate 
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,26:29='CHAR',<0>,818:24].[@-1,31:34='text',<0>,818:29]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,54:54='p',<0>,819:17]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,117:120='CHAR',<0>,819:80].[@-1,122:125='line',<0>,819:85]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,129:132='CHAR',<0>,819:92].[@-1,134:136='pos',<0>,819:97]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,824:14]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,55:58='TRUE',<0>,824:67].[@-1,60:63='line',<0>,824:72]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,825:14]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,56:60='FALSE',<0>,825:68].[@-1,62:65='line',<0>,825:74]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  $p = $list.p
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,826:25]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,826:30].[@-1,12:12='p',<0>,826:35]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate 
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,10:10='p',<0>,3:7]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,3:39].[@-1,45:48='text',<0>,3:42]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,3:49].[@-1,55:58='line',<0>,3:52]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:136]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,32:35='list',<0>,6:166].[@-1,37:37='p',<0>,6:171]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,6:175].[@-1,52:52='p',<0>,6:186]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,56:61='CORIZQ',<0>,6:190].[@-1,63:66='line',<0>,6:197]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,70:75='CORIZQ',<0>,6:204].[@-1,77:79='pos',<0>,6:211]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:111]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,33:36='list',<0>,7:142].[@-1,38:38='p',<0>,7:147]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,7:151].[@-1,45:48='text',<0>,7:154]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,52:55='list',<0>,7:161].[@-1,57:61='start',<0>,7:166]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,75:78='list',<0>,7:184].[@-1,80:84='start',<0>,7:189]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,838:13].[@-1,23:26='text',<0>,838:20]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,838:32].[@-1,42:45='text',<0>,838:39]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,839:7]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,107:112='STRING',<0>,839:55].[@-1,114:117='line',<0>,839:62]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,842:13].[@-1,23:26='text',<0>,842:20]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,842:32].[@-1,42:45='text',<0>,842:39]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,843:7]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,110:115='STRING',<0>,843:58].[@-1,117:120='line',<0>,843:65]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,846:13].[@-1,23:26='text',<0>,846:20]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,846:32].[@-1,42:45='text',<0>,846:39]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,847:7]
2023-09-04 03:09:06:794 action-translator LogManager.java:25 qattr [@-1,107:112='STRING',<0>,847:55].[@-1,114:117='line',<0>,847:62]
2023-09-04 03:09:07:825 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"

    import "Servidor1/modules"


2023-09-04 03:09:07:826 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"

    import "Servidor1/modules"


2023-09-04 03:09:08:018 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"

    import "Servidor1/modules"


2023-09-04 03:09:08:018 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"

    import "Servidor1/modules"


