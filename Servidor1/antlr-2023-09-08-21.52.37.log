2023-09-08 21:52:34:804 grammar LogManager.java:25 before: (PARSER_GRAMMAR swiftgrammar (OPTIONS (= tokenVocab swiftlexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"



}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT listaglobal {$lista = $listaglobal.lista}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    }))) (RULE listaglobal (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= lisfun listaglobal) in_global {
                                          $lisfun.lista.Add( $in_global.globals)
                                          $lista =  $lisfun.lista
                                        }) (ALT in_global { $lista.Add( $in_global.globals ) }))) (RULE in_global (returns  interfaces.Instruction globals ) (BLOCK (ALT funcion {$globals = $funcion.instr}) (ALT newStruct {$globals = $newStruct.str}))) (RULE modulo_item (returns interfaces.Instruction instr) (BLOCK (ALT funcion {$instr = $funcion.instr}) (ALT newStruct {$instr = $newStruct.str}))) (RULE funcion (returns  interfaces.Instruction  instr) (@ init { listParams :=  arrayList.New() }) (BLOCK (ALT fn_main {$instr =  $fn_main.instr}) (ALT FN ID '(' ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )}) (ALT FN ID '(' ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN (= id ID) '(' params_declar ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )}))) (RULE params_declar (returns *arrayList.List lista) (@ init {
$lista =  arrayList.New()
}) (BLOCK (ALT (= listdec params_declar) ',' declar_parametros {
                                                            $listdec.lista.Add($declar_parametros.in_dec)
                                                            $lista =  $listdec.lista }) (ALT declar_parametros {   $lista.Add($declar_parametros.in_dec) }))) (RULE declar_parametros (returns interfaces.Instruction in_dec) (BLOCK (ALT (= isVar es_var) ID ':' tipos_var {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isVar.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia '[' (= idob ID) ']' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $es_referencia.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia '[' tipos_var ']' {
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $es_referencia.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    }) (ALT ID ':' INOUT array_type {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia (= idstruct ID) { 
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $es_referencia.ref, $id.line, $id.pos)
                            $in_dec = decl
                        }) (ALT (= isRef es_var) (= id ID) ':' '[' (= idob ID) ']' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isRef.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }))) (RULE fn_main (returns interfaces.Instruction instr) (@ init { listParams:= arrayList.New() }) (BLOCK (ALT bloque_princip '.' { $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )}))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT appendVec {$instr = $appendVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT switch_sent {$instr = $switch_sent.instr}) (ALT while_true { $instr = $while_true.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT newStruct {$instr = $newStruct.str}) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT ID '.' REMOVE '(' AT ':' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE instruccion_dentro (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT appendVec {$instr = $appendVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT switch_sent {$instr = $switch_sent.instr}) (ALT while_true { $instr = $while_true.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT ID '.' REMOVE '(' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE appendVec (returns interfaces.Instruction instr) (BLOCK (ALT ID '.' APPEND '(' (= val expression) ')' {$instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' INSERT '(' (= val1 expression) ',' (= val2 expression) ')' { $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) }))) (RULE newStruct (returns interfaces.Instruction str) (BLOCK (ALT STRUCT ID LLAVEIZQ lista_struct LLAVEDER { $str = instructionExpre.NewStruct($ID.text, $lista_struct.l, $STRUCT.line, $STRUCT.pos) }))) (RULE lista_struct (returns *arrayList.List l) (BLOCK (ALT (= list lista_struct) MUT (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) MUT (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) LET (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) LET (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT MUT (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT MUT (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT LET (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT LET (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }))) (RULE callFunction (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT ID '(' ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    }) (ALT ID '(' listParamsCall ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    }))) (RULE returnFun (returns interfaces.Instruction instr) (BLOCK (ALT RETURN { $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )}) (ALT RETURN expression { $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )}))) (RULE printconsola (returns interfaces.Instruction instr) (BLOCK (ALT PRINT_CON PARIZQ listParams PARDER {$instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )}))) (RULE while_true (returns interfaces.Instruction lop, interfaces.Expresion p) (BLOCK (ALT WHILE TRUE bloque_inst { 
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos ) 
                    }))) (RULE lWhile (returns interfaces.Instruction lwh) (BLOCK (ALT WHILE expression bloque_inst { $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) }))) (RULE lForin (returns interfaces.Instruction lfor) (BLOCK (ALT FOR ID IN expression bloque_inst { $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) }))) (RULE lBreak (returns interfaces.Instruction br) (BLOCK (ALT BREAK { $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) }) (ALT BREAK expression { $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) }))) (RULE lContinue (returns interfaces.Instruction cn) (BLOCK (ALT CONTINUE { $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE listParams (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParams) ',' expression {
                                    $list.l_e.Add($expression.p)
                                    $l_e = $list.l_e
                                }) (ALT expression {$l_e.Add($expression.p)}))) (RULE listParamsCall (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParamsCall) ',' es_referencia expression {
                                    ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                    $list.l_e.Add(ref)
                                    $l_e = $list.l_e
                                }) (ALT es_referencia expression {   ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    }))) (RULE es_referencia (returns bool ref) (BLOCK (ALT AMP { $ref = true }) (ALT { $ref = false }))) (RULE declaracion (returns interfaces.Instruction instr) (BLOCK (ALT (= isVar es_varr) (= id ID) ':' tipos_var (= asig '=') expression { 
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      }) (ALT (= isVar es_varr) (= id ID) letid (= asig '=') expression { 
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    }) (ALT (= isVar es_varr) (= id ID) ':' vector_types '=' CORIZQ CORDER {
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos, nil, "")
                    }) (ALT (= isVar es_varr) (= id ID) ':' vector_types '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos,$expression.p, "")
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' (= idob ID) ']' '=' CORIZQ CORDER {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isVar.mut, $id.line, $id.pos, nil, $idob.text)
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' (= idob ID) ']' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isVar.mut, $id.line, $id.pos, $expression.p, $idob.text)
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' tipos_var ']' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isVar.mut, $id.line, $id.pos, $expression.p, "")
                    }))) (RULE es_var (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT EPSILON))) (RULE es_varr (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT LET { $mut = false }))) (RULE letid (returns ) (BLOCK (ALT ':' ID) (ALT EPSILON))) (RULE vector_types (returns interfaces.TipoExpresion tipo) (BLOCK (ALT '[' vector_types ']' { $tipo = interfaces.VECTOR }) (ALT '[' tipos_var ']' { $tipo = $tipos_var.tipo }))) (RULE array_type (returns *arrayList.List ty) (@ init {
    $ty = arrayList.New()
}) (BLOCK (ALT CORIZQ array_type ';' expression ']' {
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    }) (ALT CORIZQ tipos_var ';' expression ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }) (ALT CORIZQ tipos_var ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }))) (RULE asignacion (returns interfaces.Instruction instr) (BLOCK (ALT (= id ID) '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) list_index '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT l_AccessStruct '=' expression { $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) }) (ALT (= id ID) '[' (= index expression) ']' '.' l_AccessStruct '=' (= val expression) {$instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) '+=' expression {$instr = instruction.NewIncrement($id.text,$expression.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn())}))) (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list l_AccessStruct) '.' ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
            $l = arrayList.New()
            $l.Add($ID.text)
}))) (RULE list_index (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= listi list_index) index_array {
                                      $listi.lista.Add($index_array.index)
                                      $lista = $listi.lista
                                  }) (ALT index_array {$lista.Add($index_array.index)}))) (RULE index_array (returns interfaces.Expresion index) (BLOCK (ALT '[' expression ']' {$index = $expression.p}))) (RULE if_sent (returns interfaces.Instruction instr) (BLOCK (ALT IF expression bloque_inst {$instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif {$instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}))) (RULE if_exp (returns interfaces.Expresion p) (BLOCK (ALT IF expression (= bprin_e bloque_exp) ELSE (= belse_e bloque_exp) {$p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )}) (ALT IF expression (= bprin_e bloque_exp) list_elseif_exp ELSE (= belse_e bloque_exp) {
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    }))) (RULE list_elseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if)))) {
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    }))) (RULE list_elseif_exp (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if_exp)))) {
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT ELSE IF expression bloque_inst {$instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )}))) (RULE else_if_exp (returns interfaces.Expresion p) (BLOCK (ALT ELSE IF expression bloque_exp {$p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )}))) (RULE switch_sent (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) LLAVEDER {
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') bloque_inst LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') instruccion_dentro LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_dentro.instr,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, true )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) DEFAULT (= th ':') (= exp_ expression) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      }))) (RULE match_brazos (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos) matchbrazo {
                                    $listb.l_brazos.Add($matchbrazo.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo {$l_brazos.Add($matchbrazo.brazo)}))) (RULE match_brazos_exp (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos_exp) matchbrazo_exp {
                                    $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo_exp {$l_brazos.Add($matchbrazo_exp.brazo)}))) (RULE matchbrazo (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT CASE listaOpciones (= th ':') bloque_inst { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }) (ALT CASE listaOpciones (= th ':') instruccion_dentro { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_dentro.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }))) (RULE matchbrazo_exp (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT listaOpciones (= th ':') expression { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) }))) (RULE listaOpciones (returns *arrayList.List lisop) (@ init {
    $lisop = arrayList.New()
}) (BLOCK (ALT (= list listaOpciones) ',' primitivo {
                                            $list.lisop.Add( $primitivo.p )
                                            $lisop =  $list.lisop
                                          }) (ALT primitivo {
                    $lisop.Add( $primitivo.p )
                  }))) (RULE bloque_inst (returns  *arrayList.List  l) (BLOCK (ALT LLAVEIZQ instrucciones LLAVEDER {$l = $instrucciones.l }) (ALT LLAVEIZQ LLAVEDER {$l = arrayList.New()}))) (RULE bloque_princip (returns  *arrayList.List  l) (BLOCK (ALT instrucciones {$l = $instrucciones.l }) (ALT {$l = arrayList.New()}))) (RULE bloque_exp (returns interfaces.Expresion p) (BLOCK (ALT LLAVEIZQ expression LLAVEDER {$p = $expression.p}))) (RULE tipos_var (returns interfaces.TipoExpresion tipo) (BLOCK (ALT T_NUMBER (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.INTEGER}) (ALT T_STRING (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STRING}) (ALT T_FLOAT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.FLOAT}) (ALT T_BOOL (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.BOOLEAN}) (ALT T_STR (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STR}) (ALT STRUCT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STRUCT}) (ALT T_CHAT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.CHAR}) (ALT T_ARRAY (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.ARRAY}) (ALT T_VECTOR (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.VECTOR}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}) (ALT (= e_ini expression) '.' '.' '.' (= e_fin expression) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= op '-') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' COUNT {$p = expresion.NewCount($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '!='))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op '!') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '&&') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '||') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT T_STRING '(' (= opIz expr_arit) ')' { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT ID '.' CAPF {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT CORIZQ (= exp expression) ';' (= tam expression) CORDER { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT CORIZQ (= live listParams) CORDER { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ID PARIZQ l_StructExp PARDER { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}) (ALT casteo {$p = $casteo.p}) (ALT if_exp {$p = $if_exp.p}) (ALT switch_sent {$p = $switch_sent.p}) (ALT while_true { $p = $while_true.p }) (ALT callFunction {$p = $callFunction.p}) (ALT ID '.' REMOVE '(' expression ')' { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }) (ALT IN primitivo { $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) }))) (RULE casteo (returns interfaces.Expresion p) (BLOCK (ALT PARIZQ expression AS (= typec tipo_cast) PARDER {$p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )}))) (RULE tipo_cast (returns interfaces.TipoExpresion tc) (BLOCK (ALT T_FLOAT {$tc = interfaces.FLOAT}) (ALT T_NUMBER {$tc = interfaces.INTEGER}) (ALT USIZE {$tc = interfaces.INTEGER}))) (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (= list l_StructExp) COMA ID ':' expression {
                                        Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                        $list.l.Add(Str_ep);
                                        $l = $list.l;
                                    }) (ALT ID ':' expression {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      }) (ALT FLOAT {
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      }) (ALT strings {$p = $strings.p}) (ALT CHAR {
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                }) (ALT TRUE { $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())}) (ALT FALSE { $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())}) (ALT (= list listIDArray) { $p = $list.p}))) (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listIDArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (= list listIDArray) '.' ID { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }) (ALT ID { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )}))) (RULE strings (returns interfaces.Expresion p) (BLOCK (ALT (+ (BLOCK (ALT AMP))) 'String' '(' STRING ')' { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT 'String' '(' STRING ')' { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())})))))
2023-09-08 21:52:34:868 grammar LogManager.java:25 after: (PARSER_GRAMMAR swiftgrammar (OPTIONS (= tokenVocab swiftlexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"



}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT listaglobal {$lista = $listaglobal.lista}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    }))) (RULE listaglobal (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= lisfun listaglobal) in_global {
                                          $lisfun.lista.Add( $in_global.globals)
                                          $lista =  $lisfun.lista
                                        }) (ALT in_global { $lista.Add( $in_global.globals ) }))) (RULE in_global (returns  interfaces.Instruction globals ) (BLOCK (ALT funcion {$globals = $funcion.instr}) (ALT newStruct {$globals = $newStruct.str}))) (RULE modulo_item (returns interfaces.Instruction instr) (BLOCK (ALT funcion {$instr = $funcion.instr}) (ALT newStruct {$instr = $newStruct.str}))) (RULE funcion (returns  interfaces.Instruction  instr) (@ init { listParams :=  arrayList.New() }) (BLOCK (ALT fn_main {$instr =  $fn_main.instr}) (ALT FN ID '(' ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )}) (ALT FN ID '(' ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )}) (ALT FN ID '(' params_declar ')' '->' tipos_var bloque_inst { $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )}) (ALT FN (= id ID) '(' params_declar ')' '->' (= idob ID) bloque_inst { $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )}))) (RULE params_declar (returns *arrayList.List lista) (@ init {
$lista =  arrayList.New()
}) (BLOCK (ALT (= listdec params_declar) ',' declar_parametros {
                                                            $listdec.lista.Add($declar_parametros.in_dec)
                                                            $lista =  $listdec.lista }) (ALT declar_parametros {   $lista.Add($declar_parametros.in_dec) }))) (RULE declar_parametros (returns interfaces.Instruction in_dec) (BLOCK (ALT (= isVar es_var) ID ':' tipos_var {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isVar.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia '[' (= idob ID) ']' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $es_referencia.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia '[' tipos_var ']' {
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $es_referencia.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    }) (ALT ID ':' INOUT array_type {
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    }) (ALT (= id ID) ':' es_referencia (= idstruct ID) { 
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $es_referencia.ref, $id.line, $id.pos)
                            $in_dec = decl
                        }) (ALT (= isRef es_var) (= id ID) ':' '[' (= idob ID) ']' {
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isRef.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    }))) (RULE fn_main (returns interfaces.Instruction instr) (@ init { listParams:= arrayList.New() }) (BLOCK (ALT bloque_princip '.' { $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )}))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT appendVec {$instr = $appendVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT switch_sent {$instr = $switch_sent.instr}) (ALT while_true { $instr = $while_true.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT newStruct {$instr = $newStruct.str}) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT ID '.' REMOVE '(' AT ':' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE instruccion_dentro (returns interfaces.Instruction instr) (BLOCK (ALT printconsola {$instr = $printconsola.instr}) (ALT declaracion {$instr = $declaracion.instr}) (ALT asignacion {$instr = $asignacion.instr}) (ALT appendVec {$instr = $appendVec.instr}) (ALT if_sent {$instr = $if_sent.instr}) (ALT switch_sent {$instr = $switch_sent.instr}) (ALT while_true { $instr = $while_true.lop }) (ALT lWhile { $instr = $lWhile.lwh }) (ALT lForin { $instr = $lForin.lfor }) (ALT lBreak { $instr = $lBreak.br }) (ALT lContinue { $instr = $lContinue.cn }) (ALT callFunction {$instr = $callFunction.instr}) (ALT returnFun {$instr = $returnFun.instr}) (ALT ID '.' REMOVE '(' expression ')' { $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }))) (RULE appendVec (returns interfaces.Instruction instr) (BLOCK (ALT ID '.' APPEND '(' (= val expression) ')' {$instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )}) (ALT ID '.' INSERT '(' (= val1 expression) ',' (= val2 expression) ')' { $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) }))) (RULE newStruct (returns interfaces.Instruction str) (BLOCK (ALT STRUCT ID LLAVEIZQ lista_struct LLAVEDER { $str = instructionExpre.NewStruct($ID.text, $lista_struct.l, $STRUCT.line, $STRUCT.pos) }))) (RULE lista_struct (returns *arrayList.List l) (BLOCK (ALT (= list lista_struct) MUT (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) MUT (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) LET (= id ID) ':' tipos_var {
                                        Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT (= list lista_struct) LET (= id ID) ':' (= idstru ID) {
                                        Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                        $list.l.Add(Str_atrib);
                                        $l = $list.l;
                                    }) (ALT MUT (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT MUT (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT LET (= id ID) ':' tipos_var {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT LET (= id ID) ':' (= idstru ID) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }))) (RULE callFunction (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT ID '(' ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    }) (ALT ID '(' listParamsCall ')' {
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    }))) (RULE returnFun (returns interfaces.Instruction instr) (BLOCK (ALT RETURN { $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )}) (ALT RETURN expression { $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )}))) (RULE printconsola (returns interfaces.Instruction instr) (BLOCK (ALT PRINT_CON PARIZQ listParams PARDER {$instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )}))) (RULE while_true (returns interfaces.Instruction lop, interfaces.Expresion p) (BLOCK (ALT WHILE TRUE bloque_inst { 
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos ) 
                    }))) (RULE lWhile (returns interfaces.Instruction lwh) (BLOCK (ALT WHILE expression bloque_inst { $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) }))) (RULE lForin (returns interfaces.Instruction lfor) (BLOCK (ALT FOR ID IN expression bloque_inst { $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) }))) (RULE lBreak (returns interfaces.Instruction br) (BLOCK (ALT BREAK { $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) }) (ALT BREAK expression { $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) }))) (RULE lContinue (returns interfaces.Instruction cn) (BLOCK (ALT CONTINUE { $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE listParams (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParams) ',' expression {
                                    $list.l_e.Add($expression.p)
                                    $l_e = $list.l_e
                                }) (ALT expression {$l_e.Add($expression.p)}))) (RULE listParamsCall (returns *arrayList.List l_e) (@ init {
    $l_e = arrayList.New()
}) (BLOCK (ALT (= list listParamsCall) ',' es_referencia expression {
                                    ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                    $list.l_e.Add(ref)
                                    $l_e = $list.l_e
                                }) (ALT es_referencia expression {   ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    }))) (RULE es_referencia (returns bool ref) (BLOCK (ALT AMP { $ref = true }) (ALT { $ref = false }))) (RULE declaracion (returns interfaces.Instruction instr) (BLOCK (ALT (= isVar es_varr) (= id ID) ':' tipos_var (= asig '=') expression { 
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      }) (ALT (= isVar es_varr) (= id ID) letid (= asig '=') expression { 
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    }) (ALT (= isVar es_varr) (= id ID) ':' vector_types '=' CORIZQ CORDER {
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos, nil, "")
                    }) (ALT (= isVar es_varr) (= id ID) ':' vector_types '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos,$expression.p, "")
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' (= idob ID) ']' '=' CORIZQ CORDER {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isVar.mut, $id.line, $id.pos, nil, $idob.text)
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' (= idob ID) ']' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isVar.mut, $id.line, $id.pos, $expression.p, $idob.text)
                    }) (ALT (= isVar es_varr) (= id ID) ':' '[' tipos_var ']' '=' expression {
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isVar.mut, $id.line, $id.pos, $expression.p, "")
                    }))) (RULE es_var (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT EPSILON))) (RULE es_varr (returns bool mut) (BLOCK (ALT MUT { $mut = true }) (ALT LET { $mut = false }))) (RULE letid (returns ) (BLOCK (ALT ':' ID) (ALT EPSILON))) (RULE vector_types (returns interfaces.TipoExpresion tipo) (BLOCK (ALT '[' vector_types ']' { $tipo = interfaces.VECTOR }) (ALT '[' tipos_var ']' { $tipo = $tipos_var.tipo }))) (RULE array_type (returns *arrayList.List ty) (@ init {
    $ty = arrayList.New()
}) (BLOCK (ALT CORIZQ array_type ';' expression ']' {
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    }) (ALT CORIZQ tipos_var ';' expression ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }) (ALT CORIZQ tipos_var ']' {
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    }))) (RULE asignacion (returns interfaces.Instruction instr) (BLOCK (ALT (= id ID) '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) list_index '=' expression {$instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT l_AccessStruct '=' expression { $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) }) (ALT (= id ID) '[' (= index expression) ']' '.' l_AccessStruct '=' (= val expression) {$instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )}) (ALT (= id ID) '+=' expression {$instr = instruction.NewIncrement($id.text,$expression.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn())}))) (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list l_AccessStruct) '.' ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
            $l = arrayList.New()
            $l.Add($ID.text)
}))) (RULE list_index (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= listi list_index) index_array {
                                      $listi.lista.Add($index_array.index)
                                      $lista = $listi.lista
                                  }) (ALT index_array {$lista.Add($index_array.index)}))) (RULE index_array (returns interfaces.Expresion index) (BLOCK (ALT '[' expression ']' {$index = $expression.p}))) (RULE if_sent (returns interfaces.Instruction instr) (BLOCK (ALT IF expression bloque_inst {$instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif {$instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}) (ALT IF expression (= bprin bloque_inst) list_elseif ELSE (= belse bloque_inst) {$instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )}))) (RULE if_exp (returns interfaces.Expresion p) (BLOCK (ALT IF expression (= bprin_e bloque_exp) ELSE (= belse_e bloque_exp) {$p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )}) (ALT IF expression (= bprin_e bloque_exp) list_elseif_exp ELSE (= belse_e bloque_exp) {
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    }))) (RULE list_elseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if)))) {
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    }))) (RULE list_elseif_exp (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if_exp)))) {
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT ELSE IF expression bloque_inst {$instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )}))) (RULE else_if_exp (returns interfaces.Expresion p) (BLOCK (ALT ELSE IF expression bloque_exp {$p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )}))) (RULE switch_sent (returns interfaces.Instruction instr, interfaces.Expresion p) (BLOCK (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) LLAVEDER {
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') bloque_inst LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH expression LLAVEIZQ (= brazos match_brazos) DEFAULT (= th ':') instruccion_dentro LLAVEDER {
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_dentro.instr,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, true )
      }) (ALT SWITCH (= exp expression) LLAVEIZQ (= brazosexp match_brazos_exp) DEFAULT (= th ':') (= exp_ expression) LLAVEDER {
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      }))) (RULE match_brazos (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos) matchbrazo {
                                    $listb.l_brazos.Add($matchbrazo.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo {$l_brazos.Add($matchbrazo.brazo)}))) (RULE match_brazos_exp (returns *arrayList.List l_brazos) (@ init {
    $l_brazos = arrayList.New()
}) (BLOCK (ALT (= listb match_brazos_exp) matchbrazo_exp {
                                    $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                    $l_brazos = $listb.l_brazos
                                }) (ALT matchbrazo_exp {$l_brazos.Add($matchbrazo_exp.brazo)}))) (RULE matchbrazo (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT CASE listaOpciones (= th ':') bloque_inst { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }) (ALT CASE listaOpciones (= th ':') instruccion_dentro { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_dentro.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) }))) (RULE matchbrazo_exp (returns instructionExpre.BrazoMatch brazo) (BLOCK (ALT listaOpciones (= th ':') expression { $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) }))) (RULE listaOpciones (returns *arrayList.List lisop) (@ init {
    $lisop = arrayList.New()
}) (BLOCK (ALT (= list listaOpciones) ',' primitivo {
                                            $list.lisop.Add( $primitivo.p )
                                            $lisop =  $list.lisop
                                          }) (ALT primitivo {
                    $lisop.Add( $primitivo.p )
                  }))) (RULE bloque_inst (returns  *arrayList.List  l) (BLOCK (ALT LLAVEIZQ instrucciones LLAVEDER {$l = $instrucciones.l }) (ALT LLAVEIZQ LLAVEDER {$l = arrayList.New()}))) (RULE bloque_princip (returns  *arrayList.List  l) (BLOCK (ALT instrucciones {$l = $instrucciones.l }) (ALT {$l = arrayList.New()}))) (RULE bloque_exp (returns interfaces.Expresion p) (BLOCK (ALT LLAVEIZQ expression LLAVEDER {$p = $expression.p}))) (RULE tipos_var (returns interfaces.TipoExpresion tipo) (BLOCK (ALT T_NUMBER (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.INTEGER}) (ALT T_STRING (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STRING}) (ALT T_FLOAT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.FLOAT}) (ALT T_BOOL (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.BOOLEAN}) (ALT T_STR (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STR}) (ALT STRUCT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.STRUCT}) (ALT T_CHAT (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.CHAR}) (ALT T_ARRAY (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.ARRAY}) (ALT T_VECTOR (* (BLOCK (ALT INTERROG))) {$tipo = interfaces.VECTOR}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}) (ALT (= e_ini expression) '.' '.' '.' (= e_fin expression) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= op '-') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '*' '/' '%')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) '.' COUNT {$p = expresion.NewCount($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>' '>=' '==' '!=')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op '!') (= opU expr_arit) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '&&') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= opIz expr_arit) (= op '||') (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT T_STRING '(' (= opIz expr_arit) ')' { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT ID '.' CAPF {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT CORIZQ (= exp expression) ';' (= tam expression) CORDER { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT CORIZQ (= live listParams) CORDER { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ID PARIZQ l_StructExp PARDER { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}) (ALT casteo {$p = $casteo.p}) (ALT if_exp {$p = $if_exp.p}) (ALT switch_sent {$p = $switch_sent.p}) (ALT while_true { $p = $while_true.p }) (ALT callFunction {$p = $callFunction.p}) (ALT ID '.' REMOVE '(' expression ')' { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }) (ALT IN primitivo { $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) }))) (RULE casteo (returns interfaces.Expresion p) (BLOCK (ALT PARIZQ expression AS (= typec tipo_cast) PARDER {$p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )}))) (RULE tipo_cast (returns interfaces.TipoExpresion tc) (BLOCK (ALT T_FLOAT {$tc = interfaces.FLOAT}) (ALT T_NUMBER {$tc = interfaces.INTEGER}) (ALT USIZE {$tc = interfaces.INTEGER}))) (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (= list l_StructExp) COMA ID ':' expression {
                                        Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                        $list.l.Add(Str_ep);
                                        $l = $list.l;
                                    }) (ALT ID ':' expression {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      }) (ALT FLOAT {
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      }) (ALT strings {$p = $strings.p}) (ALT CHAR {
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                }) (ALT TRUE { $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())}) (ALT FALSE { $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())}) (ALT (= list listIDArray) { $p = $list.p}))) (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listIDArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (= list listIDArray) '.' ID { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }) (ALT ID { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )}))) (RULE strings (returns interfaces.Expresion p) (BLOCK (ALT (+ (BLOCK (ALT AMP))) 'String' '(' STRING ')' { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT 'String' '(' STRING ')' { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())}) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())})))))
2023-09-08 21:52:35:265 left-recursion LogManager.java:25 listaglobal returns [*arrayList.List lista]
    :   ( {} in_global<tokenIndex=87>     { $lista.Add( $in_global.globals ) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> in_global<tokenIndex=81>  {
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  }
        )*
    ;
2023-09-08 21:52:35:276 grammar LogManager.java:25 added: (RULE listaglobal (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (in_global (ELEMENT_OPTIONS (= tokenIndex 87))) { $lista.Add( $in_global.globals ) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (in_global (ELEMENT_OPTIONS (= tokenIndex 81))) {
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  }))))))
2023-09-08 21:52:35:277 left-recursion LogManager.java:25 params_declar returns [*arrayList.List lista]
    :   ( {} declar_parametros<tokenIndex=298> {   $lista.Add($declar_parametros.in_dec) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=290>  declar_parametros<tokenIndex=292>    {
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista }
        )*
    ;
2023-09-08 21:52:35:281 grammar LogManager.java:25 added: (RULE params_declar (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (declar_parametros (ELEMENT_OPTIONS (= tokenIndex 298))) {   $lista.Add($declar_parametros.in_dec) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 290))) (declar_parametros (ELEMENT_OPTIONS (= tokenIndex 292))) {
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista }))))))
2023-09-08 21:52:35:287 left-recursion LogManager.java:25 lista_struct returns [*arrayList.List l]
    :   ( {} MUT<tokenIndex=805> id=ID<tokenIndex=809> ':'<tokenIndex=811> tipos_var<tokenIndex=813> {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        | MUT<tokenIndex=819> id=ID<tokenIndex=823> ':'<tokenIndex=825> idstru=ID<tokenIndex=829> {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        | LET<tokenIndex=835> id=ID<tokenIndex=839> ':'<tokenIndex=841> tipos_var<tokenIndex=843> {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        | LET<tokenIndex=849> id=ID<tokenIndex=853> ':'<tokenIndex=855> idstru=ID<tokenIndex=859> {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> MUT<tokenIndex=733> id=ID<tokenIndex=737> ':'<tokenIndex=739> tipos_var<tokenIndex=741>  {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> MUT<tokenIndex=751> id=ID<tokenIndex=755> ':'<tokenIndex=757> idstru=ID<tokenIndex=761> {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> LET<tokenIndex=771> id=ID<tokenIndex=775> ':'<tokenIndex=777> tipos_var<tokenIndex=779>  {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> LET<tokenIndex=789> id=ID<tokenIndex=793> ':'<tokenIndex=795> idstru=ID<tokenIndex=799> {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }
        )*
    ;
2023-09-08 21:52:35:305 grammar LogManager.java:25 added: (RULE lista_struct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (MUT (ELEMENT_OPTIONS (= tokenIndex 805))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 809)))) (':' (ELEMENT_OPTIONS (= tokenIndex 811))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 813))) {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (MUT (ELEMENT_OPTIONS (= tokenIndex 819))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 823)))) (':' (ELEMENT_OPTIONS (= tokenIndex 825))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 829)))) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (LET (ELEMENT_OPTIONS (= tokenIndex 835))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 839)))) (':' (ELEMENT_OPTIONS (= tokenIndex 841))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 843))) {
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                }) (ALT (LET (ELEMENT_OPTIONS (= tokenIndex 849))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 853)))) (':' (ELEMENT_OPTIONS (= tokenIndex 855))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 859)))) {
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (MUT (ELEMENT_OPTIONS (= tokenIndex 733))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 737)))) (':' (ELEMENT_OPTIONS (= tokenIndex 739))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 741))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (MUT (ELEMENT_OPTIONS (= tokenIndex 751))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 755)))) (':' (ELEMENT_OPTIONS (= tokenIndex 757))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 761)))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (LET (ELEMENT_OPTIONS (= tokenIndex 771))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 775)))) (':' (ELEMENT_OPTIONS (= tokenIndex 777))) (tipos_var (ELEMENT_OPTIONS (= tokenIndex 779))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (LET (ELEMENT_OPTIONS (= tokenIndex 789))) (= id (ID (ELEMENT_OPTIONS (= tokenIndex 793)))) (':' (ELEMENT_OPTIONS (= tokenIndex 795))) (= idstru (ID (ELEMENT_OPTIONS (= tokenIndex 799)))) {
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              }))))))
2023-09-08 21:52:35:306 left-recursion LogManager.java:25 listParams returns [*arrayList.List l_e]
    :   ( {} expression<tokenIndex=1059> {$l_e.Add($expression.p)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=1051> expression<tokenIndex=1053>   {
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          }
        )*
    ;
2023-09-08 21:52:35:310 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l_e) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 1059))) {$l_e.Add($expression.p)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 1051))) (expression (ELEMENT_OPTIONS (= tokenIndex 1053))) {
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          }))))))
2023-09-08 21:52:35:311 left-recursion LogManager.java:25 listParamsCall returns [*arrayList.List l_e]
    :   ( {} es_referencia<tokenIndex=1093> expression<tokenIndex=1095>    {   ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=1083> es_referencia<tokenIndex=1085> expression<tokenIndex=1087>   {
                                              ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          }
        )*
    ;
2023-09-08 21:52:35:315 grammar LogManager.java:25 added: (RULE listParamsCall (returns *arrayList.List l_e) (BLOCK (ALT (BLOCK (ALT {} (es_referencia (ELEMENT_OPTIONS (= tokenIndex 1093))) (expression (ELEMENT_OPTIONS (= tokenIndex 1095))) {   ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 1083))) (es_referencia (ELEMENT_OPTIONS (= tokenIndex 1085))) (expression (ELEMENT_OPTIONS (= tokenIndex 1087))) {
                                              ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          }))))))
2023-09-08 21:52:35:316 left-recursion LogManager.java:25 l_AccessStruct returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=1541> {
            $l = arrayList.New()
            $l.Add($ID.text)
} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> '.'<tokenIndex=1533> ID<tokenIndex=1535> {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }
        )*
    ;
2023-09-08 21:52:35:320 grammar LogManager.java:25 added: (RULE l_AccessStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1541))) {
            $l = arrayList.New()
            $l.Add($ID.text)
})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) ('.' (ELEMENT_OPTIONS (= tokenIndex 1533))) (ID (ELEMENT_OPTIONS (= tokenIndex 1535))) {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }))))))
2023-09-08 21:52:35:321 left-recursion LogManager.java:25 list_index returns [*arrayList.List lista]
    :   ( {} index_array<tokenIndex=1570>  {$lista.Add($index_array.index)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> index_array<tokenIndex=1564> {
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            }
        )*
    ;
2023-09-08 21:52:35:324 grammar LogManager.java:25 added: (RULE list_index (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (index_array (ELEMENT_OPTIONS (= tokenIndex 1570))) {$lista.Add($index_array.index)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (index_array (ELEMENT_OPTIONS (= tokenIndex 1564))) {
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            }))))))
2023-09-08 21:52:35:325 left-recursion LogManager.java:25 match_brazos returns [*arrayList.List l_brazos]
    :   ( {} matchbrazo<tokenIndex=1975> {$l_brazos.Add($matchbrazo.brazo)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> matchbrazo<tokenIndex=1969>   {
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }
        )*
    ;
2023-09-08 21:52:35:331 grammar LogManager.java:25 added: (RULE match_brazos (returns *arrayList.List l_brazos) (BLOCK (ALT (BLOCK (ALT {} (matchbrazo (ELEMENT_OPTIONS (= tokenIndex 1975))) {$l_brazos.Add($matchbrazo.brazo)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (matchbrazo (ELEMENT_OPTIONS (= tokenIndex 1969))) {
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }))))))
2023-09-08 21:52:35:332 left-recursion LogManager.java:25 match_brazos_exp returns [*arrayList.List l_brazos]
    :   ( {} matchbrazo_exp<tokenIndex=2005> {$l_brazos.Add($matchbrazo_exp.brazo)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> matchbrazo_exp<tokenIndex=1999>   {
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }
        )*
    ;
2023-09-08 21:52:35:335 grammar LogManager.java:25 added: (RULE match_brazos_exp (returns *arrayList.List l_brazos) (BLOCK (ALT (BLOCK (ALT {} (matchbrazo_exp (ELEMENT_OPTIONS (= tokenIndex 2005))) {$l_brazos.Add($matchbrazo_exp.brazo)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (matchbrazo_exp (ELEMENT_OPTIONS (= tokenIndex 1999))) {
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          }))))))
2023-09-08 21:52:35:336 left-recursion LogManager.java:25 listaOpciones returns [*arrayList.List lisop]
    :   ( {} primitivo<tokenIndex=2097>   {
                    $lisop.Add( $primitivo.p )
                  } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=2089> primitivo<tokenIndex=2091>  {
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    }
        )*
    ;
2023-09-08 21:52:35:339 grammar LogManager.java:25 added: (RULE listaOpciones (returns *arrayList.List lisop) (BLOCK (ALT (BLOCK (ALT {} (primitivo (ELEMENT_OPTIONS (= tokenIndex 2097))) {
                    $lisop.Add( $primitivo.p )
                  })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 2089))) (primitivo (ELEMENT_OPTIONS (= tokenIndex 2091))) {
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    }))))))
2023-09-08 21:52:35:344 left-recursion LogManager.java:25 expression returns [interfaces.Expresion p]
    :   ( {} expr_arit<tokenIndex=2260>    {$p = $expr_arit.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 1)}?<p=1> '.'<tokenIndex=2274>'.'<tokenIndex=2275>'.'<tokenIndex=2276> e_fin=expression<tokenIndex=2280,p=2> { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }
        )*
    ;
2023-09-08 21:52:35:353 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2260))) {$p = $expr_arit.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 1)}? (ELEMENT_OPTIONS (= p 1))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2274))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2275))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2276))) (= e_fin (expression (ELEMENT_OPTIONS (= tokenIndex 2280) (= p 2)))) { $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) }))))))
2023-09-08 21:52:35:361 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} op='-'<tokenIndex=2295> opU = expr_arit<tokenIndex=2301,p=22> {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())} 
        | op='!'<tokenIndex=2415> opU = expr_arit<tokenIndex=2421,p=17> {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())} 
        | T_STRING<tokenIndex=2469> '('<tokenIndex=2471> opIz=expr_arit<tokenIndex=2475> ')'<tokenIndex=2477> { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) } 
        | ID<tokenIndex=2483> '.'<tokenIndex=2485> CAPF<tokenIndex=2487> {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )} 
        | CORIZQ<tokenIndex=2495> exp = expression<tokenIndex=2501> ';'<tokenIndex=2503> tam = expression<tokenIndex=2509> CORDER<tokenIndex=2511> { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) } 
        | CORIZQ<tokenIndex=2517> live=listParams<tokenIndex=2521> CORDER<tokenIndex=2523> { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) } 
        | ID<tokenIndex=2533> PARIZQ<tokenIndex=2535> l_StructExp<tokenIndex=2537> PARDER<tokenIndex=2539> { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) } 
        | primitivo<tokenIndex=2545> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=2551> expression<tokenIndex=2553> PARDER<tokenIndex=2555> {$p = $expression.p} 
        | casteo<tokenIndex=2561> {$p = $casteo.p} 
        | if_exp<tokenIndex=2567> {$p = $if_exp.p} 
        | switch_sent<tokenIndex=2573> {$p = $switch_sent.p} 
        | while_true<tokenIndex=2581> { $p = $while_true.p } 
        | callFunction<tokenIndex=2587> {$p = $callFunction.p} 
        | ID<tokenIndex=2595> '.'<tokenIndex=2597> REMOVE<tokenIndex=2599> '('<tokenIndex=2601> expression<tokenIndex=2603> ')'<tokenIndex=2605> { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) } 
        | IN<tokenIndex=2613> primitivo<tokenIndex=2615> { $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=('*'<tokenIndex=2322>|'/'<tokenIndex=2324>|'%'<tokenIndex=2326>) opDe = expr_arit<tokenIndex=2333,p=22> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=('+'<tokenIndex=2364>|'-'<tokenIndex=2366>) opDe = expr_arit<tokenIndex=2373,p=20> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=('<'<tokenIndex=2388>|'<='<tokenIndex=2390>|'>'<tokenIndex=2392>|'>='<tokenIndex=2394>|'=='<tokenIndex=2396>|'!='<tokenIndex=2398>) opDe = expr_arit<tokenIndex=2405,p=19> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op='&&'<tokenIndex=2437> opDe = expr_arit<tokenIndex=2443,p=17> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op='||'<tokenIndex=2457> opDe = expr_arit<tokenIndex=2463,p=16> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> '.'<tokenIndex=2347> COUNT<tokenIndex=2349> {$p = expresion.NewCount($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}
        )*
    ;
2023-09-08 21:52:35:391 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (= op ('-' (ELEMENT_OPTIONS (= tokenIndex 2295)))) (= opU (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2301) (= p 22)))) {$p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (= op ('!' (ELEMENT_OPTIONS (= tokenIndex 2415)))) (= opU (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2421) (= p 17)))) {$p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT (T_STRING (ELEMENT_OPTIONS (= tokenIndex 2469))) ('(' (ELEMENT_OPTIONS (= tokenIndex 2471))) (= opIz (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2475)))) (')' (ELEMENT_OPTIONS (= tokenIndex 2477))) { $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2483))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2485))) (CAPF (ELEMENT_OPTIONS (= tokenIndex 2487))) {$p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2495))) (= exp (expression (ELEMENT_OPTIONS (= tokenIndex 2501)))) (';' (ELEMENT_OPTIONS (= tokenIndex 2503))) (= tam (expression (ELEMENT_OPTIONS (= tokenIndex 2509)))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2511))) { $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2517))) (= live (listParams (ELEMENT_OPTIONS (= tokenIndex 2521)))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2523))) { $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2533))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2535))) (l_StructExp (ELEMENT_OPTIONS (= tokenIndex 2537))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2539))) { $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 2545))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2551))) (expression (ELEMENT_OPTIONS (= tokenIndex 2553))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2555))) {$p = $expression.p}) (ALT (casteo (ELEMENT_OPTIONS (= tokenIndex 2561))) {$p = $casteo.p}) (ALT (if_exp (ELEMENT_OPTIONS (= tokenIndex 2567))) {$p = $if_exp.p}) (ALT (switch_sent (ELEMENT_OPTIONS (= tokenIndex 2573))) {$p = $switch_sent.p}) (ALT (while_true (ELEMENT_OPTIONS (= tokenIndex 2581))) { $p = $while_true.p }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2587))) {$p = $callFunction.p}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2595))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2597))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2599))) ('(' (ELEMENT_OPTIONS (= tokenIndex 2601))) (expression (ELEMENT_OPTIONS (= tokenIndex 2603))) (')' (ELEMENT_OPTIONS (= tokenIndex 2605))) { $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) }) (ALT (IN (ELEMENT_OPTIONS (= tokenIndex 2613))) (primitivo (ELEMENT_OPTIONS (= tokenIndex 2615))) { $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 2322))) ('/' (ELEMENT_OPTIONS (= tokenIndex 2324))) ('%' (ELEMENT_OPTIONS (= tokenIndex 2326))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2333) (= p 22)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 2364))) ('-' (ELEMENT_OPTIONS (= tokenIndex 2366))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2373) (= p 20)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 2388))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 2390))) ('>' (ELEMENT_OPTIONS (= tokenIndex 2392))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 2394))) ('==' (ELEMENT_OPTIONS (= tokenIndex 2396))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 2398))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2405) (= p 19)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op ('&&' (ELEMENT_OPTIONS (= tokenIndex 2437)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2443) (= p 17)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op ('||' (ELEMENT_OPTIONS (= tokenIndex 2457)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2463) (= p 16)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2347))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 2349))) {$p = expresion.NewCount($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )}))))))
2023-09-08 21:52:35:392 left-recursion LogManager.java:25 l_StructExp returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2696> ':'<tokenIndex=2698> expression<tokenIndex=2700>{
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2684> ID<tokenIndex=2686> ':'<tokenIndex=2688> expression<tokenIndex=2690> {
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              }
        )*
    ;
2023-09-08 21:52:35:398 grammar LogManager.java:25 added: (RULE l_StructExp (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2696))) (':' (ELEMENT_OPTIONS (= tokenIndex 2698))) (expression (ELEMENT_OPTIONS (= tokenIndex 2700))) {
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2684))) (ID (ELEMENT_OPTIONS (= tokenIndex 2686))) (':' (ELEMENT_OPTIONS (= tokenIndex 2688))) (expression (ELEMENT_OPTIONS (= tokenIndex 2690))) {
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              }))))))
2023-09-08 21:52:35:405 left-recursion LogManager.java:25 listIDArray returns [interfaces.Expresion p]
    :   ( {} ID<tokenIndex=2794> { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=2770> expression<tokenIndex=2772> CORDER<tokenIndex=2774> { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> '.'<tokenIndex=2786> ID<tokenIndex=2788> { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }
        )*
    ;
2023-09-08 21:52:35:417 grammar LogManager.java:25 added: (RULE listIDArray (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2794))) { 
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2770))) (expression (ELEMENT_OPTIONS (= tokenIndex 2772))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2774))) { $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) ('.' (ELEMENT_OPTIONS (= tokenIndex 2786))) (ID (ELEMENT_OPTIONS (= tokenIndex 2788))) { $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  }))))))
2023-09-08 21:52:35:505 grammar LogManager.java:25 import PRINT_CON=1
2023-09-08 21:52:35:505 grammar LogManager.java:25 import T_NUMBER=2
2023-09-08 21:52:35:505 grammar LogManager.java:25 import T_FLOAT=3
2023-09-08 21:52:35:505 grammar LogManager.java:25 import T_STRING=4
2023-09-08 21:52:35:505 grammar LogManager.java:25 import T_BOOL=5
2023-09-08 21:52:35:506 grammar LogManager.java:25 import T_STR=6
2023-09-08 21:52:35:506 grammar LogManager.java:25 import T_CHAT=7
2023-09-08 21:52:35:506 grammar LogManager.java:25 import T_ARRAY=8
2023-09-08 21:52:35:506 grammar LogManager.java:25 import T_VECTOR=9
2023-09-08 21:52:35:506 grammar LogManager.java:25 import USIZE=10
2023-09-08 21:52:35:506 grammar LogManager.java:25 import IF=11
2023-09-08 21:52:35:506 grammar LogManager.java:25 import ELSE=12
2023-09-08 21:52:35:506 grammar LogManager.java:25 import WHILE=13
2023-09-08 21:52:35:506 grammar LogManager.java:25 import FOR=14
2023-09-08 21:52:35:506 grammar LogManager.java:25 import IN=15
2023-09-08 21:52:35:507 grammar LogManager.java:25 import BREAK=16
2023-09-08 21:52:35:507 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 21:52:35:507 grammar LogManager.java:25 import SWITCH=18
2023-09-08 21:52:35:507 grammar LogManager.java:25 import MTOR=19
2023-09-08 21:52:35:507 grammar LogManager.java:25 import CASE=20
2023-09-08 21:52:35:507 grammar LogManager.java:25 import DEFAULT=21
2023-09-08 21:52:35:507 grammar LogManager.java:25 import TRUE=22
2023-09-08 21:52:35:507 grammar LogManager.java:25 import FALSE=23
2023-09-08 21:52:35:508 grammar LogManager.java:25 import AS=24
2023-09-08 21:52:35:508 grammar LogManager.java:25 import AT=25
2023-09-08 21:52:35:508 grammar LogManager.java:25 import LET=26
2023-09-08 21:52:35:508 grammar LogManager.java:25 import MUT=27
2023-09-08 21:52:35:508 grammar LogManager.java:25 import STRUCT=28
2023-09-08 21:52:35:508 grammar LogManager.java:25 import COUNT=29
2023-09-08 21:52:35:508 grammar LogManager.java:25 import NEW=30
2023-09-08 21:52:35:508 grammar LogManager.java:25 import CAPF=31
2023-09-08 21:52:35:508 grammar LogManager.java:25 import APPEND=32
2023-09-08 21:52:35:508 grammar LogManager.java:25 import INSERT=33
2023-09-08 21:52:35:508 grammar LogManager.java:25 import REMOVE=34
2023-09-08 21:52:35:508 grammar LogManager.java:25 import MODULO=35
2023-09-08 21:52:35:508 grammar LogManager.java:25 import TYPETHEN=36
2023-09-08 21:52:35:508 grammar LogManager.java:25 import FN=37
2023-09-08 21:52:35:508 grammar LogManager.java:25 import RETURN=38
2023-09-08 21:52:35:508 grammar LogManager.java:25 import NUMBER=39
2023-09-08 21:52:35:508 grammar LogManager.java:25 import FLOAT=40
2023-09-08 21:52:35:508 grammar LogManager.java:25 import STRING=41
2023-09-08 21:52:35:508 grammar LogManager.java:25 import PUNTO=42
2023-09-08 21:52:35:508 grammar LogManager.java:25 import COMA=43
2023-09-08 21:52:35:509 grammar LogManager.java:25 import PTCOMA=44
2023-09-08 21:52:35:509 grammar LogManager.java:25 import DOSPUNTO=45
2023-09-08 21:52:35:509 grammar LogManager.java:25 import DPUNTO2=46
2023-09-08 21:52:35:510 grammar LogManager.java:25 import ASIGNACION=47
2023-09-08 21:52:35:510 grammar LogManager.java:25 import MTHEN=48
2023-09-08 21:52:35:510 grammar LogManager.java:25 import GUIONB=49
2023-09-08 21:52:35:510 grammar LogManager.java:25 import ID=50
2023-09-08 21:52:35:510 grammar LogManager.java:25 import DISTINTO=51
2023-09-08 21:52:35:510 grammar LogManager.java:25 import IGUAL=52
2023-09-08 21:52:35:510 grammar LogManager.java:25 import MAYORIGUAL=53
2023-09-08 21:52:35:510 grammar LogManager.java:25 import MENORIGUAL=54
2023-09-08 21:52:35:510 grammar LogManager.java:25 import MAYOR=55
2023-09-08 21:52:35:510 grammar LogManager.java:25 import MENOR=56
2023-09-08 21:52:35:510 grammar LogManager.java:25 import ASIG=57
2023-09-08 21:52:35:510 grammar LogManager.java:25 import MUL=58
2023-09-08 21:52:35:511 grammar LogManager.java:25 import DIV=59
2023-09-08 21:52:35:511 grammar LogManager.java:25 import ADD=60
2023-09-08 21:52:35:511 grammar LogManager.java:25 import SUB=61
2023-09-08 21:52:35:511 grammar LogManager.java:25 import MOD=62
2023-09-08 21:52:35:511 grammar LogManager.java:25 import AND=63
2023-09-08 21:52:35:511 grammar LogManager.java:25 import OR=64
2023-09-08 21:52:35:511 grammar LogManager.java:25 import NOT=65
2023-09-08 21:52:35:511 grammar LogManager.java:25 import INTERROG=66
2023-09-08 21:52:35:511 grammar LogManager.java:25 import AMP=67
2023-09-08 21:52:35:511 grammar LogManager.java:25 import INOUT=68
2023-09-08 21:52:35:511 grammar LogManager.java:25 import PARIZQ=69
2023-09-08 21:52:35:511 grammar LogManager.java:25 import PARDER=70
2023-09-08 21:52:35:511 grammar LogManager.java:25 import LLAVEIZQ=71
2023-09-08 21:52:35:511 grammar LogManager.java:25 import LLAVEDER=72
2023-09-08 21:52:35:513 grammar LogManager.java:25 import CORIZQ=73
2023-09-08 21:52:35:513 grammar LogManager.java:25 import CORDER=74
2023-09-08 21:52:35:513 grammar LogManager.java:25 import CHAR=75
2023-09-08 21:52:35:513 grammar LogManager.java:25 import WHITESPACE=76
2023-09-08 21:52:35:513 grammar LogManager.java:25 import L_COMMENT=77
2023-09-08 21:52:35:513 grammar LogManager.java:25 import COMMENT=78
2023-09-08 21:52:35:513 grammar LogManager.java:25 import 'print'=1
2023-09-08 21:52:35:513 grammar LogManager.java:25 import 'Int'=2
2023-09-08 21:52:35:513 grammar LogManager.java:25 import 'Float'=3
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'String'=4
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'Bool'=5
2023-09-08 21:52:35:514 grammar LogManager.java:25 import ' String'=6
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'Character'=7
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'array'=8
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'Vector'=9
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'usize'=10
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'if'=11
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'else'=12
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'while'=13
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'for'=14
2023-09-08 21:52:35:514 grammar LogManager.java:25 import 'in'=15
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'break'=16
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'continue'=17
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'switch'=18
2023-09-08 21:52:35:515 grammar LogManager.java:25 import '|'=19
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'case'=20
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'default'=21
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'true'=22
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'false'=23
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'as'=24
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'at'=25
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'let'=26
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'var'=27
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'struct'=28
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'count'=29
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'new()'=30
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'capacity()'=31
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'append'=32
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'insert'=33
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'remove'=34
2023-09-08 21:52:35:515 grammar LogManager.java:25 import 'mod'=35
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '->'=36
2023-09-08 21:52:35:516 grammar LogManager.java:25 import 'func'=37
2023-09-08 21:52:35:516 grammar LogManager.java:25 import 'return'=38
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '.'=42
2023-09-08 21:52:35:516 grammar LogManager.java:25 import ','=43
2023-09-08 21:52:35:516 grammar LogManager.java:25 import ';'=44
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '::'=45
2023-09-08 21:52:35:516 grammar LogManager.java:25 import ':'=46
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '='=47
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '=>'=48
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '_'=49
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '!='=51
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '=='=52
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '>='=53
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '<='=54
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '>'=55
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '<'=56
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '+='=57
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '*'=58
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '/'=59
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '+'=60
2023-09-08 21:52:35:516 grammar LogManager.java:25 import '-'=61
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '%'=62
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '&&'=63
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '||'=64
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '!'=65
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '?'=66
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '&'=67
2023-09-08 21:52:35:517 grammar LogManager.java:25 import 'inout'=68
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '('=69
2023-09-08 21:52:35:517 grammar LogManager.java:25 import ')'=70
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '{'=71
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '}'=72
2023-09-08 21:52:35:517 grammar LogManager.java:25 import '['=73
2023-09-08 21:52:35:517 grammar LogManager.java:25 import ']'=74
2023-09-08 21:52:35:521 grammar LogManager.java:25 tokens={PRINT_CON=1, T_NUMBER=2, T_FLOAT=3, T_STRING=4, T_BOOL=5, T_STR=6, T_CHAT=7, T_ARRAY=8, T_VECTOR=9, USIZE=10, IF=11, ELSE=12, WHILE=13, FOR=14, IN=15, BREAK=16, CONTINUE=17, SWITCH=18, MTOR=19, CASE=20, DEFAULT=21, TRUE=22, FALSE=23, AS=24, AT=25, LET=26, MUT=27, STRUCT=28, COUNT=29, NEW=30, CAPF=31, APPEND=32, INSERT=33, REMOVE=34, MODULO=35, TYPETHEN=36, FN=37, RETURN=38, NUMBER=39, FLOAT=40, STRING=41, PUNTO=42, COMA=43, PTCOMA=44, DOSPUNTO=45, DPUNTO2=46, ASIGNACION=47, MTHEN=48, GUIONB=49, ID=50, DISTINTO=51, IGUAL=52, MAYORIGUAL=53, MENORIGUAL=54, MAYOR=55, MENOR=56, ASIG=57, MUL=58, DIV=59, ADD=60, SUB=61, MOD=62, AND=63, OR=64, NOT=65, INTERROG=66, AMP=67, INOUT=68, PARIZQ=69, PARDER=70, LLAVEIZQ=71, LLAVEDER=72, CORIZQ=73, CORDER=74, CHAR=75, WHITESPACE=76, L_COMMENT=77, COMMENT=78, 'print'=1, 'Int'=2, 'Float'=3, 'String'=4, 'Bool'=5, ' String'=6, 'Character'=7, 'array'=8, 'Vector'=9, 'usize'=10, 'if'=11, 'else'=12, 'while'=13, 'for'=14, 'in'=15, 'break'=16, 'continue'=17, 'switch'=18, '|'=19, 'case'=20, 'default'=21, 'true'=22, 'false'=23, 'as'=24, 'at'=25, 'let'=26, 'var'=27, 'struct'=28, 'count'=29, 'new()'=30, 'capacity()'=31, 'append'=32, 'insert'=33, 'remove'=34, 'mod'=35, '->'=36, 'func'=37, 'return'=38, '.'=42, ','=43, ';'=44, '::'=45, ':'=46, '='=47, '=>'=48, '_'=49, '!='=51, '=='=52, '>='=53, '<='=54, '>'=55, '<'=56, '+='=57, '*'=58, '/'=59, '+'=60, '-'=61, '%'=62, '&&'=63, '||'=64, '!'=65, '?'=66, '&'=67, 'inout'=68, '('=69, ')'=70, '{'=71, '}'=72, '['=73, ']'=74}
2023-09-08 21:52:35:526 semantics LogManager.java:25 tokens={EOF=-1, PRINT_CON=1, T_NUMBER=2, T_FLOAT=3, T_STRING=4, T_BOOL=5, T_STR=6, T_CHAT=7, T_ARRAY=8, T_VECTOR=9, USIZE=10, IF=11, ELSE=12, WHILE=13, FOR=14, IN=15, BREAK=16, CONTINUE=17, SWITCH=18, MTOR=19, CASE=20, DEFAULT=21, TRUE=22, FALSE=23, AS=24, AT=25, LET=26, MUT=27, STRUCT=28, COUNT=29, NEW=30, CAPF=31, APPEND=32, INSERT=33, REMOVE=34, MODULO=35, TYPETHEN=36, FN=37, RETURN=38, NUMBER=39, FLOAT=40, STRING=41, PUNTO=42, COMA=43, PTCOMA=44, DOSPUNTO=45, DPUNTO2=46, ASIGNACION=47, MTHEN=48, GUIONB=49, ID=50, DISTINTO=51, IGUAL=52, MAYORIGUAL=53, MENORIGUAL=54, MAYOR=55, MENOR=56, ASIG=57, MUL=58, DIV=59, ADD=60, SUB=61, MOD=62, AND=63, OR=64, NOT=65, INTERROG=66, AMP=67, INOUT=68, PARIZQ=69, PARDER=70, LLAVEIZQ=71, LLAVEDER=72, CORIZQ=73, CORDER=74, CHAR=75, WHITESPACE=76, L_COMMENT=77, COMMENT=78}
2023-09-08 21:52:35:526 semantics LogManager.java:25 strings={'print'=1, 'Int'=2, 'Float'=3, 'String'=4, 'Bool'=5, ' String'=6, 'Character'=7, 'array'=8, 'Vector'=9, 'usize'=10, 'if'=11, 'else'=12, 'while'=13, 'for'=14, 'in'=15, 'break'=16, 'continue'=17, 'switch'=18, '|'=19, 'case'=20, 'default'=21, 'true'=22, 'false'=23, 'as'=24, 'at'=25, 'let'=26, 'var'=27, 'struct'=28, 'count'=29, 'new()'=30, 'capacity()'=31, 'append'=32, 'insert'=33, 'remove'=34, 'mod'=35, '->'=36, 'func'=37, 'return'=38, '.'=42, ','=43, ';'=44, '::'=45, ':'=46, '='=47, '=>'=48, '_'=49, '!='=51, '=='=52, '>='=53, '<='=54, '>'=55, '<'=56, '+='=57, '*'=58, '/'=59, '+'=60, '-'=61, '%'=62, '&&'=63, '||'=64, '!'=65, '?'=66, '&'=67, 'inout'=68, '('=69, ')'=70, '{'=71, '}'=72, '['=73, ']'=74}
2023-09-08 21:52:35:677 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2023-09-08 21:52:35:678 LL1 LogManager.java:25 look=[{1, 11, 13..14, 16..18, 26..28, 38, 50}, {42, 72}]
2023-09-08 21:52:35:678 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:679 LL1 LogManager.java:25 
DECISION 1 in rule listaglobal
2023-09-08 21:52:35:679 LL1 LogManager.java:25 look=[null, <EOF>]
2023-09-08 21:52:35:679 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:679 LL1 LogManager.java:25 
DECISION 2 in rule in_global
2023-09-08 21:52:35:679 LL1 LogManager.java:25 look=[{1, 11, 13..14, 16..18, 26..28, 37..38, 42, 50}, 28]
2023-09-08 21:52:35:680 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:680 LL1 LogManager.java:25 
DECISION 3 in rule modulo_item
2023-09-08 21:52:35:680 LL1 LogManager.java:25 look=[{1, 11, 13..14, 16..18, 26..28, 37..38, 42, 50}, 28]
2023-09-08 21:52:35:680 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:680 LL1 LogManager.java:25 
DECISION 4 in rule funcion
2023-09-08 21:52:35:681 LL1 LogManager.java:25 look=[{1, 11, 13..14, 16..18, 26..28, 38, 42, 50}, 37, 37, 37, 37, 37, 37]
2023-09-08 21:52:35:681 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:681 LL1 LogManager.java:25 
DECISION 5 in rule params_declar
2023-09-08 21:52:35:681 LL1 LogManager.java:25 look=[null, 70]
2023-09-08 21:52:35:681 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:681 LL1 LogManager.java:25 
DECISION 6 in rule declar_parametros
2023-09-08 21:52:35:681 LL1 LogManager.java:25 look=[{27, 50}, 50, 50, 50, 50, {27, 50}]
2023-09-08 21:52:35:681 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:681 LL1 LogManager.java:25 
DECISION 7 in rule instruccion
2023-09-08 21:52:35:683 LL1 LogManager.java:25 look=[1, {26..27}, 50, 50, 11, 18, 13, 13, 14, 16, 17, 28, 50, 38, 50]
2023-09-08 21:52:35:683 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:683 LL1 LogManager.java:25 
DECISION 8 in rule instruccion_dentro
2023-09-08 21:52:35:683 LL1 LogManager.java:25 look=[1, {26..27}, 50, 50, 11, 18, 13, 13, 14, 16, 17, 50, 38, 50]
2023-09-08 21:52:35:683 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:683 LL1 LogManager.java:25 
DECISION 9 in rule appendVec
2023-09-08 21:52:35:684 LL1 LogManager.java:25 look=[50, 50]
2023-09-08 21:52:35:684 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:684 LL1 LogManager.java:25 
DECISION 10 in rule lista_struct
2023-09-08 21:52:35:684 LL1 LogManager.java:25 look=[27, 27, 26, 26]
2023-09-08 21:52:35:684 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:684 LL1 LogManager.java:25 
DECISION 11 in rule lista_struct
2023-09-08 21:52:35:684 LL1 LogManager.java:25 look=[null, null, null, null]
2023-09-08 21:52:35:684 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:684 LL1 LogManager.java:25 
DECISION 12 in rule lista_struct
2023-09-08 21:52:35:684 LL1 LogManager.java:25 look=[null, 72]
2023-09-08 21:52:35:684 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:684 LL1 LogManager.java:25 
DECISION 13 in rule callFunction
2023-09-08 21:52:35:684 LL1 LogManager.java:25 look=[50, 50]
2023-09-08 21:52:35:684 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:684 LL1 LogManager.java:25 
DECISION 14 in rule returnFun
2023-09-08 21:52:35:684 LL1 LogManager.java:25 look=[38, 38]
2023-09-08 21:52:35:684 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:684 LL1 LogManager.java:25 
DECISION 15 in rule lBreak
2023-09-08 21:52:35:684 LL1 LogManager.java:25 look=[16, 16]
2023-09-08 21:52:35:684 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:684 LL1 LogManager.java:25 
DECISION 16 in rule listParams
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[null, {70, 74}]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 17 in rule listParamsCall
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[null, 70]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 18 in rule es_referencia
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[67, {4, 11, 13, 15, 18, 22..23, 39..41, 50, 61, 65, 67, 69, 73, 75}]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 19 in rule declaracion
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[{26..27}, {26..27}, {26..27}, {26..27}, {26..27}, {26..27}, {26..27}]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 20 in rule es_var
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[27, 50]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 21 in rule es_varr
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[27, 26]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 22 in rule letid
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[46, 47]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 23 in rule vector_types
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[73, 73]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 24 in rule array_type
2023-09-08 21:52:35:685 LL1 LogManager.java:25 look=[73, 73, 73]
2023-09-08 21:52:35:685 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:685 LL1 LogManager.java:25 
DECISION 25 in rule asignacion
2023-09-08 21:52:35:686 LL1 LogManager.java:25 look=[50, 50, 50, 50, 50]
2023-09-08 21:52:35:686 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:686 LL1 LogManager.java:25 
DECISION 26 in rule l_AccessStruct
2023-09-08 21:52:35:686 LL1 LogManager.java:25 look=[null, 47]
2023-09-08 21:52:35:686 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:686 LL1 LogManager.java:25 
DECISION 27 in rule list_index
2023-09-08 21:52:35:686 LL1 LogManager.java:25 look=[null, 47]
2023-09-08 21:52:35:686 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:686 LL1 LogManager.java:25 
DECISION 28 in rule if_sent
2023-09-08 21:52:35:686 LL1 LogManager.java:25 look=[11, 11, 11, 11]
2023-09-08 21:52:35:686 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:686 LL1 LogManager.java:25 
DECISION 29 in rule if_exp
2023-09-08 21:52:35:686 LL1 LogManager.java:25 look=[11, 11]
2023-09-08 21:52:35:686 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:686 LL1 LogManager.java:25 
DECISION 30 in rule list_elseif
2023-09-08 21:52:35:686 LL1 LogManager.java:25 look=[12, null]
2023-09-08 21:52:35:687 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:687 LL1 LogManager.java:25 
DECISION 31 in rule list_elseif_exp
2023-09-08 21:52:35:687 LL1 LogManager.java:25 look=[12, 12]
2023-09-08 21:52:35:687 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:687 LL1 LogManager.java:25 
DECISION 32 in rule switch_sent
2023-09-08 21:52:35:687 LL1 LogManager.java:25 look=[18, 18, 18, 18, 18]
2023-09-08 21:52:35:687 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:687 LL1 LogManager.java:25 
DECISION 33 in rule match_brazos
2023-09-08 21:52:35:687 LL1 LogManager.java:25 look=[null, {21, 72}]
2023-09-08 21:52:35:687 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:687 LL1 LogManager.java:25 
DECISION 34 in rule match_brazos_exp
2023-09-08 21:52:35:687 LL1 LogManager.java:25 look=[null, {21, 72}]
2023-09-08 21:52:35:687 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:687 LL1 LogManager.java:25 
DECISION 35 in rule matchbrazo
2023-09-08 21:52:35:687 LL1 LogManager.java:25 look=[20, 20]
2023-09-08 21:52:35:687 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:687 LL1 LogManager.java:25 
DECISION 36 in rule listaOpciones
2023-09-08 21:52:35:687 LL1 LogManager.java:25 look=[null, 46]
2023-09-08 21:52:35:687 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:687 LL1 LogManager.java:25 
DECISION 37 in rule bloque_inst
2023-09-08 21:52:35:687 LL1 LogManager.java:25 look=[71, 71]
2023-09-08 21:52:35:687 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:687 LL1 LogManager.java:25 
DECISION 38 in rule bloque_princip
2023-09-08 21:52:35:688 LL1 LogManager.java:25 look=[{1, 11, 13..14, 16..18, 26..28, 38, 42, 50}, 42]
2023-09-08 21:52:35:688 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:688 LL1 LogManager.java:25 
DECISION 39 in rule tipos_var
2023-09-08 21:52:35:688 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:688 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:688 LL1 LogManager.java:25 
DECISION 40 in rule tipos_var
2023-09-08 21:52:35:688 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:688 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:688 LL1 LogManager.java:25 
DECISION 41 in rule tipos_var
2023-09-08 21:52:35:688 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:688 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:688 LL1 LogManager.java:25 
DECISION 42 in rule tipos_var
2023-09-08 21:52:35:688 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:688 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:688 LL1 LogManager.java:25 
DECISION 43 in rule tipos_var
2023-09-08 21:52:35:688 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:688 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:688 LL1 LogManager.java:25 
DECISION 44 in rule tipos_var
2023-09-08 21:52:35:689 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:689 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:689 LL1 LogManager.java:25 
DECISION 45 in rule tipos_var
2023-09-08 21:52:35:689 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:689 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:689 LL1 LogManager.java:25 
DECISION 46 in rule tipos_var
2023-09-08 21:52:35:689 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:689 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:689 LL1 LogManager.java:25 
DECISION 47 in rule tipos_var
2023-09-08 21:52:35:689 LL1 LogManager.java:25 look=[66, null]
2023-09-08 21:52:35:689 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:689 LL1 LogManager.java:25 
DECISION 48 in rule tipos_var
2023-09-08 21:52:35:689 LL1 LogManager.java:25 look=[2, 4, 3, 5, 6, 28, 7, 8, 9]
2023-09-08 21:52:35:689 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:689 LL1 LogManager.java:25 
DECISION 49 in rule expression
2023-09-08 21:52:35:690 LL1 LogManager.java:25 look=[null, null]
2023-09-08 21:52:35:690 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:690 LL1 LogManager.java:25 
DECISION 50 in rule expr_arit
2023-09-08 21:52:35:691 LL1 LogManager.java:25 look=[61, 65, 4, 50, 73, 73, 50, {4, 22..23, 39..41, 50, 67, 75}, 69, 69, 11, 18, 13, 50, 50, 15]
2023-09-08 21:52:35:691 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:691 LL1 LogManager.java:25 
DECISION 51 in rule expr_arit
2023-09-08 21:52:35:691 LL1 LogManager.java:25 look=[null, null, null, null, null, null]
2023-09-08 21:52:35:691 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:691 LL1 LogManager.java:25 
DECISION 52 in rule expr_arit
2023-09-08 21:52:35:691 LL1 LogManager.java:25 look=[null, null]
2023-09-08 21:52:35:691 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:691 LL1 LogManager.java:25 
DECISION 53 in rule tipo_cast
2023-09-08 21:52:35:691 LL1 LogManager.java:25 look=[3, 2, 10]
2023-09-08 21:52:35:693 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:693 LL1 LogManager.java:25 
DECISION 54 in rule l_StructExp
2023-09-08 21:52:35:693 LL1 LogManager.java:25 look=[null, 70]
2023-09-08 21:52:35:693 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:693 LL1 LogManager.java:25 
DECISION 55 in rule primitivo
2023-09-08 21:52:35:693 LL1 LogManager.java:25 look=[39, 40, {4, 41, 67}, 75, 22, 23, 50]
2023-09-08 21:52:35:693 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:693 LL1 LogManager.java:25 
DECISION 56 in rule listIDArray
2023-09-08 21:52:35:693 LL1 LogManager.java:25 look=[null, null]
2023-09-08 21:52:35:693 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:693 LL1 LogManager.java:25 
DECISION 57 in rule listIDArray
2023-09-08 21:52:35:694 LL1 LogManager.java:25 look=[null, null]
2023-09-08 21:52:35:694 LL1 LogManager.java:25 LL(1)? false
2023-09-08 21:52:35:694 LL1 LogManager.java:25 
DECISION 58 in rule strings
2023-09-08 21:52:35:694 LL1 LogManager.java:25 look=[67, 4]
2023-09-08 21:52:35:694 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:694 LL1 LogManager.java:25 
DECISION 59 in rule strings
2023-09-08 21:52:35:694 LL1 LogManager.java:25 look=[67, 4, 41]
2023-09-08 21:52:35:694 LL1 LogManager.java:25 LL(1)? true
2023-09-08 21:52:35:714 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




2023-09-08 21:52:35:734 action-translator LogManager.java:25 translate $lista = $listaglobal.lista
2023-09-08 21:52:35:734 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,19:17]
2023-09-08 21:52:35:736 action-translator LogManager.java:25 qattr [@-1,10:20='listaglobal',<0>,19:26].[@-1,22:26='lista',<0>,19:38]
2023-09-08 21:52:35:738 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2023-09-08 21:52:35:738 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,24:5]
2023-09-08 21:52:35:740 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
          //fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
    
2023-09-08 21:52:35:740 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,29:13]
2023-09-08 21:52:35:741 action-translator LogManager.java:25 translate 
    $lista = arrayList.New()

2023-09-08 21:52:35:741 action-translator LogManager.java:25 attr [@-1,7:11='lista',<0>,50:5]
2023-09-08 21:52:35:742 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:742 action-translator LogManager.java:25 translate  $lista.Add( $in_global.globals ) 
2023-09-08 21:52:35:742 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,2:44]
2023-09-08 21:52:35:742 action-translator LogManager.java:25 qattr [@-1,14:22='in_global',<0>,2:56].[@-1,24:30='globals',<0>,2:66]
2023-09-08 21:52:35:743 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:743 action-translator LogManager.java:25 translate 
                                                    $lisfun.lista.Add( $in_global.globals)
                                                    $lista =  $lisfun.lista
                                                  
2023-09-08 21:52:35:743 action-translator LogManager.java:25 qattr [@-1,55:60='lisfun',<0>,6:53].[@-1,62:66='lista',<0>,6:60]
2023-09-08 21:52:35:743 action-translator LogManager.java:25 qattr [@-1,74:82='in_global',<0>,6:72].[@-1,84:90='globals',<0>,6:82]
2023-09-08 21:52:35:743 action-translator LogManager.java:25 attr [@-1,147:151='lista',<0>,7:53]
2023-09-08 21:52:35:744 action-translator LogManager.java:25 qattr [@-1,157:162='lisfun',<0>,7:63].[@-1,164:168='lista',<0>,7:70]
2023-09-08 21:52:35:745 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:746 action-translator LogManager.java:25 translate $globals = $funcion.instr
2023-09-08 21:52:35:746 action-translator LogManager.java:25 attr [@-1,1:7='globals',<0>,60:17]
2023-09-08 21:52:35:746 action-translator LogManager.java:25 qattr [@-1,12:18='funcion',<0>,60:28].[@-1,20:24='instr',<0>,60:36]
2023-09-08 21:52:35:747 action-translator LogManager.java:25 translate $globals = $newStruct.str
2023-09-08 21:52:35:747 action-translator LogManager.java:25 attr [@-1,1:7='globals',<0>,62:17]
2023-09-08 21:52:35:747 action-translator LogManager.java:25 qattr [@-1,12:20='newStruct',<0>,62:28].[@-1,22:24='str',<0>,62:38]
2023-09-08 21:52:35:748 action-translator LogManager.java:25 translate $instr = $funcion.instr
2023-09-08 21:52:35:748 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,101:21]
2023-09-08 21:52:35:748 action-translator LogManager.java:25 qattr [@-1,10:16='funcion',<0>,101:30].[@-1,18:22='instr',<0>,101:38]
2023-09-08 21:52:35:749 action-translator LogManager.java:25 translate $instr = $newStruct.str
2023-09-08 21:52:35:749 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,102:21]
2023-09-08 21:52:35:749 action-translator LogManager.java:25 qattr [@-1,10:18='newStruct',<0>,102:30].[@-1,20:22='str',<0>,102:40]
2023-09-08 21:52:35:755 action-translator LogManager.java:25 translate  listParams :=  arrayList.New() 
2023-09-08 21:52:35:756 action-translator LogManager.java:25 translate $instr =  $fn_main.instr
2023-09-08 21:52:35:756 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,108:27]
2023-09-08 21:52:35:756 action-translator LogManager.java:25 qattr [@-1,11:17='fn_main',<0>,108:37].[@-1,19:23='instr',<0>,108:45]
2023-09-08 21:52:35:757 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, $tipos_var.tipo, $ID.line, $ID.pos, "" )
2023-09-08 21:52:35:757 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,109:53]
2023-09-08 21:52:35:758 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,109:91].[@-1,43:46='text',<0>,109:94]
2023-09-08 21:52:35:758 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,109:111].[@-1,72:72='l',<0>,109:123]
2023-09-08 21:52:35:759 action-translator LogManager.java:25 qattr [@-1,76:84='tipos_var',<0>,109:127].[@-1,86:89='tipo',<0>,109:137]
2023-09-08 21:52:35:759 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,109:144].[@-1,96:99='line',<0>,109:147]
2023-09-08 21:52:35:759 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,109:154].[@-1,106:108='pos',<0>,109:157]
2023-09-08 21:52:35:760 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos,  $idob.text )
2023-09-08 21:52:35:760 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,111:53]
2023-09-08 21:52:35:760 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,111:91].[@-1,43:46='text',<0>,111:94]
2023-09-08 21:52:35:760 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,111:111].[@-1,72:72='l',<0>,111:123]
2023-09-08 21:52:35:760 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,111:144].[@-1,96:99='line',<0>,111:147]
2023-09-08 21:52:35:761 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,111:154].[@-1,106:108='pos',<0>,111:157]
2023-09-08 21:52:35:761 action-translator LogManager.java:25 qattr [@-1,113:116='idob',<0>,111:164].[@-1,118:121='text',<0>,111:169]
2023-09-08 21:52:35:761 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,listParams,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )
2023-09-08 21:52:35:761 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,113:53]
2023-09-08 21:52:35:761 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,113:91].[@-1,43:46='text',<0>,113:94]
2023-09-08 21:52:35:762 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,113:111].[@-1,72:72='l',<0>,113:123]
2023-09-08 21:52:35:762 action-translator LogManager.java:25 qattr [@-1,93:94='ID',<0>,113:144].[@-1,96:99='line',<0>,113:147]
2023-09-08 21:52:35:763 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,113:154].[@-1,106:108='pos',<0>,113:157]
2023-09-08 21:52:35:763 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista,$bloque_inst.l, interfaces.VOID, $ID.line, $ID.pos, "" )
2023-09-08 21:52:35:763 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,114:53]
2023-09-08 21:52:35:764 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,114:91].[@-1,43:46='text',<0>,114:94]
2023-09-08 21:52:35:764 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,114:100].[@-1,63:67='lista',<0>,114:114]
2023-09-08 21:52:35:764 action-translator LogManager.java:25 qattr [@-1,70:80='bloque_inst',<0>,114:121].[@-1,82:82='l',<0>,114:133]
2023-09-08 21:52:35:764 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,114:154].[@-1,106:109='line',<0>,114:157]
2023-09-08 21:52:35:764 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,114:164].[@-1,116:118='pos',<0>,114:167]
2023-09-08 21:52:35:765 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($ID.text,$params_declar.lista, $bloque_inst.l,$tipos_var.tipo, $ID.line, $ID.pos, "" )
2023-09-08 21:52:35:765 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,116:67]
2023-09-08 21:52:35:765 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,116:105].[@-1,43:46='text',<0>,116:108]
2023-09-08 21:52:35:765 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,116:114].[@-1,63:67='lista',<0>,116:128]
2023-09-08 21:52:35:766 action-translator LogManager.java:25 qattr [@-1,71:81='bloque_inst',<0>,116:136].[@-1,83:83='l',<0>,116:148]
2023-09-08 21:52:35:766 action-translator LogManager.java:25 qattr [@-1,86:94='tipos_var',<0>,116:151].[@-1,96:99='tipo',<0>,116:161]
2023-09-08 21:52:35:766 action-translator LogManager.java:25 qattr [@-1,103:104='ID',<0>,116:168].[@-1,106:109='line',<0>,116:171]
2023-09-08 21:52:35:766 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,116:178].[@-1,116:118='pos',<0>,116:181]
2023-09-08 21:52:35:767 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction($id.text,$params_declar.lista, $bloque_inst.l, interfaces.VOID, $id.line, $id.pos, $idob.text  )
2023-09-08 21:52:35:767 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,119:68]
2023-09-08 21:52:35:767 action-translator LogManager.java:25 qattr [@-1,40:41='id',<0>,119:106].[@-1,43:46='text',<0>,119:109]
2023-09-08 21:52:35:767 action-translator LogManager.java:25 qattr [@-1,49:61='params_declar',<0>,119:115].[@-1,63:67='lista',<0>,119:129]
2023-09-08 21:52:35:767 action-translator LogManager.java:25 qattr [@-1,71:81='bloque_inst',<0>,119:137].[@-1,83:83='l',<0>,119:149]
2023-09-08 21:52:35:767 action-translator LogManager.java:25 qattr [@-1,104:105='id',<0>,119:170].[@-1,107:110='line',<0>,119:173]
2023-09-08 21:52:35:768 action-translator LogManager.java:25 qattr [@-1,114:115='id',<0>,119:180].[@-1,117:119='pos',<0>,119:183]
2023-09-08 21:52:35:768 action-translator LogManager.java:25 qattr [@-1,123:126='idob',<0>,119:189].[@-1,128:131='text',<0>,119:194]
2023-09-08 21:52:35:769 action-translator LogManager.java:25 translate 
$lista =  arrayList.New()

2023-09-08 21:52:35:769 action-translator LogManager.java:25 attr [@-1,3:7='lista',<0>,127:1]
2023-09-08 21:52:35:769 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:770 action-translator LogManager.java:25 translate    $lista.Add($declar_parametros.in_dec) 
2023-09-08 21:52:35:770 action-translator LogManager.java:25 attr [@-1,4:8='lista',<0>,2:51]
2023-09-08 21:52:35:770 action-translator LogManager.java:25 qattr [@-1,15:31='declar_parametros',<0>,2:62].[@-1,33:38='in_dec',<0>,2:80]
2023-09-08 21:52:35:770 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:770 action-translator LogManager.java:25 translate 
                                                                      $listdec.lista.Add($declar_parametros.in_dec)
                                                                      $lista =  $listdec.lista 
2023-09-08 21:52:35:771 action-translator LogManager.java:25 qattr [@-1,73:79='listdec',<0>,6:71].[@-1,81:85='lista',<0>,6:79]
2023-09-08 21:52:35:771 action-translator LogManager.java:25 qattr [@-1,92:108='declar_parametros',<0>,6:90].[@-1,110:115='in_dec',<0>,6:108]
2023-09-08 21:52:35:771 action-translator LogManager.java:25 attr [@-1,190:194='lista',<0>,7:71]
2023-09-08 21:52:35:771 action-translator LogManager.java:25 qattr [@-1,200:206='listdec',<0>,7:81].[@-1,208:212='lista',<0>,7:89]
2023-09-08 21:52:35:771 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:775 action-translator LogManager.java:25 translate 
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewDeclaration($ID.text, $tipos_var.tipo, nil, $isVar.mut, $ID.line, $ID.pos )
                        $in_dec = decl
                    
2023-09-08 21:52:35:775 action-translator LogManager.java:25 qattr [@-1,122:123='ID',<0>,138:66].[@-1,125:128='text',<0>,138:69]
2023-09-08 21:52:35:775 action-translator LogManager.java:25 qattr [@-1,132:133='ID',<0>,138:76].[@-1,135:138='line',<0>,138:79]
2023-09-08 21:52:35:775 action-translator LogManager.java:25 qattr [@-1,142:143='ID',<0>,138:86].[@-1,145:147='pos',<0>,138:89]
2023-09-08 21:52:35:776 action-translator LogManager.java:25 qattr [@-1,213:214='ID',<0>,139:60].[@-1,216:219='text',<0>,139:63]
2023-09-08 21:52:35:776 action-translator LogManager.java:25 qattr [@-1,223:231='tipos_var',<0>,139:70].[@-1,233:236='tipo',<0>,139:80]
2023-09-08 21:52:35:776 action-translator LogManager.java:25 qattr [@-1,245:249='isVar',<0>,139:92].[@-1,251:253='mut',<0>,139:98]
2023-09-08 21:52:35:776 action-translator LogManager.java:25 qattr [@-1,257:258='ID',<0>,139:104].[@-1,260:263='line',<0>,139:107]
2023-09-08 21:52:35:776 action-translator LogManager.java:25 qattr [@-1,267:268='ID',<0>,139:114].[@-1,270:272='pos',<0>,139:117]
2023-09-08 21:52:35:776 action-translator LogManager.java:25 attr [@-1,302:307='in_dec',<0>,140:25]
2023-09-08 21:52:35:777 action-translator LogManager.java:25 translate 
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $es_referencia.ref, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    
2023-09-08 21:52:35:777 action-translator LogManager.java:25 qattr [@-1,68:69='id',<0>,143:66].[@-1,71:74='text',<0>,143:69]
2023-09-08 21:52:35:777 action-translator LogManager.java:25 qattr [@-1,100:112='es_referencia',<0>,143:98].[@-1,114:116='ref',<0>,143:112]
2023-09-08 21:52:35:777 action-translator LogManager.java:25 qattr [@-1,120:121='id',<0>,143:118].[@-1,123:126='line',<0>,143:121]
2023-09-08 21:52:35:777 action-translator LogManager.java:25 qattr [@-1,130:131='id',<0>,143:128].[@-1,133:135='pos',<0>,143:131]
2023-09-08 21:52:35:777 action-translator LogManager.java:25 qattr [@-1,144:147='idob',<0>,143:142].[@-1,149:152='text',<0>,143:147]
2023-09-08 21:52:35:778 action-translator LogManager.java:25 attr [@-1,181:186='in_dec',<0>,144:25]
2023-09-08 21:52:35:778 action-translator LogManager.java:25 translate 
                        decl := instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $es_referencia.ref, $id.line, $id.pos, nil, "")
                        $in_dec = decl
                    
2023-09-08 21:52:35:778 action-translator LogManager.java:25 qattr [@-1,68:69='id',<0>,147:66].[@-1,71:74='text',<0>,147:69]
2023-09-08 21:52:35:778 action-translator LogManager.java:25 qattr [@-1,78:86='tipos_var',<0>,147:76].[@-1,88:91='tipo',<0>,147:86]
2023-09-08 21:52:35:779 action-translator LogManager.java:25 qattr [@-1,100:112='es_referencia',<0>,147:98].[@-1,114:116='ref',<0>,147:112]
2023-09-08 21:52:35:779 action-translator LogManager.java:25 qattr [@-1,120:121='id',<0>,147:118].[@-1,123:126='line',<0>,147:121]
2023-09-08 21:52:35:779 action-translator LogManager.java:25 qattr [@-1,130:131='id',<0>,147:128].[@-1,133:135='pos',<0>,147:131]
2023-09-08 21:52:35:779 action-translator LogManager.java:25 attr [@-1,173:178='in_dec',<0>,148:25]
2023-09-08 21:52:35:779 action-translator LogManager.java:25 translate 
                        listaIdes := arrayList.New()
                        listaIdes.Add(expresion.NewIdentificador($ID.text, $ID.line, $ID.pos ))
                        decl := instruction.NewArrayDeclaration($ID.text, $array_type.ty, nil, true, $ID.line, $ID.pos )
                        $in_dec = decl
                    
2023-09-08 21:52:35:780 action-translator LogManager.java:25 qattr [@-1,122:123='ID',<0>,152:66].[@-1,125:128='text',<0>,152:69]
2023-09-08 21:52:35:780 action-translator LogManager.java:25 qattr [@-1,132:133='ID',<0>,152:76].[@-1,135:138='line',<0>,152:79]
2023-09-08 21:52:35:780 action-translator LogManager.java:25 qattr [@-1,142:143='ID',<0>,152:86].[@-1,145:147='pos',<0>,152:89]
2023-09-08 21:52:35:780 action-translator LogManager.java:25 qattr [@-1,218:219='ID',<0>,153:65].[@-1,221:224='text',<0>,153:68]
2023-09-08 21:52:35:780 action-translator LogManager.java:25 qattr [@-1,228:237='array_type',<0>,153:75].[@-1,239:240='ty',<0>,153:86]
2023-09-08 21:52:35:780 action-translator LogManager.java:25 qattr [@-1,255:256='ID',<0>,153:102].[@-1,258:261='line',<0>,153:105]
2023-09-08 21:52:35:780 action-translator LogManager.java:25 qattr [@-1,265:266='ID',<0>,153:112].[@-1,268:270='pos',<0>,153:115]
2023-09-08 21:52:35:780 action-translator LogManager.java:25 attr [@-1,300:305='in_dec',<0>,154:25]
2023-09-08 21:52:35:781 action-translator LogManager.java:25 translate  
                            decl := instruction.NewDeclaration($id.text, interfaces.STRUCT, nil, $es_referencia.ref, $id.line, $id.pos)
                            $in_dec = decl
                        
2023-09-08 21:52:35:781 action-translator LogManager.java:25 qattr [@-1,67:68='id',<0>,158:64].[@-1,70:73='text',<0>,158:67]
2023-09-08 21:52:35:783 action-translator LogManager.java:25 qattr [@-1,101:113='es_referencia',<0>,158:98].[@-1,115:117='ref',<0>,158:112]
2023-09-08 21:52:35:783 action-translator LogManager.java:25 qattr [@-1,121:122='id',<0>,158:118].[@-1,124:127='line',<0>,158:121]
2023-09-08 21:52:35:783 action-translator LogManager.java:25 qattr [@-1,131:132='id',<0>,158:128].[@-1,134:136='pos',<0>,158:131]
2023-09-08 21:52:35:783 action-translator LogManager.java:25 attr [@-1,169:174='in_dec',<0>,159:29]
2023-09-08 21:52:35:783 action-translator LogManager.java:25 translate 
                        decl := instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isRef.mut, $id.line, $id.pos, nil, $idob.text)
                        $in_dec = decl
                    
2023-09-08 21:52:35:784 action-translator LogManager.java:25 qattr [@-1,68:69='id',<0>,162:66].[@-1,71:74='text',<0>,162:69]
2023-09-08 21:52:35:784 action-translator LogManager.java:25 qattr [@-1,100:104='isRef',<0>,162:98].[@-1,106:108='mut',<0>,162:104]
2023-09-08 21:52:35:784 action-translator LogManager.java:25 qattr [@-1,112:113='id',<0>,162:110].[@-1,115:118='line',<0>,162:113]
2023-09-08 21:52:35:784 action-translator LogManager.java:25 qattr [@-1,122:123='id',<0>,162:120].[@-1,125:127='pos',<0>,162:123]
2023-09-08 21:52:35:784 action-translator LogManager.java:25 qattr [@-1,136:139='idob',<0>,162:134].[@-1,141:144='text',<0>,162:139]
2023-09-08 21:52:35:784 action-translator LogManager.java:25 attr [@-1,173:178='in_dec',<0>,163:25]
2023-09-08 21:52:35:785 action-translator LogManager.java:25 translate  listParams:= arrayList.New() 
2023-09-08 21:52:35:785 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewFunction("main",listParams,$bloque_princip.l, interfaces.VOID, 0, 0, "" )
2023-09-08 21:52:35:786 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,174:6]
2023-09-08 21:52:35:786 action-translator LogManager.java:25 qattr [@-1,58:71='bloque_princip',<0>,174:62].[@-1,73:73='l',<0>,174:77]
2023-09-08 21:52:35:788 action-translator LogManager.java:25 translate $instr = $printconsola.instr
2023-09-08 21:52:35:788 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,179:19]
2023-09-08 21:52:35:788 action-translator LogManager.java:25 qattr [@-1,10:21='printconsola',<0>,179:28].[@-1,23:27='instr',<0>,179:41]
2023-09-08 21:52:35:788 action-translator LogManager.java:25 translate $instr = $declaracion.instr
2023-09-08 21:52:35:788 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,180:18]
2023-09-08 21:52:35:789 action-translator LogManager.java:25 qattr [@-1,10:20='declaracion',<0>,180:27].[@-1,22:26='instr',<0>,180:39]
2023-09-08 21:52:35:789 action-translator LogManager.java:25 translate $instr = $asignacion.instr
2023-09-08 21:52:35:789 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,181:17]
2023-09-08 21:52:35:789 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,181:26].[@-1,21:25='instr',<0>,181:37]
2023-09-08 21:52:35:790 action-translator LogManager.java:25 translate $instr = $appendVec.instr
2023-09-08 21:52:35:790 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,183:16]
2023-09-08 21:52:35:790 action-translator LogManager.java:25 qattr [@-1,10:18='appendVec',<0>,183:25].[@-1,20:24='instr',<0>,183:35]
2023-09-08 21:52:35:791 action-translator LogManager.java:25 translate $instr = $if_sent.instr
2023-09-08 21:52:35:791 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,185:14]
2023-09-08 21:52:35:791 action-translator LogManager.java:25 qattr [@-1,10:16='if_sent',<0>,185:23].[@-1,18:22='instr',<0>,185:31]
2023-09-08 21:52:35:791 action-translator LogManager.java:25 translate $instr = $switch_sent.instr
2023-09-08 21:52:35:792 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,186:17]
2023-09-08 21:52:35:792 action-translator LogManager.java:25 qattr [@-1,10:20='switch_sent',<0>,186:26].[@-1,22:26='instr',<0>,186:38]
2023-09-08 21:52:35:793 action-translator LogManager.java:25 translate  $instr = $while_true.lop 
2023-09-08 21:52:35:793 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,188:17]
2023-09-08 21:52:35:793 action-translator LogManager.java:25 qattr [@-1,11:20='while_true',<0>,188:26].[@-1,22:24='lop',<0>,188:37]
2023-09-08 21:52:35:793 action-translator LogManager.java:25 translate  $instr = $lWhile.lwh 
2023-09-08 21:52:35:793 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,189:13]
2023-09-08 21:52:35:793 action-translator LogManager.java:25 qattr [@-1,11:16='lWhile',<0>,189:22].[@-1,18:20='lwh',<0>,189:29]
2023-09-08 21:52:35:794 action-translator LogManager.java:25 translate  $instr = $lForin.lfor 
2023-09-08 21:52:35:794 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,190:13]
2023-09-08 21:52:35:794 action-translator LogManager.java:25 qattr [@-1,11:16='lForin',<0>,190:22].[@-1,18:21='lfor',<0>,190:29]
2023-09-08 21:52:35:794 action-translator LogManager.java:25 translate  $instr = $lBreak.br 
2023-09-08 21:52:35:794 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,193:14]
2023-09-08 21:52:35:795 action-translator LogManager.java:25 qattr [@-1,11:16='lBreak',<0>,193:23].[@-1,18:19='br',<0>,193:30]
2023-09-08 21:52:35:795 action-translator LogManager.java:25 translate  $instr = $lContinue.cn 
2023-09-08 21:52:35:795 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,194:17]
2023-09-08 21:52:35:795 action-translator LogManager.java:25 qattr [@-1,11:19='lContinue',<0>,194:26].[@-1,21:22='cn',<0>,194:36]
2023-09-08 21:52:35:796 action-translator LogManager.java:25 translate $instr = $newStruct.str
2023-09-08 21:52:35:797 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,196:16]
2023-09-08 21:52:35:797 action-translator LogManager.java:25 qattr [@-1,10:18='newStruct',<0>,196:25].[@-1,20:22='str',<0>,196:35]
2023-09-08 21:52:35:797 action-translator LogManager.java:25 translate $instr = $callFunction.instr
2023-09-08 21:52:35:799 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,198:19]
2023-09-08 21:52:35:800 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,198:28].[@-1,23:27='instr',<0>,198:41]
2023-09-08 21:52:35:801 action-translator LogManager.java:25 translate $instr = $returnFun.instr
2023-09-08 21:52:35:801 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,199:16]
2023-09-08 21:52:35:801 action-translator LogManager.java:25 qattr [@-1,10:18='returnFun',<0>,199:25].[@-1,20:24='instr',<0>,199:35]
2023-09-08 21:52:35:802 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-08 21:52:35:802 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,201:47]
2023-09-08 21:52:35:802 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,201:83].[@-1,41:44='text',<0>,201:86]
2023-09-08 21:52:35:802 action-translator LogManager.java:25 qattr [@-1,48:57='expression',<0>,201:93].[@-1,59:59='p',<0>,201:104]
2023-09-08 21:52:35:802 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,201:108].[@-1,66:69='line',<0>,201:111]
2023-09-08 21:52:35:802 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,201:118].[@-1,76:78='pos',<0>,201:121]
2023-09-08 21:52:35:804 action-translator LogManager.java:25 translate $instr = $printconsola.instr
2023-09-08 21:52:35:804 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,206:19]
2023-09-08 21:52:35:804 action-translator LogManager.java:25 qattr [@-1,10:21='printconsola',<0>,206:28].[@-1,23:27='instr',<0>,206:41]
2023-09-08 21:52:35:805 action-translator LogManager.java:25 translate $instr = $declaracion.instr
2023-09-08 21:52:35:805 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,207:18]
2023-09-08 21:52:35:805 action-translator LogManager.java:25 qattr [@-1,10:20='declaracion',<0>,207:27].[@-1,22:26='instr',<0>,207:39]
2023-09-08 21:52:35:805 action-translator LogManager.java:25 translate $instr = $asignacion.instr
2023-09-08 21:52:35:805 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,208:16]
2023-09-08 21:52:35:805 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,208:25].[@-1,21:25='instr',<0>,208:36]
2023-09-08 21:52:35:806 action-translator LogManager.java:25 translate $instr = $appendVec.instr
2023-09-08 21:52:35:806 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,210:16]
2023-09-08 21:52:35:806 action-translator LogManager.java:25 qattr [@-1,10:18='appendVec',<0>,210:25].[@-1,20:24='instr',<0>,210:35]
2023-09-08 21:52:35:807 action-translator LogManager.java:25 translate $instr = $if_sent.instr
2023-09-08 21:52:35:807 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,212:14]
2023-09-08 21:52:35:807 action-translator LogManager.java:25 qattr [@-1,10:16='if_sent',<0>,212:23].[@-1,18:22='instr',<0>,212:31]
2023-09-08 21:52:35:807 action-translator LogManager.java:25 translate $instr = $switch_sent.instr
2023-09-08 21:52:35:807 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,213:17]
2023-09-08 21:52:35:807 action-translator LogManager.java:25 qattr [@-1,10:20='switch_sent',<0>,213:26].[@-1,22:26='instr',<0>,213:38]
2023-09-08 21:52:35:807 action-translator LogManager.java:25 translate  $instr = $while_true.lop 
2023-09-08 21:52:35:807 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,215:17]
2023-09-08 21:52:35:808 action-translator LogManager.java:25 qattr [@-1,11:20='while_true',<0>,215:26].[@-1,22:24='lop',<0>,215:37]
2023-09-08 21:52:35:808 action-translator LogManager.java:25 translate  $instr = $lWhile.lwh 
2023-09-08 21:52:35:808 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,216:13]
2023-09-08 21:52:35:808 action-translator LogManager.java:25 qattr [@-1,11:16='lWhile',<0>,216:22].[@-1,18:20='lwh',<0>,216:29]
2023-09-08 21:52:35:808 action-translator LogManager.java:25 translate  $instr = $lForin.lfor 
2023-09-08 21:52:35:808 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,217:13]
2023-09-08 21:52:35:809 action-translator LogManager.java:25 qattr [@-1,11:16='lForin',<0>,217:22].[@-1,18:21='lfor',<0>,217:29]
2023-09-08 21:52:35:809 action-translator LogManager.java:25 translate  $instr = $lBreak.br 
2023-09-08 21:52:35:809 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,219:14]
2023-09-08 21:52:35:809 action-translator LogManager.java:25 qattr [@-1,11:16='lBreak',<0>,219:23].[@-1,18:19='br',<0>,219:30]
2023-09-08 21:52:35:810 action-translator LogManager.java:25 translate  $instr = $lContinue.cn 
2023-09-08 21:52:35:810 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,220:17]
2023-09-08 21:52:35:810 action-translator LogManager.java:25 qattr [@-1,11:19='lContinue',<0>,220:26].[@-1,21:22='cn',<0>,220:36]
2023-09-08 21:52:35:810 action-translator LogManager.java:25 translate $instr = $callFunction.instr
2023-09-08 21:52:35:814 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,222:18]
2023-09-08 21:52:35:815 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,222:27].[@-1,23:27='instr',<0>,222:40]
2023-09-08 21:52:35:815 action-translator LogManager.java:25 translate $instr = $returnFun.instr
2023-09-08 21:52:35:815 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,223:16]
2023-09-08 21:52:35:815 action-translator LogManager.java:25 qattr [@-1,10:18='returnFun',<0>,223:25].[@-1,20:24='instr',<0>,223:35]
2023-09-08 21:52:35:816 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-08 21:52:35:816 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,226:39]
2023-09-08 21:52:35:816 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,226:75].[@-1,41:44='text',<0>,226:78]
2023-09-08 21:52:35:816 action-translator LogManager.java:25 qattr [@-1,48:57='expression',<0>,226:85].[@-1,59:59='p',<0>,226:96]
2023-09-08 21:52:35:816 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,226:100].[@-1,66:69='line',<0>,226:103]
2023-09-08 21:52:35:817 action-translator LogManager.java:25 qattr [@-1,73:74='ID',<0>,226:110].[@-1,76:78='pos',<0>,226:113]
2023-09-08 21:52:35:819 action-translator LogManager.java:25 translate $instr = instruction.NewPush($ID.text, $val.p, $ID.line, $ID.pos  )
2023-09-08 21:52:35:819 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,231:42]
2023-09-08 21:52:35:819 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,231:71].[@-1,33:36='text',<0>,231:74]
2023-09-08 21:52:35:819 action-translator LogManager.java:25 qattr [@-1,40:42='val',<0>,231:81].[@-1,44:44='p',<0>,231:85]
2023-09-08 21:52:35:819 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,231:89].[@-1,51:54='line',<0>,231:92]
2023-09-08 21:52:35:820 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,231:99].[@-1,61:63='pos',<0>,231:102]
2023-09-08 21:52:35:820 action-translator LogManager.java:25 translate  $instr = instruction.NewInsert($ID.text, $val1.p, $val2.p, $ID.line, $ID.pos) 
2023-09-08 21:52:35:820 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,232:66]
2023-09-08 21:52:35:820 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,232:97].[@-1,36:39='text',<0>,232:100]
2023-09-08 21:52:35:821 action-translator LogManager.java:25 qattr [@-1,43:46='val1',<0>,232:107].[@-1,48:48='p',<0>,232:112]
2023-09-08 21:52:35:821 action-translator LogManager.java:25 qattr [@-1,52:55='val2',<0>,232:116].[@-1,57:57='p',<0>,232:121]
2023-09-08 21:52:35:821 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,232:125].[@-1,64:67='line',<0>,232:128]
2023-09-08 21:52:35:821 action-translator LogManager.java:25 qattr [@-1,71:72='ID',<0>,232:135].[@-1,74:76='pos',<0>,232:138]
2023-09-08 21:52:35:823 action-translator LogManager.java:25 translate  $str = instructionExpre.NewStruct($ID.text, $lista_struct.l, $STRUCT.line, $STRUCT.pos) 
2023-09-08 21:52:35:823 action-translator LogManager.java:25 attr [@-1,2:4='str',<0>,235:45]
2023-09-08 21:52:35:824 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,235:79].[@-1,39:42='text',<0>,235:82]
2023-09-08 21:52:35:824 action-translator LogManager.java:25 qattr [@-1,46:57='lista_struct',<0>,235:89].[@-1,59:59='l',<0>,235:102]
2023-09-08 21:52:35:824 action-translator LogManager.java:25 qattr [@-1,63:68='STRUCT',<0>,235:106].[@-1,70:73='line',<0>,235:113]
2023-09-08 21:52:35:824 action-translator LogManager.java:25 qattr [@-1,77:82='STRUCT',<0>,235:120].[@-1,84:86='pos',<0>,235:127]
2023-09-08 21:52:35:831 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:831 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-08 21:52:35:831 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,3:59].[@-1,64:67='text',<0>,3:62]
2023-09-08 21:52:35:831 action-translator LogManager.java:25 qattr [@-1,71:79='tipos_var',<0>,3:69].[@-1,81:84='tipo',<0>,3:79]
2023-09-08 21:52:35:832 action-translator LogManager.java:25 setAttr [@-1,113:113='l',<0>,4:21] [@-1,116:131=' arrayList.New()',<0>,4:24]
2023-09-08 21:52:35:832 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-08 21:52:35:833 action-translator LogManager.java:25 attr [@-1,156:156='l',<0>,5:21]
2023-09-08 21:52:35:833 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-08 21:52:35:833 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,8:59].[@-1,64:67='text',<0>,8:62]
2023-09-08 21:52:35:833 action-translator LogManager.java:25 qattr [@-1,88:93='idstru',<0>,8:86].[@-1,95:98='text',<0>,8:93]
2023-09-08 21:52:35:833 action-translator LogManager.java:25 setAttr [@-1,123:123='l',<0>,9:21] [@-1,126:141=' arrayList.New()',<0>,9:24]
2023-09-08 21:52:35:833 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-08 21:52:35:833 action-translator LogManager.java:25 attr [@-1,166:166='l',<0>,10:21]
2023-09-08 21:52:35:833 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-08 21:52:35:833 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,13:59].[@-1,64:67='text',<0>,13:62]
2023-09-08 21:52:35:834 action-translator LogManager.java:25 qattr [@-1,71:79='tipos_var',<0>,13:69].[@-1,81:84='tipo',<0>,13:79]
2023-09-08 21:52:35:834 action-translator LogManager.java:25 setAttr [@-1,113:113='l',<0>,14:21] [@-1,116:131=' arrayList.New()',<0>,14:24]
2023-09-08 21:52:35:834 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-08 21:52:35:834 action-translator LogManager.java:25 attr [@-1,156:156='l',<0>,15:21]
2023-09-08 21:52:35:834 action-translator LogManager.java:25 translate 
                    Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                    $l = arrayList.New();
                    $l.Add(Str_atrib);
                
2023-09-08 21:52:35:834 action-translator LogManager.java:25 qattr [@-1,61:62='id',<0>,18:59].[@-1,64:67='text',<0>,18:62]
2023-09-08 21:52:35:834 action-translator LogManager.java:25 qattr [@-1,88:93='idstru',<0>,18:86].[@-1,95:98='text',<0>,18:93]
2023-09-08 21:52:35:834 action-translator LogManager.java:25 setAttr [@-1,123:123='l',<0>,19:21] [@-1,126:141=' arrayList.New()',<0>,19:24]
2023-09-08 21:52:35:834 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-08 21:52:35:834 action-translator LogManager.java:25 attr [@-1,166:166='l',<0>,20:21]
2023-09-08 21:52:35:834 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-09-08 21:52:35:835 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-08 21:52:35:835 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,25:89].[@-1,94:97='text',<0>,25:92]
2023-09-08 21:52:35:835 action-translator LogManager.java:25 qattr [@-1,101:109='tipos_var',<0>,25:99].[@-1,111:114='tipo',<0>,25:109]
2023-09-08 21:52:35:835 action-translator LogManager.java:25 qattr [@-1,173:176='list',<0>,26:51].[@-1,178:178='l',<0>,26:56]
2023-09-08 21:52:35:835 action-translator LogManager.java:25 setAttr [@-1,248:248='l',<0>,27:51] [@-1,251:258=' $list.l',<0>,27:54]
2023-09-08 21:52:35:835 action-translator LogManager.java:25 translate  $list.l
2023-09-08 21:52:35:835 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,24:149].[@-1,7:7='l',<0>,24:154]
2023-09-08 21:52:35:836 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-09-08 21:52:35:836 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-08 21:52:35:836 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,30:89].[@-1,94:97='text',<0>,30:92]
2023-09-08 21:52:35:836 action-translator LogManager.java:25 qattr [@-1,118:123='idstru',<0>,30:116].[@-1,125:128='text',<0>,30:123]
2023-09-08 21:52:35:836 action-translator LogManager.java:25 qattr [@-1,183:186='list',<0>,31:51].[@-1,188:188='l',<0>,31:56]
2023-09-08 21:52:35:836 action-translator LogManager.java:25 setAttr [@-1,258:258='l',<0>,32:51] [@-1,261:268=' $list.l',<0>,32:54]
2023-09-08 21:52:35:836 action-translator LogManager.java:25 translate  $list.l
2023-09-08 21:52:35:837 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,29:158].[@-1,7:7='l',<0>,29:163]
2023-09-08 21:52:35:837 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-09-08 21:52:35:837 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, $tipos_var.tipo, "")
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-08 21:52:35:837 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,35:89].[@-1,94:97='text',<0>,35:92]
2023-09-08 21:52:35:837 action-translator LogManager.java:25 qattr [@-1,101:109='tipos_var',<0>,35:99].[@-1,111:114='tipo',<0>,35:109]
2023-09-08 21:52:35:837 action-translator LogManager.java:25 qattr [@-1,173:176='list',<0>,36:51].[@-1,178:178='l',<0>,36:56]
2023-09-08 21:52:35:838 action-translator LogManager.java:25 setAttr [@-1,248:248='l',<0>,37:51] [@-1,251:258=' $list.l',<0>,37:54]
2023-09-08 21:52:35:838 action-translator LogManager.java:25 translate  $list.l
2023-09-08 21:52:35:838 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,34:159].[@-1,7:7='l',<0>,34:164]
2023-09-08 21:52:35:838 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-09-08 21:52:35:838 action-translator LogManager.java:25 translate 
                                                  Str_atrib := interfaces.NewStructType($id.text, interfaces.NULL, $idstru.text)
                                                  $list.l.Add(Str_atrib);
                                                  $l = $list.l;
                                              
2023-09-08 21:52:35:838 action-translator LogManager.java:25 qattr [@-1,91:92='id',<0>,40:89].[@-1,94:97='text',<0>,40:92]
2023-09-08 21:52:35:839 action-translator LogManager.java:25 qattr [@-1,118:123='idstru',<0>,40:116].[@-1,125:128='text',<0>,40:123]
2023-09-08 21:52:35:839 action-translator LogManager.java:25 qattr [@-1,183:186='list',<0>,41:51].[@-1,188:188='l',<0>,41:56]
2023-09-08 21:52:35:839 action-translator LogManager.java:25 setAttr [@-1,258:258='l',<0>,42:51] [@-1,261:268=' $list.l',<0>,42:54]
2023-09-08 21:52:35:839 action-translator LogManager.java:25 translate  $list.l
2023-09-08 21:52:35:839 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,39:158].[@-1,7:7='l',<0>,39:163]
2023-09-08 21:52:35:840 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-09-08 21:52:35:840 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-09-08 21:52:35:840 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-09-08 21:52:35:840 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-09-08 21:52:35:841 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, arrayList.New(), $ID.line, $ID.pos )
                    
2023-09-08 21:52:35:841 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,287:25]
2023-09-08 21:52:35:841 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,287:67].[@-1,72:75='text',<0>,287:70]
2023-09-08 21:52:35:842 action-translator LogManager.java:25 qattr [@-1,96:97='ID',<0>,287:94].[@-1,99:102='line',<0>,287:97]
2023-09-08 21:52:35:842 action-translator LogManager.java:25 qattr [@-1,106:107='ID',<0>,287:104].[@-1,109:111='pos',<0>,287:107]
2023-09-08 21:52:35:842 action-translator LogManager.java:25 attr [@-1,141:141='p',<0>,288:25]
2023-09-08 21:52:35:842 action-translator LogManager.java:25 qattr [@-1,179:180='ID',<0>,288:63].[@-1,182:185='text',<0>,288:66]
2023-09-08 21:52:35:842 action-translator LogManager.java:25 qattr [@-1,206:207='ID',<0>,288:90].[@-1,209:212='line',<0>,288:93]
2023-09-08 21:52:35:842 action-translator LogManager.java:25 qattr [@-1,216:217='ID',<0>,288:100].[@-1,219:221='pos',<0>,288:103]
2023-09-08 21:52:35:843 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                        $p = instructionExpre.NewCallFunction($ID.text, $listParamsCall.l_e, $ID.line, $ID.pos )
                    
2023-09-08 21:52:35:843 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,291:25]
2023-09-08 21:52:35:843 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,291:67].[@-1,72:75='text',<0>,291:70]
2023-09-08 21:52:35:843 action-translator LogManager.java:25 qattr [@-1,79:92='listParamsCall',<0>,291:77].[@-1,94:96='l_e',<0>,291:92]
2023-09-08 21:52:35:843 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,291:98].[@-1,103:106='line',<0>,291:101]
2023-09-08 21:52:35:843 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,291:108].[@-1,113:115='pos',<0>,291:111]
2023-09-08 21:52:35:843 action-translator LogManager.java:25 attr [@-1,145:145='p',<0>,292:25]
2023-09-08 21:52:35:844 action-translator LogManager.java:25 qattr [@-1,183:184='ID',<0>,292:63].[@-1,186:189='text',<0>,292:66]
2023-09-08 21:52:35:844 action-translator LogManager.java:25 qattr [@-1,193:206='listParamsCall',<0>,292:73].[@-1,208:210='l_e',<0>,292:88]
2023-09-08 21:52:35:844 action-translator LogManager.java:25 qattr [@-1,214:215='ID',<0>,292:94].[@-1,217:220='line',<0>,292:97]
2023-09-08 21:52:35:844 action-translator LogManager.java:25 qattr [@-1,224:225='ID',<0>,292:104].[@-1,227:229='pos',<0>,292:107]
2023-09-08 21:52:35:845 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewReturn(nil, $RETURN.line, $RETURN.pos )
2023-09-08 21:52:35:845 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,298:30]
2023-09-08 21:52:35:846 action-translator LogManager.java:25 qattr [@-1,43:48='RETURN',<0>,298:71].[@-1,50:53='line',<0>,298:78]
2023-09-08 21:52:35:846 action-translator LogManager.java:25 qattr [@-1,57:62='RETURN',<0>,298:85].[@-1,64:66='pos',<0>,298:92]
2023-09-08 21:52:35:846 action-translator LogManager.java:25 translate  $instr = instructionExpre.NewReturn($expression.p, $RETURN.line, $RETURN.pos )
2023-09-08 21:52:35:846 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,299:30]
2023-09-08 21:52:35:847 action-translator LogManager.java:25 qattr [@-1,38:47='expression',<0>,299:66].[@-1,49:49='p',<0>,299:77]
2023-09-08 21:52:35:847 action-translator LogManager.java:25 qattr [@-1,53:58='RETURN',<0>,299:81].[@-1,60:63='line',<0>,299:88]
2023-09-08 21:52:35:847 action-translator LogManager.java:25 qattr [@-1,67:72='RETURN',<0>,299:95].[@-1,74:76='pos',<0>,299:102]
2023-09-08 21:52:35:848 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($listParams.l_e, $PRINT_CON.line, localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn() )
2023-09-08 21:52:35:848 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,303:42]
2023-09-08 21:52:35:848 action-translator LogManager.java:25 qattr [@-1,34:43='listParams',<0>,303:75].[@-1,45:47='l_e',<0>,303:86]
2023-09-08 21:52:35:848 action-translator LogManager.java:25 qattr [@-1,51:59='PRINT_CON',<0>,303:92].[@-1,61:64='line',<0>,303:102]
2023-09-08 21:52:35:849 action-translator LogManager.java:25 translate  
                        $lop = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos )
                        $p = instructionExpre.NewLoop($bloque_inst.l, $WHILE.line, $WHILE.pos ) 
                    
2023-09-08 21:52:35:849 action-translator LogManager.java:25 attr [@-1,28:30='lop',<0>,309:25]
2023-09-08 21:52:35:850 action-translator LogManager.java:25 qattr [@-1,60:70='bloque_inst',<0>,309:57].[@-1,72:72='l',<0>,309:69]
2023-09-08 21:52:35:850 action-translator LogManager.java:25 qattr [@-1,76:80='WHILE',<0>,309:73].[@-1,82:85='line',<0>,309:79]
2023-09-08 21:52:35:850 action-translator LogManager.java:25 qattr [@-1,89:93='WHILE',<0>,309:86].[@-1,95:97='pos',<0>,309:92]
2023-09-08 21:52:35:850 action-translator LogManager.java:25 attr [@-1,127:127='p',<0>,310:25]
2023-09-08 21:52:35:850 action-translator LogManager.java:25 qattr [@-1,157:167='bloque_inst',<0>,310:55].[@-1,169:169='l',<0>,310:67]
2023-09-08 21:52:35:850 action-translator LogManager.java:25 qattr [@-1,173:177='WHILE',<0>,310:71].[@-1,179:182='line',<0>,310:77]
2023-09-08 21:52:35:850 action-translator LogManager.java:25 qattr [@-1,186:190='WHILE',<0>,310:84].[@-1,192:194='pos',<0>,310:90]
2023-09-08 21:52:35:851 action-translator LogManager.java:25 translate  $lwh = instruction.NewWhile($expression.p, $bloque_inst.l, $WHILE.line, $WHILE.pos ) 
2023-09-08 21:52:35:851 action-translator LogManager.java:25 attr [@-1,2:4='lwh',<0>,315:33]
2023-09-08 21:52:35:851 action-translator LogManager.java:25 qattr [@-1,30:39='expression',<0>,315:61].[@-1,41:41='p',<0>,315:72]
2023-09-08 21:52:35:852 action-translator LogManager.java:25 qattr [@-1,45:55='bloque_inst',<0>,315:76].[@-1,57:57='l',<0>,315:88]
2023-09-08 21:52:35:852 action-translator LogManager.java:25 qattr [@-1,61:65='WHILE',<0>,315:92].[@-1,67:70='line',<0>,315:98]
2023-09-08 21:52:35:852 action-translator LogManager.java:25 qattr [@-1,74:78='WHILE',<0>,315:105].[@-1,80:82='pos',<0>,315:111]
2023-09-08 21:52:35:853 action-translator LogManager.java:25 translate  $lfor = instruction.NewForIn($ID.text, $expression.p, $bloque_inst.l, $FOR.line, $FOR.pos) 
2023-09-08 21:52:35:853 action-translator LogManager.java:25 attr [@-1,2:5='lfor',<0>,320:37]
2023-09-08 21:52:35:853 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,320:66].[@-1,34:37='text',<0>,320:69]
2023-09-08 21:52:35:853 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,320:76].[@-1,52:52='p',<0>,320:87]
2023-09-08 21:52:35:853 action-translator LogManager.java:25 qattr [@-1,56:66='bloque_inst',<0>,320:91].[@-1,68:68='l',<0>,320:103]
2023-09-08 21:52:35:853 action-translator LogManager.java:25 qattr [@-1,72:74='FOR',<0>,320:107].[@-1,76:79='line',<0>,320:111]
2023-09-08 21:52:35:853 action-translator LogManager.java:25 qattr [@-1,83:85='FOR',<0>,320:118].[@-1,87:89='pos',<0>,320:122]
2023-09-08 21:52:35:854 action-translator LogManager.java:25 translate  $br = instructionExpre.NewBreak(nil, $BREAK.line, $BREAK.pos) 
2023-09-08 21:52:35:854 action-translator LogManager.java:25 attr [@-1,2:3='br',<0>,325:10]
2023-09-08 21:52:35:854 action-translator LogManager.java:25 qattr [@-1,39:43='BREAK',<0>,325:47].[@-1,45:48='line',<0>,325:53]
2023-09-08 21:52:35:854 action-translator LogManager.java:25 qattr [@-1,52:56='BREAK',<0>,325:60].[@-1,58:60='pos',<0>,325:66]
2023-09-08 21:52:35:854 action-translator LogManager.java:25 translate  $br = instructionExpre.NewBreak($expression.p, $BREAK.line, $BREAK.pos ) 
2023-09-08 21:52:35:854 action-translator LogManager.java:25 attr [@-1,2:3='br',<0>,326:21]
2023-09-08 21:52:35:854 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,326:53].[@-1,45:45='p',<0>,326:64]
2023-09-08 21:52:35:854 action-translator LogManager.java:25 qattr [@-1,49:53='BREAK',<0>,326:68].[@-1,55:58='line',<0>,326:74]
2023-09-08 21:52:35:854 action-translator LogManager.java:25 qattr [@-1,62:66='BREAK',<0>,326:81].[@-1,68:70='pos',<0>,326:87]
2023-09-08 21:52:35:855 action-translator LogManager.java:25 translate  $cn = instructionExpre.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-09-08 21:52:35:855 action-translator LogManager.java:25 attr [@-1,2:3='cn',<0>,330:13]
2023-09-08 21:52:35:855 action-translator LogManager.java:25 qattr [@-1,37:44='CONTINUE',<0>,330:48].[@-1,46:49='line',<0>,330:57]
2023-09-08 21:52:35:855 action-translator LogManager.java:25 qattr [@-1,53:60='CONTINUE',<0>,330:64].[@-1,62:64='pos',<0>,330:73]
2023-09-08 21:52:35:856 action-translator LogManager.java:25 translate 
    $l_e = arrayList.New()

2023-09-08 21:52:35:856 action-translator LogManager.java:25 attr [@-1,7:9='l_e',<0>,335:5]
2023-09-08 21:52:35:857 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:857 action-translator LogManager.java:25 translate $l_e.Add($expression.p)
2023-09-08 21:52:35:857 action-translator LogManager.java:25 attr [@-1,1:3='l_e',<0>,2:42]
2023-09-08 21:52:35:857 action-translator LogManager.java:25 qattr [@-1,10:19='expression',<0>,2:51].[@-1,21:21='p',<0>,2:62]
2023-09-08 21:52:35:858 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:858 action-translator LogManager.java:25 translate 
                                              $list.l_e.Add($expression.p)
                                              $l_e = $list.l_e
                                          
2023-09-08 21:52:35:858 action-translator LogManager.java:25 qattr [@-1,49:52='list',<0>,6:47].[@-1,54:56='l_e',<0>,6:52]
2023-09-08 21:52:35:858 action-translator LogManager.java:25 qattr [@-1,63:72='expression',<0>,6:61].[@-1,74:74='p',<0>,6:72]
2023-09-08 21:52:35:858 action-translator LogManager.java:25 attr [@-1,125:127='l_e',<0>,7:47]
2023-09-08 21:52:35:858 action-translator LogManager.java:25 qattr [@-1,132:135='list',<0>,7:54].[@-1,137:139='l_e',<0>,7:59]
2023-09-08 21:52:35:859 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:859 action-translator LogManager.java:25 translate 
    $l_e = arrayList.New()

2023-09-08 21:52:35:859 action-translator LogManager.java:25 attr [@-1,7:9='l_e',<0>,347:5]
2023-09-08 21:52:35:860 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:860 action-translator LogManager.java:25 translate    ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                        $l_e.Add(ref)
                    
2023-09-08 21:52:35:860 action-translator LogManager.java:25 qattr [@-1,43:52='expression',<0>,2:118].[@-1,54:54='p',<0>,2:129]
2023-09-08 21:52:35:860 action-translator LogManager.java:25 qattr [@-1,58:70='es_referencia',<0>,2:133].[@-1,72:74='ref',<0>,2:147]
2023-09-08 21:52:35:860 action-translator LogManager.java:25 attr [@-1,103:105='l_e',<0>,3:25]
2023-09-08 21:52:35:860 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:860 action-translator LogManager.java:25 translate 
                                              ref := instructionExpre.NewParameterBy($expression.p, $es_referencia.ref)
                                              $list.l_e.Add(ref)
                                              $l_e = $list.l_e
                                          
2023-09-08 21:52:35:861 action-translator LogManager.java:25 qattr [@-1,88:97='expression',<0>,8:86].[@-1,99:99='p',<0>,8:97]
2023-09-08 21:52:35:861 action-translator LogManager.java:25 qattr [@-1,103:115='es_referencia',<0>,8:101].[@-1,117:119='ref',<0>,8:115]
2023-09-08 21:52:35:861 action-translator LogManager.java:25 qattr [@-1,170:173='list',<0>,9:47].[@-1,175:177='l_e',<0>,9:52]
2023-09-08 21:52:35:861 action-translator LogManager.java:25 attr [@-1,236:238='l_e',<0>,10:47]
2023-09-08 21:52:35:861 action-translator LogManager.java:25 qattr [@-1,243:246='list',<0>,10:54].[@-1,248:250='l_e',<0>,10:59]
2023-09-08 21:52:35:861 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:862 action-translator LogManager.java:25 translate  $ref = true 
2023-09-08 21:52:35:862 action-translator LogManager.java:25 attr [@-1,2:4='ref',<0>,360:11]
2023-09-08 21:52:35:863 action-translator LogManager.java:25 translate  $ref = false 
2023-09-08 21:52:35:863 action-translator LogManager.java:25 attr [@-1,2:4='ref',<0>,361:7]
2023-09-08 21:52:35:865 action-translator LogManager.java:25 translate  
                        $instr = instruction.NewDeclaration($id.text, $tipos_var.tipo, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                      
2023-09-08 21:52:35:865 action-translator LogManager.java:25 attr [@-1,28:32='instr',<0>,367:25]
2023-09-08 21:52:35:865 action-translator LogManager.java:25 qattr [@-1,64:65='id',<0>,367:61].[@-1,67:70='text',<0>,367:64]
2023-09-08 21:52:35:866 action-translator LogManager.java:25 qattr [@-1,74:82='tipos_var',<0>,367:71].[@-1,84:87='tipo',<0>,367:81]
2023-09-08 21:52:35:866 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,367:88].[@-1,102:102='p',<0>,367:99]
2023-09-08 21:52:35:866 action-translator LogManager.java:25 qattr [@-1,106:110='isVar',<0>,367:103].[@-1,112:114='mut',<0>,367:109]
2023-09-08 21:52:35:866 action-translator LogManager.java:25 qattr [@-1,118:121='asig',<0>,367:115].[@-1,123:126='line',<0>,367:120]
2023-09-08 21:52:35:867 action-translator LogManager.java:25 translate  
                      $instr = instruction.NewDeclaration($id.text, interfaces.NULL, $expression.p, $isVar.mut, $asig.line, localctx.(*DeclaracionContext).GetAsig().GetColumn())
                    
2023-09-08 21:52:35:867 action-translator LogManager.java:25 attr [@-1,26:30='instr',<0>,370:23]
2023-09-08 21:52:35:867 action-translator LogManager.java:25 qattr [@-1,62:63='id',<0>,370:59].[@-1,65:68='text',<0>,370:62]
2023-09-08 21:52:35:867 action-translator LogManager.java:25 qattr [@-1,89:98='expression',<0>,370:86].[@-1,100:100='p',<0>,370:97]
2023-09-08 21:52:35:867 action-translator LogManager.java:25 qattr [@-1,104:108='isVar',<0>,370:101].[@-1,110:112='mut',<0>,370:107]
2023-09-08 21:52:35:867 action-translator LogManager.java:25 qattr [@-1,116:119='asig',<0>,370:113].[@-1,121:124='line',<0>,370:118]
2023-09-08 21:52:35:868 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos, nil, "")
                    
2023-09-08 21:52:35:868 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,379:25]
2023-09-08 21:52:35:868 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,379:67].[@-1,72:75='text',<0>,379:70]
2023-09-08 21:52:35:868 action-translator LogManager.java:25 qattr [@-1,79:90='vector_types',<0>,379:77].[@-1,92:95='tipo',<0>,379:90]
2023-09-08 21:52:35:868 action-translator LogManager.java:25 qattr [@-1,104:108='isVar',<0>,379:102].[@-1,110:112='mut',<0>,379:108]
2023-09-08 21:52:35:868 action-translator LogManager.java:25 qattr [@-1,116:117='id',<0>,379:114].[@-1,119:122='line',<0>,379:117]
2023-09-08 21:52:35:868 action-translator LogManager.java:25 qattr [@-1,126:127='id',<0>,379:124].[@-1,129:131='pos',<0>,379:127]
2023-09-08 21:52:35:869 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, $vector_types.tipo, nil, $isVar.mut, $id.line, $id.pos,$expression.p, "")
                    
2023-09-08 21:52:35:869 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,382:25]
2023-09-08 21:52:35:869 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,382:67].[@-1,72:75='text',<0>,382:70]
2023-09-08 21:52:35:869 action-translator LogManager.java:25 qattr [@-1,79:90='vector_types',<0>,382:77].[@-1,92:95='tipo',<0>,382:90]
2023-09-08 21:52:35:869 action-translator LogManager.java:25 qattr [@-1,104:108='isVar',<0>,382:102].[@-1,110:112='mut',<0>,382:108]
2023-09-08 21:52:35:869 action-translator LogManager.java:25 qattr [@-1,116:117='id',<0>,382:114].[@-1,119:122='line',<0>,382:117]
2023-09-08 21:52:35:870 action-translator LogManager.java:25 qattr [@-1,126:127='id',<0>,382:124].[@-1,129:131='pos',<0>,382:127]
2023-09-08 21:52:35:870 action-translator LogManager.java:25 qattr [@-1,134:143='expression',<0>,382:132].[@-1,145:145='p',<0>,382:143]
2023-09-08 21:52:35:870 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.STRUCT, nil, $isVar.mut, $id.line, $id.pos, nil, $idob.text)
                    
2023-09-08 21:52:35:870 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,386:25]
2023-09-08 21:52:35:870 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,386:67].[@-1,72:75='text',<0>,386:70]
2023-09-08 21:52:35:870 action-translator LogManager.java:25 qattr [@-1,103:107='isVar',<0>,386:101].[@-1,109:111='mut',<0>,386:107]
2023-09-08 21:52:35:871 action-translator LogManager.java:25 qattr [@-1,115:116='id',<0>,386:113].[@-1,118:121='line',<0>,386:116]
2023-09-08 21:52:35:871 action-translator LogManager.java:25 qattr [@-1,125:126='id',<0>,386:123].[@-1,128:130='pos',<0>,386:126]
2023-09-08 21:52:35:871 action-translator LogManager.java:25 qattr [@-1,139:142='idob',<0>,386:137].[@-1,144:147='text',<0>,386:142]
2023-09-08 21:52:35:871 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, interfaces.NULL, nil, $isVar.mut, $id.line, $id.pos, $expression.p, $idob.text)
                    
2023-09-08 21:52:35:871 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,396:25]
2023-09-08 21:52:35:873 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,396:67].[@-1,72:75='text',<0>,396:70]
2023-09-08 21:52:35:873 action-translator LogManager.java:25 qattr [@-1,101:105='isVar',<0>,396:99].[@-1,107:109='mut',<0>,396:105]
2023-09-08 21:52:35:873 action-translator LogManager.java:25 qattr [@-1,113:114='id',<0>,396:111].[@-1,116:119='line',<0>,396:114]
2023-09-08 21:52:35:873 action-translator LogManager.java:25 qattr [@-1,123:124='id',<0>,396:121].[@-1,126:128='pos',<0>,396:124]
2023-09-08 21:52:35:874 action-translator LogManager.java:25 qattr [@-1,132:141='expression',<0>,396:130].[@-1,143:143='p',<0>,396:141]
2023-09-08 21:52:35:874 action-translator LogManager.java:25 qattr [@-1,147:150='idob',<0>,396:145].[@-1,152:155='text',<0>,396:150]
2023-09-08 21:52:35:874 action-translator LogManager.java:25 translate 
                        $instr = instruction.NewVectorDeclaration($id.text, $tipos_var.tipo, nil, $isVar.mut, $id.line, $id.pos, $expression.p, "")
                    
2023-09-08 21:52:35:874 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,399:25]
2023-09-08 21:52:35:874 action-translator LogManager.java:25 qattr [@-1,69:70='id',<0>,399:67].[@-1,72:75='text',<0>,399:70]
2023-09-08 21:52:35:874 action-translator LogManager.java:25 qattr [@-1,79:87='tipos_var',<0>,399:77].[@-1,89:92='tipo',<0>,399:87]
2023-09-08 21:52:35:875 action-translator LogManager.java:25 qattr [@-1,101:105='isVar',<0>,399:99].[@-1,107:109='mut',<0>,399:105]
2023-09-08 21:52:35:875 action-translator LogManager.java:25 qattr [@-1,113:114='id',<0>,399:111].[@-1,116:119='line',<0>,399:114]
2023-09-08 21:52:35:875 action-translator LogManager.java:25 qattr [@-1,123:124='id',<0>,399:121].[@-1,126:128='pos',<0>,399:124]
2023-09-08 21:52:35:875 action-translator LogManager.java:25 qattr [@-1,132:141='expression',<0>,399:130].[@-1,143:143='p',<0>,399:141]
2023-09-08 21:52:35:876 action-translator LogManager.java:25 translate  $mut = true 
2023-09-08 21:52:35:876 action-translator LogManager.java:25 attr [@-1,2:4='mut',<0>,404:11]
2023-09-08 21:52:35:878 action-translator LogManager.java:25 translate  $mut = true 
2023-09-08 21:52:35:878 action-translator LogManager.java:25 attr [@-1,2:4='mut',<0>,408:11]
2023-09-08 21:52:35:878 action-translator LogManager.java:25 translate  $mut = false 
2023-09-08 21:52:35:878 action-translator LogManager.java:25 attr [@-1,2:4='mut',<0>,409:11]
2023-09-08 21:52:35:879 action-translator LogManager.java:25 translate  $tipo = interfaces.VECTOR 
2023-09-08 21:52:35:879 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,418:28]
2023-09-08 21:52:35:880 action-translator LogManager.java:25 translate  $tipo = $tipos_var.tipo 
2023-09-08 21:52:35:880 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,419:25]
2023-09-08 21:52:35:880 action-translator LogManager.java:25 qattr [@-1,10:18='tipos_var',<0>,419:33].[@-1,20:23='tipo',<0>,419:43]
2023-09-08 21:52:35:880 action-translator LogManager.java:25 translate 
    $ty = arrayList.New()

2023-09-08 21:52:35:881 action-translator LogManager.java:25 attr [@-1,7:8='ty',<0>,426:5]
2023-09-08 21:52:35:881 action-translator LogManager.java:25 translate 
                                        nType := interfaces.NewArrayType(interfaces.ARRAY, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                        $array_type.ty.Add(nType)
                                        $ty = $array_type.ty
                                    
2023-09-08 21:52:35:881 action-translator LogManager.java:25 qattr [@-1,94:103='expression',<0>,429:92].[@-1,105:105='p',<0>,429:103]
2023-09-08 21:52:35:881 action-translator LogManager.java:25 qattr [@-1,109:114='CORIZQ',<0>,429:107].[@-1,116:119='line',<0>,429:114]
2023-09-08 21:52:35:882 action-translator LogManager.java:25 qattr [@-1,123:128='CORIZQ',<0>,429:121].[@-1,130:132='pos',<0>,429:128]
2023-09-08 21:52:35:883 action-translator LogManager.java:25 qattr [@-1,178:187='array_type',<0>,430:41].[@-1,189:190='ty',<0>,430:52]
2023-09-08 21:52:35:883 action-translator LogManager.java:25 attr [@-1,245:246='ty',<0>,431:41]
2023-09-08 21:52:35:883 action-translator LogManager.java:25 qattr [@-1,251:260='array_type',<0>,431:47].[@-1,262:263='ty',<0>,431:58]
2023-09-08 21:52:35:883 action-translator LogManager.java:25 translate 
                                      nType := interfaces.NewArrayType($tipos_var.tipo, $expression.p, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    
2023-09-08 21:52:35:884 action-translator LogManager.java:25 qattr [@-1,74:82='tipos_var',<0>,434:72].[@-1,84:87='tipo',<0>,434:82]
2023-09-08 21:52:35:884 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,434:89].[@-1,102:102='p',<0>,434:100]
2023-09-08 21:52:35:884 action-translator LogManager.java:25 qattr [@-1,106:111='CORIZQ',<0>,434:104].[@-1,113:116='line',<0>,434:111]
2023-09-08 21:52:35:884 action-translator LogManager.java:25 qattr [@-1,120:125='CORIZQ',<0>,434:118].[@-1,127:129='pos',<0>,434:125]
2023-09-08 21:52:35:884 action-translator LogManager.java:25 attr [@-1,173:174='ty',<0>,435:39]
2023-09-08 21:52:35:884 action-translator LogManager.java:25 translate 
                                      nType := interfaces.NewArrayType($tipos_var.tipo, nil, $CORIZQ.line, $CORIZQ.pos )
                                      $ty.Add(nType)
                                    
2023-09-08 21:52:35:885 action-translator LogManager.java:25 qattr [@-1,74:82='tipos_var',<0>,439:72].[@-1,84:87='tipo',<0>,439:82]
2023-09-08 21:52:35:885 action-translator LogManager.java:25 qattr [@-1,96:101='CORIZQ',<0>,439:94].[@-1,103:106='line',<0>,439:101]
2023-09-08 21:52:35:885 action-translator LogManager.java:25 qattr [@-1,110:115='CORIZQ',<0>,439:108].[@-1,117:119='pos',<0>,439:115]
2023-09-08 21:52:35:885 action-translator LogManager.java:25 attr [@-1,163:164='ty',<0>,440:39]
2023-09-08 21:52:35:888 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p, nil, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-08 21:52:35:888 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,445:28]
2023-09-08 21:52:35:890 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,445:63].[@-1,39:42='text',<0>,445:66]
2023-09-08 21:52:35:890 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,445:72].[@-1,56:56='p',<0>,445:83]
2023-09-08 21:52:35:892 action-translator LogManager.java:25 qattr [@-1,65:66='id',<0>,445:92].[@-1,68:71='line',<0>,445:95]
2023-09-08 21:52:35:893 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p, $list_index.lista, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-08 21:52:35:894 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,447:39]
2023-09-08 21:52:35:894 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,447:74].[@-1,39:42='text',<0>,447:77]
2023-09-08 21:52:35:894 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,447:83].[@-1,56:56='p',<0>,447:94]
2023-09-08 21:52:35:896 action-translator LogManager.java:25 qattr [@-1,60:69='list_index',<0>,447:98].[@-1,71:75='lista',<0>,447:109]
2023-09-08 21:52:35:897 action-translator LogManager.java:25 qattr [@-1,79:80='id',<0>,447:117].[@-1,82:85='line',<0>,447:120]
2023-09-08 21:52:35:898 action-translator LogManager.java:25 translate  $instr = instruction.NewAssignmentStruct($l_AccessStruct.l, $expression.p, $l_AccessStruct.start.GetLine(),$l_AccessStruct.start.GetColumn()) 
2023-09-08 21:52:35:898 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,450:38]
2023-09-08 21:52:35:898 action-translator LogManager.java:25 qattr [@-1,43:56='l_AccessStruct',<0>,450:79].[@-1,58:58='l',<0>,450:94]
2023-09-08 21:52:35:898 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,450:98].[@-1,73:73='p',<0>,450:109]
2023-09-08 21:52:35:898 action-translator LogManager.java:25 qattr [@-1,77:90='l_AccessStruct',<0>,450:113].[@-1,92:96='start',<0>,450:128]
2023-09-08 21:52:35:898 action-translator LogManager.java:25 qattr [@-1,109:122='l_AccessStruct',<0>,450:145].[@-1,124:128='start',<0>,450:160]
2023-09-08 21:52:35:903 action-translator LogManager.java:25 translate $instr = instruction.NewAssignmentVec($id.text, $index.p, $l_AccessStruct.l, $val.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn() )
2023-09-08 21:52:35:903 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,454:76]
2023-09-08 21:52:35:903 action-translator LogManager.java:25 qattr [@-1,39:40='id',<0>,454:114].[@-1,42:45='text',<0>,454:117]
2023-09-08 21:52:35:903 action-translator LogManager.java:25 qattr [@-1,49:53='index',<0>,454:124].[@-1,55:55='p',<0>,454:130]
2023-09-08 21:52:35:903 action-translator LogManager.java:25 qattr [@-1,59:72='l_AccessStruct',<0>,454:134].[@-1,74:74='l',<0>,454:149]
2023-09-08 21:52:35:903 action-translator LogManager.java:25 qattr [@-1,78:80='val',<0>,454:153].[@-1,82:82='p',<0>,454:157]
2023-09-08 21:52:35:903 action-translator LogManager.java:25 qattr [@-1,86:87='id',<0>,454:161].[@-1,89:92='line',<0>,454:164]
2023-09-08 21:52:35:904 action-translator LogManager.java:25 translate $instr = instruction.NewIncrement($id.text,$expression.p, $id.line, localctx.(*AsignacionContext).GetId().GetColumn())
2023-09-08 21:52:35:904 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,460:29]
2023-09-08 21:52:35:904 action-translator LogManager.java:25 qattr [@-1,35:36='id',<0>,460:63].[@-1,38:41='text',<0>,460:66]
2023-09-08 21:52:35:904 action-translator LogManager.java:25 qattr [@-1,44:53='expression',<0>,460:72].[@-1,55:55='p',<0>,460:83]
2023-09-08 21:52:35:905 action-translator LogManager.java:25 qattr [@-1,59:60='id',<0>,460:87].[@-1,62:65='line',<0>,460:90]
2023-09-08 21:52:35:906 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:907 action-translator LogManager.java:25 translate 
            $l = arrayList.New()
            $l.Add($ID.text)

2023-09-08 21:52:35:907 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-08 21:52:35:907 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-08 21:52:35:907 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,4:20].[@-1,59:62='text',<0>,4:23]
2023-09-08 21:52:35:907 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:908 action-translator LogManager.java:25 translate 
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            
2023-09-08 21:52:35:908 action-translator LogManager.java:25 qattr [@-1,48:51='list',<0>,9:46].[@-1,53:53='l',<0>,9:51]
2023-09-08 21:52:35:908 action-translator LogManager.java:25 qattr [@-1,60:61='ID',<0>,9:58].[@-1,63:66='text',<0>,9:61]
2023-09-08 21:52:35:908 action-translator LogManager.java:25 attr [@-1,116:116='l',<0>,10:46]
2023-09-08 21:52:35:908 action-translator LogManager.java:25 qattr [@-1,121:124='list',<0>,10:51].[@-1,126:126='l',<0>,10:56]
2023-09-08 21:52:35:908 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:909 action-translator LogManager.java:25 translate 
    $lista = arrayList.New()

2023-09-08 21:52:35:909 action-translator LogManager.java:25 attr [@-1,7:11='lista',<0>,478:5]
2023-09-08 21:52:35:909 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:909 action-translator LogManager.java:25 translate $lista.Add($index_array.index)
2023-09-08 21:52:35:910 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,2:44]
2023-09-08 21:52:35:910 action-translator LogManager.java:25 qattr [@-1,12:22='index_array',<0>,2:55].[@-1,24:28='index',<0>,2:67]
2023-09-08 21:52:35:910 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:910 action-translator LogManager.java:25 translate 
                                                $listi.lista.Add($index_array.index)
                                                $lista = $listi.lista
                                            
2023-09-08 21:52:35:910 action-translator LogManager.java:25 qattr [@-1,51:55='listi',<0>,6:49].[@-1,57:61='lista',<0>,6:55]
2023-09-08 21:52:35:910 action-translator LogManager.java:25 qattr [@-1,68:78='index_array',<0>,6:66].[@-1,80:84='index',<0>,6:78]
2023-09-08 21:52:35:910 action-translator LogManager.java:25 attr [@-1,137:141='lista',<0>,7:49]
2023-09-08 21:52:35:910 action-translator LogManager.java:25 qattr [@-1,146:150='listi',<0>,7:58].[@-1,152:156='lista',<0>,7:64]
2023-09-08 21:52:35:911 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:911 action-translator LogManager.java:25 translate $index = $expression.p
2023-09-08 21:52:35:911 action-translator LogManager.java:25 attr [@-1,1:5='index',<0>,488:29]
2023-09-08 21:52:35:911 action-translator LogManager.java:25 qattr [@-1,10:19='expression',<0>,488:38].[@-1,21:21='p',<0>,488:49]
2023-09-08 21:52:35:912 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $bloque_inst.l, nil,nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-08 21:52:35:912 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,493:34]
2023-09-08 21:52:35:913 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,493:61].[@-1,39:39='p',<0>,493:72]
2023-09-08 21:52:35:913 action-translator LogManager.java:25 qattr [@-1,43:53='bloque_inst',<0>,493:76].[@-1,55:55='l',<0>,493:88]
2023-09-08 21:52:35:913 action-translator LogManager.java:25 qattr [@-1,68:69='IF',<0>,493:101].[@-1,71:74='line',<0>,493:104]
2023-09-08 21:52:35:913 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bprin.l,nil,$belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-08 21:52:35:913 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,494:69]
2023-09-08 21:52:35:913 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,494:96].[@-1,39:39='p',<0>,494:107]
2023-09-08 21:52:35:913 action-translator LogManager.java:25 qattr [@-1,42:46='bprin',<0>,494:110].[@-1,48:48='l',<0>,494:116]
2023-09-08 21:52:35:913 action-translator LogManager.java:25 qattr [@-1,55:59='belse',<0>,494:123].[@-1,61:61='l',<0>,494:129]
2023-09-08 21:52:35:913 action-translator LogManager.java:25 qattr [@-1,65:66='IF',<0>,494:133].[@-1,68:71='line',<0>,494:136]
2023-09-08 21:52:35:914 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, nil, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-08 21:52:35:914 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,495:53]
2023-09-08 21:52:35:914 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,495:80].[@-1,39:39='p',<0>,495:91]
2023-09-08 21:52:35:914 action-translator LogManager.java:25 qattr [@-1,42:46='bprin',<0>,495:94].[@-1,48:48='l',<0>,495:100]
2023-09-08 21:52:35:914 action-translator LogManager.java:25 qattr [@-1,51:61='list_elseif',<0>,495:103].[@-1,63:67='lista',<0>,495:115]
2023-09-08 21:52:35:914 action-translator LogManager.java:25 qattr [@-1,76:77='IF',<0>,495:128].[@-1,79:82='line',<0>,495:131]
2023-09-08 21:52:35:915 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bprin.l,$list_elseif.lista, $belse.l, $IF.line, localctx.(*If_sentContext).Get_IF().GetColumn() )
2023-09-08 21:52:35:915 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,496:79]
2023-09-08 21:52:35:915 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,496:106].[@-1,39:39='p',<0>,496:117]
2023-09-08 21:52:35:915 action-translator LogManager.java:25 qattr [@-1,42:46='bprin',<0>,496:120].[@-1,48:48='l',<0>,496:126]
2023-09-08 21:52:35:915 action-translator LogManager.java:25 qattr [@-1,51:61='list_elseif',<0>,496:129].[@-1,63:67='lista',<0>,496:141]
2023-09-08 21:52:35:915 action-translator LogManager.java:25 qattr [@-1,71:75='belse',<0>,496:149].[@-1,77:77='l',<0>,496:155]
2023-09-08 21:52:35:915 action-translator LogManager.java:25 qattr [@-1,81:82='IF',<0>,496:159].[@-1,84:87='line',<0>,496:162]
2023-09-08 21:52:35:917 action-translator LogManager.java:25 translate $p = instruction.NewIfExpre($expression.p, nil ,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, nil, $belse_e.p )
2023-09-08 21:52:35:917 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,501:69]
2023-09-08 21:52:35:917 action-translator LogManager.java:25 qattr [@-1,29:38='expression',<0>,501:97].[@-1,40:40='p',<0>,501:108]
2023-09-08 21:52:35:917 action-translator LogManager.java:25 qattr [@-1,59:60='IF',<0>,501:127].[@-1,62:65='line',<0>,501:130]
2023-09-08 21:52:35:917 action-translator LogManager.java:25 qattr [@-1,123:129='bprin_e',<0>,501:191].[@-1,131:131='p',<0>,501:199]
2023-09-08 21:52:35:917 action-translator LogManager.java:25 qattr [@-1,140:146='belse_e',<0>,501:208].[@-1,148:148='p',<0>,501:216]
2023-09-08 21:52:35:918 action-translator LogManager.java:25 translate 
        $p = instruction.NewIfExpre($expression.p,nil,nil, nil, $IF.line, localctx.(*If_expContext).Get_IF().GetColumn(), true, $bprin_e.p, $list_elseif_exp.lista,  $belse_e.p )
    
2023-09-08 21:52:35:918 action-translator LogManager.java:25 attr [@-1,11:11='p',<0>,503:9]
2023-09-08 21:52:35:918 action-translator LogManager.java:25 qattr [@-1,39:48='expression',<0>,503:37].[@-1,50:50='p',<0>,503:48]
2023-09-08 21:52:35:918 action-translator LogManager.java:25 qattr [@-1,67:68='IF',<0>,503:65].[@-1,70:73='line',<0>,503:68]
2023-09-08 21:52:35:918 action-translator LogManager.java:25 qattr [@-1,131:137='bprin_e',<0>,503:129].[@-1,139:139='p',<0>,503:137]
2023-09-08 21:52:35:918 action-translator LogManager.java:25 qattr [@-1,143:157='list_elseif_exp',<0>,503:141].[@-1,159:163='lista',<0>,503:157]
2023-09-08 21:52:35:919 action-translator LogManager.java:25 qattr [@-1,168:174='belse_e',<0>,503:166].[@-1,176:176='p',<0>,503:174]
2023-09-08 21:52:35:919 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2023-09-08 21:52:35:919 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,508:7]
2023-09-08 21:52:35:920 action-translator LogManager.java:25 translate 
                    listInt := localctx.(*List_elseifContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetInstr())
                    }
                    
2023-09-08 21:52:35:920 action-translator LogManager.java:25 attr [@-1,149:153='lista',<0>,512:25]
2023-09-08 21:52:35:920 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2023-09-08 21:52:35:920 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,518:7]
2023-09-08 21:52:35:921 action-translator LogManager.java:25 translate 
                    listInt := localctx.(*List_elseif_expContext).GetList()
                    for _, e := range listInt {
                        $lista.Add(e.GetP())
                    }
                    
2023-09-08 21:52:35:921 action-translator LogManager.java:25 attr [@-1,153:157='lista',<0>,522:25]
2023-09-08 21:52:35:922 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p,$bloque_inst.l,nil,nil, $ELSE.line, localctx.(*Else_ifContext).Get_ELSE().GetColumn() )
2023-09-08 21:52:35:922 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,528:39]
2023-09-08 21:52:35:922 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,528:66].[@-1,39:39='p',<0>,528:77]
2023-09-08 21:52:35:923 action-translator LogManager.java:25 qattr [@-1,42:52='bloque_inst',<0>,528:80].[@-1,54:54='l',<0>,528:92]
2023-09-08 21:52:35:923 action-translator LogManager.java:25 qattr [@-1,66:69='ELSE',<0>,528:104].[@-1,71:74='line',<0>,528:109]
2023-09-08 21:52:35:924 action-translator LogManager.java:25 translate $p = instruction.NewIfExpre($expression.p,nil,nil,nil, $ELSE.line, localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, $bloque_exp.p, nil, nil )
2023-09-08 21:52:35:924 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,532:38]
2023-09-08 21:52:35:924 action-translator LogManager.java:25 qattr [@-1,29:38='expression',<0>,532:66].[@-1,40:40='p',<0>,532:77]
2023-09-08 21:52:35:924 action-translator LogManager.java:25 qattr [@-1,56:59='ELSE',<0>,532:93].[@-1,61:64='line',<0>,532:98]
2023-09-08 21:52:35:925 action-translator LogManager.java:25 qattr [@-1,129:138='bloque_exp',<0>,532:166].[@-1,140:140='p',<0>,532:177]
2023-09-08 21:52:35:926 action-translator LogManager.java:25 translate 
                        $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-08 21:52:35:926 action-translator LogManager.java:25 attr [@-1,27:31='instr',<0>,539:25]
2023-09-08 21:52:35:926 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,539:60].[@-1,73:73='p',<0>,539:71]
2023-09-08 21:52:35:926 action-translator LogManager.java:25 qattr [@-1,77:82='brazos',<0>,539:75].[@-1,84:91='l_brazos',<0>,539:82]
2023-09-08 21:52:35:926 action-translator LogManager.java:25 qattr [@-1,105:110='SWITCH',<0>,539:103].[@-1,112:115='line',<0>,539:110]
2023-09-08 21:52:35:927 action-translator LogManager.java:25 translate 
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, $bloque_inst.l, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-08 21:52:35:927 action-translator LogManager.java:25 attr [@-1,29:33='instr',<0>,542:27]
2023-09-08 21:52:35:927 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,542:62].[@-1,75:75='p',<0>,542:73]
2023-09-08 21:52:35:927 action-translator LogManager.java:25 qattr [@-1,79:84='brazos',<0>,542:77].[@-1,86:93='l_brazos',<0>,542:84]
2023-09-08 21:52:35:927 action-translator LogManager.java:25 qattr [@-1,97:107='bloque_inst',<0>,542:95].[@-1,109:109='l',<0>,542:107]
2023-09-08 21:52:35:927 action-translator LogManager.java:25 qattr [@-1,118:123='SWITCH',<0>,542:116].[@-1,125:128='line',<0>,542:123]
2023-09-08 21:52:35:928 action-translator LogManager.java:25 translate 
                          $instr = instructionExpre.NewMatch($expression.p, $brazos.l_brazos, nil,  $instruccion_dentro.instr,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, false )
      
2023-09-08 21:52:35:928 action-translator LogManager.java:25 attr [@-1,29:33='instr',<0>,545:27]
2023-09-08 21:52:35:928 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,545:62].[@-1,75:75='p',<0>,545:73]
2023-09-08 21:52:35:928 action-translator LogManager.java:25 qattr [@-1,79:84='brazos',<0>,545:77].[@-1,86:93='l_brazos',<0>,545:84]
2023-09-08 21:52:35:928 action-translator LogManager.java:25 qattr [@-1,103:120='instruccion_dentro',<0>,545:101].[@-1,122:126='instr',<0>,545:120]
2023-09-08 21:52:35:928 action-translator LogManager.java:25 qattr [@-1,131:136='SWITCH',<0>,545:129].[@-1,138:141='line',<0>,545:136]
2023-09-08 21:52:35:929 action-translator LogManager.java:25 translate 
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil, nil, $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), nil, true )
      
2023-09-08 21:52:35:929 action-translator LogManager.java:25 attr [@-1,27:27='p',<0>,550:25]
2023-09-08 21:52:35:929 action-translator LogManager.java:25 qattr [@-1,58:60='exp',<0>,550:56].[@-1,62:62='p',<0>,550:60]
2023-09-08 21:52:35:929 action-translator LogManager.java:25 qattr [@-1,66:74='brazosexp',<0>,550:64].[@-1,76:83='l_brazos',<0>,550:74]
2023-09-08 21:52:35:929 action-translator LogManager.java:25 qattr [@-1,97:102='SWITCH',<0>,550:95].[@-1,104:107='line',<0>,550:102]
2023-09-08 21:52:35:930 action-translator LogManager.java:25 translate 
                        $p = instructionExpre.NewMatch($exp.p, $brazosexp.l_brazos, nil,  nil,  $SWITCH.line, localctx.(*Switch_sentContext).Get_SWITCH().GetColumn(), $exp_.p, true )
      
2023-09-08 21:52:35:930 action-translator LogManager.java:25 attr [@-1,27:27='p',<0>,553:25]
2023-09-08 21:52:35:930 action-translator LogManager.java:25 qattr [@-1,58:60='exp',<0>,553:56].[@-1,62:62='p',<0>,553:60]
2023-09-08 21:52:35:930 action-translator LogManager.java:25 qattr [@-1,66:74='brazosexp',<0>,553:64].[@-1,76:83='l_brazos',<0>,553:74]
2023-09-08 21:52:35:930 action-translator LogManager.java:25 qattr [@-1,99:104='SWITCH',<0>,553:97].[@-1,106:109='line',<0>,553:104]
2023-09-08 21:52:35:930 action-translator LogManager.java:25 qattr [@-1,170:173='exp_',<0>,553:168].[@-1,175:175='p',<0>,553:173]
2023-09-08 21:52:35:931 action-translator LogManager.java:25 translate 
    $l_brazos = arrayList.New()

2023-09-08 21:52:35:931 action-translator LogManager.java:25 attr [@-1,7:14='l_brazos',<0>,560:5]
2023-09-08 21:52:35:931 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:932 action-translator LogManager.java:25 translate $l_brazos.Add($matchbrazo.brazo)
2023-09-08 21:52:35:932 action-translator LogManager.java:25 attr [@-1,1:8='l_brazos',<0>,2:42]
2023-09-08 21:52:35:933 action-translator LogManager.java:25 qattr [@-1,15:24='matchbrazo',<0>,2:56].[@-1,26:30='brazo',<0>,2:67]
2023-09-08 21:52:35:933 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:933 action-translator LogManager.java:25 translate 
                                              $listb.l_brazos.Add($matchbrazo.brazo)
                                              $l_brazos = $listb.l_brazos
                                          
2023-09-08 21:52:35:934 action-translator LogManager.java:25 qattr [@-1,49:53='listb',<0>,6:47].[@-1,55:62='l_brazos',<0>,6:53]
2023-09-08 21:52:35:934 action-translator LogManager.java:25 qattr [@-1,69:78='matchbrazo',<0>,6:67].[@-1,80:84='brazo',<0>,6:78]
2023-09-08 21:52:35:934 action-translator LogManager.java:25 attr [@-1,135:142='l_brazos',<0>,7:47]
2023-09-08 21:52:35:934 action-translator LogManager.java:25 qattr [@-1,147:151='listb',<0>,7:59].[@-1,153:160='l_brazos',<0>,7:65]
2023-09-08 21:52:35:934 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:935 action-translator LogManager.java:25 translate 
    $l_brazos = arrayList.New()

2023-09-08 21:52:35:935 action-translator LogManager.java:25 attr [@-1,7:14='l_brazos',<0>,571:5]
2023-09-08 21:52:35:935 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:935 action-translator LogManager.java:25 translate $l_brazos.Add($matchbrazo_exp.brazo)
2023-09-08 21:52:35:935 action-translator LogManager.java:25 attr [@-1,1:8='l_brazos',<0>,2:46]
2023-09-08 21:52:35:935 action-translator LogManager.java:25 qattr [@-1,15:28='matchbrazo_exp',<0>,2:60].[@-1,30:34='brazo',<0>,2:75]
2023-09-08 21:52:35:935 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:936 action-translator LogManager.java:25 translate 
                                              $listb.l_brazos.Add($matchbrazo_exp.brazo)
                                              $l_brazos = $listb.l_brazos
                                          
2023-09-08 21:52:35:936 action-translator LogManager.java:25 qattr [@-1,49:53='listb',<0>,6:47].[@-1,55:62='l_brazos',<0>,6:53]
2023-09-08 21:52:35:936 action-translator LogManager.java:25 qattr [@-1,69:82='matchbrazo_exp',<0>,6:67].[@-1,84:88='brazo',<0>,6:82]
2023-09-08 21:52:35:936 action-translator LogManager.java:25 attr [@-1,139:146='l_brazos',<0>,7:47]
2023-09-08 21:52:35:936 action-translator LogManager.java:25 qattr [@-1,151:155='listb',<0>,7:59].[@-1,157:164='l_brazos',<0>,7:65]
2023-09-08 21:52:35:936 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:937 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, $bloque_inst.l, nil, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) 
2023-09-08 21:52:35:937 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,581:47]
2023-09-08 21:52:35:937 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,581:87].[@-1,56:60='lisop',<0>,581:101]
2023-09-08 21:52:35:938 action-translator LogManager.java:25 qattr [@-1,64:74='bloque_inst',<0>,581:109].[@-1,76:76='l',<0>,581:121]
2023-09-08 21:52:35:938 action-translator LogManager.java:25 qattr [@-1,85:86='th',<0>,581:130].[@-1,88:91='line',<0>,581:133]
2023-09-08 21:52:35:938 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  $instruccion_dentro.instr, $th.line, localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil ) 
2023-09-08 21:52:35:938 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,582:54]
2023-09-08 21:52:35:938 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,582:94].[@-1,56:60='lisop',<0>,582:108]
2023-09-08 21:52:35:938 action-translator LogManager.java:25 qattr [@-1,70:87='instruccion_dentro',<0>,582:122].[@-1,89:93='instr',<0>,582:141]
2023-09-08 21:52:35:939 action-translator LogManager.java:25 qattr [@-1,97:98='th',<0>,582:149].[@-1,100:103='line',<0>,582:152]
2023-09-08 21:52:35:939 action-translator LogManager.java:25 translate  $brazo = instructionExpre.NewBrazoMatch($listaOpciones.lisop, nil,  nil, $th.line, localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), $expression.p ) 
2023-09-08 21:52:35:939 action-translator LogManager.java:25 attr [@-1,2:6='brazo',<0>,589:41]
2023-09-08 21:52:35:939 action-translator LogManager.java:25 qattr [@-1,42:54='listaOpciones',<0>,589:81].[@-1,56:60='lisop',<0>,589:95]
2023-09-08 21:52:35:939 action-translator LogManager.java:25 qattr [@-1,75:76='th',<0>,589:114].[@-1,78:81='line',<0>,589:117]
2023-09-08 21:52:35:940 action-translator LogManager.java:25 qattr [@-1,140:149='expression',<0>,589:179].[@-1,151:151='p',<0>,589:190]
2023-09-08 21:52:35:940 action-translator LogManager.java:25 translate 
    $lisop = arrayList.New()

2023-09-08 21:52:35:940 action-translator LogManager.java:25 attr [@-1,7:11='lisop',<0>,595:5]
2023-09-08 21:52:35:940 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:941 action-translator LogManager.java:25 translate 
                    $lisop.Add( $primitivo.p )
                  
2023-09-08 21:52:35:941 action-translator LogManager.java:25 attr [@-1,23:27='lisop',<0>,3:21]
2023-09-08 21:52:35:941 action-translator LogManager.java:25 qattr [@-1,35:43='primitivo',<0>,3:33].[@-1,45:45='p',<0>,3:43]
2023-09-08 21:52:35:942 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:943 action-translator LogManager.java:25 translate 
                                                      $list.lisop.Add( $primitivo.p )
                                                      $lisop =  $list.lisop
                                                    
2023-09-08 21:52:35:943 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,8:55].[@-1,62:66='lisop',<0>,8:60]
2023-09-08 21:52:35:943 action-translator LogManager.java:25 qattr [@-1,74:82='primitivo',<0>,8:72].[@-1,84:84='p',<0>,8:82]
2023-09-08 21:52:35:943 action-translator LogManager.java:25 attr [@-1,144:148='lisop',<0>,9:55]
2023-09-08 21:52:35:943 action-translator LogManager.java:25 qattr [@-1,154:157='list',<0>,9:65].[@-1,159:163='lisop',<0>,9:70]
2023-09-08 21:52:35:944 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:944 action-translator LogManager.java:25 translate $l = $instrucciones.l 
2023-09-08 21:52:35:944 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,607:41]
2023-09-08 21:52:35:944 action-translator LogManager.java:25 qattr [@-1,6:18='instrucciones',<0>,607:46].[@-1,20:20='l',<0>,607:60]
2023-09-08 21:52:35:945 action-translator LogManager.java:25 translate $l = arrayList.New()
2023-09-08 21:52:35:945 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,608:27]
2023-09-08 21:52:35:945 action-translator LogManager.java:25 translate $l = $instrucciones.l 
2023-09-08 21:52:35:945 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,611:24]
2023-09-08 21:52:35:945 action-translator LogManager.java:25 qattr [@-1,6:18='instrucciones',<0>,611:29].[@-1,20:20='l',<0>,611:43]
2023-09-08 21:52:35:945 action-translator LogManager.java:25 translate $l = arrayList.New()
2023-09-08 21:52:35:946 action-translator LogManager.java:25 attr [@-1,1:1='l',<0>,612:9]
2023-09-08 21:52:35:946 action-translator LogManager.java:25 translate $p = $expression.p
2023-09-08 21:52:35:948 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,616:38]
2023-09-08 21:52:35:951 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,616:43].[@-1,17:17='p',<0>,616:54]
2023-09-08 21:52:35:954 action-translator LogManager.java:25 translate $tipo = interfaces.INTEGER
2023-09-08 21:52:35:955 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,622:26]
2023-09-08 21:52:35:955 action-translator LogManager.java:25 translate $tipo = interfaces.STRING
2023-09-08 21:52:35:955 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,623:27]
2023-09-08 21:52:35:955 action-translator LogManager.java:25 translate $tipo = interfaces.FLOAT
2023-09-08 21:52:35:955 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,624:25]
2023-09-08 21:52:35:956 action-translator LogManager.java:25 translate $tipo = interfaces.BOOLEAN
2023-09-08 21:52:35:956 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,625:25]
2023-09-08 21:52:35:956 action-translator LogManager.java:25 translate $tipo = interfaces.STR
2023-09-08 21:52:35:956 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,626:23]
2023-09-08 21:52:35:956 action-translator LogManager.java:25 translate $tipo = interfaces.STRUCT
2023-09-08 21:52:35:956 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,627:24]
2023-09-08 21:52:35:959 action-translator LogManager.java:25 translate $tipo = interfaces.CHAR
2023-09-08 21:52:35:960 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,628:24]
2023-09-08 21:52:35:960 action-translator LogManager.java:25 translate $tipo = interfaces.ARRAY
2023-09-08 21:52:35:960 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,630:25]
2023-09-08 21:52:35:960 action-translator LogManager.java:25 translate $tipo = interfaces.VECTOR
2023-09-08 21:52:35:960 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,631:26]
2023-09-08 21:52:35:963 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:963 action-translator LogManager.java:25 translate $p = $expr_arit.p
2023-09-08 21:52:35:964 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:44]
2023-09-08 21:52:35:964 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,2:49].[@-1,16:16='p',<0>,2:59]
2023-09-08 21:52:35:964 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2023-09-08 21:52:35:964 action-translator LogManager.java:25 translate  $p = expresion.NewRangeF($e_ini.p, $e_fin.p, $e_ini.start.GetLine(),$e_ini.start.GetColumn() ) 
2023-09-08 21:52:35:965 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:159]
2023-09-08 21:52:35:965 action-translator LogManager.java:25 qattr [@-1,27:31='e_ini',<0>,5:184].[@-1,33:33='p',<0>,5:190]
2023-09-08 21:52:35:965 action-translator LogManager.java:25 qattr [@-1,37:41='e_fin',<0>,5:194].[@-1,43:43='p',<0>,5:200]
2023-09-08 21:52:35:965 action-translator LogManager.java:25 qattr [@-1,47:51='e_ini',<0>,5:204].[@-1,53:57='start',<0>,5:210]
2023-09-08 21:52:35:965 action-translator LogManager.java:25 qattr [@-1,70:74='e_ini',<0>,5:227].[@-1,76:80='start',<0>,5:233]
2023-09-08 21:52:35:965 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2023-09-08 21:52:35:970 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:970 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opU.p,"-",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-08 21:52:35:971 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:76]
2023-09-08 21:52:35:971 action-translator LogManager.java:25 qattr [@-1,29:31='opU',<0>,2:104].[@-1,33:33='p',<0>,2:108]
2023-09-08 21:52:35:971 action-translator LogManager.java:25 qattr [@-1,50:51='op',<0>,2:125].[@-1,53:56='line',<0>,2:128]
2023-09-08 21:52:35:971 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opU.p,"!",nil,true, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-08 21:52:35:972 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:73]
2023-09-08 21:52:35:972 action-translator LogManager.java:25 qattr [@-1,29:31='opU',<0>,3:101].[@-1,33:33='p',<0>,3:105]
2023-09-08 21:52:35:972 action-translator LogManager.java:25 qattr [@-1,50:51='op',<0>,3:122].[@-1,53:56='line',<0>,3:125]
2023-09-08 21:52:35:972 action-translator LogManager.java:25 translate  $p = expresion.NewToString($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn() ) 
2023-09-08 21:52:35:972 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:112]
2023-09-08 21:52:35:972 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,4:139].[@-1,34:34='p',<0>,4:144]
2023-09-08 21:52:35:973 action-translator LogManager.java:25 qattr [@-1,38:41='opIz',<0>,4:148].[@-1,43:47='start',<0>,4:153]
2023-09-08 21:52:35:973 action-translator LogManager.java:25 qattr [@-1,61:64='opIz',<0>,4:171].[@-1,66:70='start',<0>,4:176]
2023-09-08 21:52:35:973 action-translator LogManager.java:25 translate $p = expresion.NewCapacity($ID.text, $ID.line, $ID.pos  )
2023-09-08 21:52:35:973 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,5:74]
2023-09-08 21:52:35:973 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,5:101].[@-1,31:34='text',<0>,5:104]
2023-09-08 21:52:35:973 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,5:111].[@-1,41:44='line',<0>,5:114]
2023-09-08 21:52:35:973 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,5:121].[@-1,51:53='pos',<0>,5:124]
2023-09-08 21:52:35:974 action-translator LogManager.java:25 translate  $p = expresion.NewVector(nil, $exp.p, $tam.p, 2, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-08 21:52:35:974 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:149]
2023-09-08 21:52:35:974 action-translator LogManager.java:25 qattr [@-1,32:34='exp',<0>,6:179].[@-1,36:36='p',<0>,6:183]
2023-09-08 21:52:35:974 action-translator LogManager.java:25 qattr [@-1,40:42='tam',<0>,6:187].[@-1,44:44='p',<0>,6:191]
2023-09-08 21:52:35:974 action-translator LogManager.java:25 qattr [@-1,51:56='CORIZQ',<0>,6:198].[@-1,58:61='line',<0>,6:205]
2023-09-08 21:52:35:975 action-translator LogManager.java:25 qattr [@-1,65:70='CORIZQ',<0>,6:212].[@-1,72:74='pos',<0>,6:219]
2023-09-08 21:52:35:975 action-translator LogManager.java:25 translate  $p = expresion.NewVector($live.l_e, nil, nil, 1, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-08 21:52:35:975 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:93]
2023-09-08 21:52:35:975 action-translator LogManager.java:25 qattr [@-1,27:30='live',<0>,7:118].[@-1,32:34='l_e',<0>,7:123]
2023-09-08 21:52:35:975 action-translator LogManager.java:25 qattr [@-1,51:56='CORIZQ',<0>,7:142].[@-1,58:61='line',<0>,7:149]
2023-09-08 21:52:35:975 action-translator LogManager.java:25 qattr [@-1,65:70='CORIZQ',<0>,7:156].[@-1,72:74='pos',<0>,7:163]
2023-09-08 21:52:35:975 action-translator LogManager.java:25 translate  $p = instructionExpre.NewStructExpre($ID.text, $l_StructExp.l, $ID.line, $ID.pos ) 
2023-09-08 21:52:35:975 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,8:109]
2023-09-08 21:52:35:975 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,8:146].[@-1,42:45='text',<0>,8:149]
2023-09-08 21:52:35:975 action-translator LogManager.java:25 qattr [@-1,49:59='l_StructExp',<0>,8:156].[@-1,61:61='l',<0>,8:168]
2023-09-08 21:52:35:976 action-translator LogManager.java:25 qattr [@-1,65:66='ID',<0>,8:172].[@-1,68:71='line',<0>,8:175]
2023-09-08 21:52:35:976 action-translator LogManager.java:25 qattr [@-1,75:76='ID',<0>,8:182].[@-1,78:80='pos',<0>,8:185]
2023-09-08 21:52:35:976 action-translator LogManager.java:25 translate $p = $primitivo.p
2023-09-08 21:52:35:976 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,9:38]
2023-09-08 21:52:35:976 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,9:43].[@-1,16:16='p',<0>,9:53]
2023-09-08 21:52:35:976 action-translator LogManager.java:25 translate $p = $expression.p
2023-09-08 21:52:35:976 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,10:87]
2023-09-08 21:52:35:976 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,10:92].[@-1,17:17='p',<0>,10:103]
2023-09-08 21:52:35:977 action-translator LogManager.java:25 translate $p = $casteo.p
2023-09-08 21:52:35:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,11:35]
2023-09-08 21:52:35:977 action-translator LogManager.java:25 qattr [@-1,6:11='casteo',<0>,11:40].[@-1,13:13='p',<0>,11:47]
2023-09-08 21:52:35:977 action-translator LogManager.java:25 translate $p = $if_exp.p
2023-09-08 21:52:35:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,12:35]
2023-09-08 21:52:35:977 action-translator LogManager.java:25 qattr [@-1,6:11='if_exp',<0>,12:40].[@-1,13:13='p',<0>,12:47]
2023-09-08 21:52:35:977 action-translator LogManager.java:25 translate $p = $switch_sent.p
2023-09-08 21:52:35:977 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,13:40]
2023-09-08 21:52:35:977 action-translator LogManager.java:25 qattr [@-1,6:16='switch_sent',<0>,13:45].[@-1,18:18='p',<0>,13:57]
2023-09-08 21:52:35:977 action-translator LogManager.java:25 translate  $p = $while_true.p 
2023-09-08 21:52:35:978 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,14:40]
2023-09-08 21:52:35:978 action-translator LogManager.java:25 qattr [@-1,7:16='while_true',<0>,14:45].[@-1,18:18='p',<0>,14:56]
2023-09-08 21:52:35:978 action-translator LogManager.java:25 translate $p = $callFunction.p
2023-09-08 21:52:35:978 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,15:41]
2023-09-08 21:52:35:978 action-translator LogManager.java:25 qattr [@-1,6:17='callFunction',<0>,15:46].[@-1,19:19='p',<0>,15:59]
2023-09-08 21:52:35:978 action-translator LogManager.java:25 translate  $p = instructionExpre.NewRemove($ID.text, $expression.p, $ID.line, $ID.pos) 
2023-09-08 21:52:35:978 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,16:147]
2023-09-08 21:52:35:979 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,16:179].[@-1,37:40='text',<0>,16:182]
2023-09-08 21:52:35:979 action-translator LogManager.java:25 qattr [@-1,44:53='expression',<0>,16:189].[@-1,55:55='p',<0>,16:200]
2023-09-08 21:52:35:979 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,16:204].[@-1,62:65='line',<0>,16:207]
2023-09-08 21:52:35:979 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,16:214].[@-1,72:74='pos',<0>,16:217]
2023-09-08 21:52:35:979 action-translator LogManager.java:25 translate  $p = expresion.NewcadenaFor($primitivo.p, $IN.line, $IN.pos) 
2023-09-08 21:52:35:979 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,17:59]
2023-09-08 21:52:35:979 action-translator LogManager.java:25 qattr [@-1,30:38='primitivo',<0>,17:87].[@-1,40:40='p',<0>,17:97]
2023-09-08 21:52:35:979 action-translator LogManager.java:25 qattr [@-1,44:45='IN',<0>,17:101].[@-1,47:50='line',<0>,17:104]
2023-09-08 21:52:35:979 action-translator LogManager.java:25 qattr [@-1,54:55='IN',<0>,17:111].[@-1,57:59='pos',<0>,17:114]
2023-09-08 21:52:35:980 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-08 21:52:35:980 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-08 21:52:35:980 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,20:168]
2023-09-08 21:52:35:980 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,20:196].[@-1,34:34='p',<0>,20:201]
2023-09-08 21:52:35:980 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,20:204].[@-1,40:43='text',<0>,20:207]
2023-09-08 21:52:35:980 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,20:213].[@-1,51:51='p',<0>,20:218]
2023-09-08 21:52:35:980 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,20:228].[@-1,64:67='line',<0>,20:231]
2023-09-08 21:52:35:981 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 21:52:35:981 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-08 21:52:35:981 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,21:157]
2023-09-08 21:52:35:981 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,21:185].[@-1,34:34='p',<0>,21:190]
2023-09-08 21:52:35:981 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,21:193].[@-1,40:43='text',<0>,21:196]
2023-09-08 21:52:35:981 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,21:202].[@-1,51:51='p',<0>,21:207]
2023-09-08 21:52:35:982 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,21:217].[@-1,64:67='line',<0>,21:220]
2023-09-08 21:52:35:982 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 21:52:35:983 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-08 21:52:35:984 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,22:245]
2023-09-08 21:52:35:984 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,22:273].[@-1,34:34='p',<0>,22:278]
2023-09-08 21:52:35:984 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,22:281].[@-1,40:43='text',<0>,22:284]
2023-09-08 21:52:35:984 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,22:290].[@-1,51:51='p',<0>,22:295]
2023-09-08 21:52:35:984 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,22:305].[@-1,64:67='line',<0>,22:308]
2023-09-08 21:52:35:984 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 21:52:35:984 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-08 21:52:35:984 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,23:135]
2023-09-08 21:52:35:985 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,23:163].[@-1,34:34='p',<0>,23:168]
2023-09-08 21:52:35:985 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,23:171].[@-1,40:43='text',<0>,23:174]
2023-09-08 21:52:35:985 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,23:180].[@-1,51:51='p',<0>,23:185]
2023-09-08 21:52:35:985 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,23:195].[@-1,64:67='line',<0>,23:198]
2023-09-08 21:52:35:985 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 21:52:35:985 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false, $op.line, localctx.(*Expr_aritContext).GetOp().GetColumn())
2023-09-08 21:52:35:985 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,24:135]
2023-09-08 21:52:35:985 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,24:163].[@-1,34:34='p',<0>,24:168]
2023-09-08 21:52:35:985 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,24:171].[@-1,40:43='text',<0>,24:174]
2023-09-08 21:52:35:986 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,24:180].[@-1,51:51='p',<0>,24:185]
2023-09-08 21:52:35:986 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,24:195].[@-1,64:67='line',<0>,24:198]
2023-09-08 21:52:35:986 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-08 21:52:35:986 action-translator LogManager.java:25 translate $p = expresion.NewCount($opIz.p, $opIz.start.GetLine(), $opIz.start.GetColumn()  )
2023-09-08 21:52:35:986 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,25:115]
2023-09-08 21:52:35:986 action-translator LogManager.java:25 qattr [@-1,25:28='opIz',<0>,25:139].[@-1,30:30='p',<0>,25:144]
2023-09-08 21:52:35:986 action-translator LogManager.java:25 qattr [@-1,34:37='opIz',<0>,25:148].[@-1,39:43='start',<0>,25:153]
2023-09-08 21:52:35:987 action-translator LogManager.java:25 qattr [@-1,57:60='opIz',<0>,25:171].[@-1,62:66='start',<0>,25:176]
2023-09-08 21:52:35:987 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-08 21:52:35:987 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 21:52:35:987 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 21:52:35:987 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 21:52:35:987 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 21:52:35:987 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-08 21:52:35:988 action-translator LogManager.java:25 translate $p = expresion.NewCasteo($expression.p, $typec.tc, $PARIZQ.line, localctx.(*CasteoContext).Get_PARIZQ().GetColumn() )
2023-09-08 21:52:35:988 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,713:51]
2023-09-08 21:52:35:988 action-translator LogManager.java:25 qattr [@-1,26:35='expression',<0>,713:76].[@-1,37:37='p',<0>,713:87]
2023-09-08 21:52:35:989 action-translator LogManager.java:25 qattr [@-1,41:45='typec',<0>,713:91].[@-1,47:48='tc',<0>,713:97]
2023-09-08 21:52:35:989 action-translator LogManager.java:25 qattr [@-1,52:57='PARIZQ',<0>,713:102].[@-1,59:62='line',<0>,713:109]
2023-09-08 21:52:35:989 action-translator LogManager.java:25 translate $tc = interfaces.FLOAT
2023-09-08 21:52:35:989 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,717:13]
2023-09-08 21:52:35:989 action-translator LogManager.java:25 translate $tc = interfaces.INTEGER
2023-09-08 21:52:35:989 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,718:14]
2023-09-08 21:52:35:990 action-translator LogManager.java:25 translate $tc = interfaces.INTEGER
2023-09-08 21:52:35:990 action-translator LogManager.java:25 attr [@-1,1:2='tc',<0>,719:11]
2023-09-08 21:52:35:991 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:991 action-translator LogManager.java:25 translate 
                    Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(Str_ep);
                
2023-09-08 21:52:35:991 action-translator LogManager.java:25 qattr [@-1,69:70='ID',<0>,3:67].[@-1,72:75='text',<0>,3:70]
2023-09-08 21:52:35:991 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,3:77].[@-1,90:90='p',<0>,3:88]
2023-09-08 21:52:35:991 action-translator LogManager.java:25 setAttr [@-1,115:115='l',<0>,4:21] [@-1,118:133=' arrayList.New()',<0>,4:24]
2023-09-08 21:52:35:991 action-translator LogManager.java:25 translate  arrayList.New()
2023-09-08 21:52:35:992 action-translator LogManager.java:25 attr [@-1,158:158='l',<0>,5:21]
2023-09-08 21:52:35:992 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:992 action-translator LogManager.java:25 translate 
                                                  Str_ep := instructionExpre.NewStructContenido($ID.text, $expression.p)
                                                  $list.l.Add(Str_ep);
                                                  $l = $list.l;
                                              
2023-09-08 21:52:35:992 action-translator LogManager.java:25 qattr [@-1,99:100='ID',<0>,10:97].[@-1,102:105='text',<0>,10:100]
2023-09-08 21:52:35:992 action-translator LogManager.java:25 qattr [@-1,109:118='expression',<0>,10:107].[@-1,120:120='p',<0>,10:118]
2023-09-08 21:52:35:993 action-translator LogManager.java:25 qattr [@-1,175:178='list',<0>,11:51].[@-1,180:180='l',<0>,11:56]
2023-09-08 21:52:35:994 action-translator LogManager.java:25 setAttr [@-1,247:247='l',<0>,12:51] [@-1,250:257=' $list.l',<0>,12:54]
2023-09-08 21:52:35:994 action-translator LogManager.java:25 translate  $list.l
2023-09-08 21:52:35:994 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,9:151].[@-1,7:7='l',<0>,9:156]
2023-09-08 21:52:35:994 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:35:995 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo(num,interfaces.INTEGER, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
      
2023-09-08 21:52:35:995 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,737:38].[@-1,47:50='text',<0>,737:45]
2023-09-08 21:52:35:995 action-translator LogManager.java:25 attr [@-1,155:155='p',<0>,741:13]
2023-09-08 21:52:35:995 action-translator LogManager.java:25 qattr [@-1,207:212='NUMBER',<0>,741:65].[@-1,214:217='line',<0>,741:72]
2023-09-08 21:52:35:995 action-translator LogManager.java:25 translate 
              num,err := strconv.ParseFloat($FLOAT.text,64)
              if err!= nil{
                  fmt.Println(err)
              }
              $p = expresion.NewPrimitivo (num,interfaces.FLOAT, $FLOAT.line, localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())
      
2023-09-08 21:52:35:995 action-translator LogManager.java:25 qattr [@-1,47:51='FLOAT',<0>,744:45].[@-1,53:56='text',<0>,744:51]
2023-09-08 21:52:35:996 action-translator LogManager.java:25 attr [@-1,160:160='p',<0>,748:15]
2023-09-08 21:52:35:996 action-translator LogManager.java:25 qattr [@-1,211:215='FLOAT',<0>,748:66].[@-1,217:220='line',<0>,748:72]
2023-09-08 21:52:35:996 action-translator LogManager.java:25 translate $p = $strings.p
2023-09-08 21:52:35:996 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,751:15]
2023-09-08 21:52:35:996 action-translator LogManager.java:25 qattr [@-1,6:12='strings',<0>,751:20].[@-1,14:14='p',<0>,751:28]
2023-09-08 21:52:35:996 action-translator LogManager.java:25 translate 
                chr := $CHAR.text
                $p = expresion.NewPrimitivo(chr[1:len(chr)-1],interfaces.CHAR, $CHAR.line, $CHAR.pos)
                
2023-09-08 21:52:35:996 action-translator LogManager.java:25 qattr [@-1,26:29='CHAR',<0>,754:24].[@-1,31:34='text',<0>,754:29]
2023-09-08 21:52:35:997 action-translator LogManager.java:25 attr [@-1,54:54='p',<0>,755:17]
2023-09-08 21:52:35:997 action-translator LogManager.java:25 qattr [@-1,117:120='CHAR',<0>,755:80].[@-1,122:125='line',<0>,755:85]
2023-09-08 21:52:35:997 action-translator LogManager.java:25 qattr [@-1,129:132='CHAR',<0>,755:92].[@-1,134:136='pos',<0>,755:97]
2023-09-08 21:52:35:997 action-translator LogManager.java:25 translate  $p = expresion.NewPrimitivo(true,interfaces.BOOLEAN, $TRUE.line, localctx.(*PrimitivoContext).Get_TRUE().GetColumn())
2023-09-08 21:52:35:998 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,760:14]
2023-09-08 21:52:35:998 action-translator LogManager.java:25 qattr [@-1,55:58='TRUE',<0>,760:67].[@-1,60:63='line',<0>,760:72]
2023-09-08 21:52:35:998 action-translator LogManager.java:25 translate  $p = expresion.NewPrimitivo(false,interfaces.BOOLEAN, $FALSE.line, localctx.(*PrimitivoContext).Get_FALSE().GetColumn())
2023-09-08 21:52:35:998 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,761:14]
2023-09-08 21:52:35:998 action-translator LogManager.java:25 qattr [@-1,56:60='FALSE',<0>,761:68].[@-1,62:65='line',<0>,761:74]
2023-09-08 21:52:35:999 action-translator LogManager.java:25 translate  $p = $list.p
2023-09-08 21:52:35:999 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,762:25]
2023-09-08 21:52:35:999 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,762:30].[@-1,12:12='p',<0>,762:35]
2023-09-08 21:52:35:999 action-translator LogManager.java:25 translate 
2023-09-08 21:52:35:999 action-translator LogManager.java:25 translate  
      $p = expresion.NewIdentificador($ID.text, $ID.line, localctx.(*ListIDArrayContext).Get_ID().GetColumn() )
2023-09-08 21:52:35:999 action-translator LogManager.java:25 attr [@-1,10:10='p',<0>,3:7]
2023-09-08 21:52:36:000 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,3:39].[@-1,45:48='text',<0>,3:42]
2023-09-08 21:52:36:000 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,3:49].[@-1,55:58='line',<0>,3:52]
2023-09-08 21:52:36:000 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 21:52:36:000 action-translator LogManager.java:25 translate  $p = expresion.NewArrayAccess($list.p, $expression.p, $CORIZQ.line, $CORIZQ.pos ) 
2023-09-08 21:52:36:000 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:136]
2023-09-08 21:52:36:000 action-translator LogManager.java:25 qattr [@-1,32:35='list',<0>,6:166].[@-1,37:37='p',<0>,6:171]
2023-09-08 21:52:36:000 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,6:175].[@-1,52:52='p',<0>,6:186]
2023-09-08 21:52:36:000 action-translator LogManager.java:25 qattr [@-1,56:61='CORIZQ',<0>,6:190].[@-1,63:66='line',<0>,6:197]
2023-09-08 21:52:36:000 action-translator LogManager.java:25 qattr [@-1,70:75='CORIZQ',<0>,6:204].[@-1,77:79='pos',<0>,6:211]
2023-09-08 21:52:36:000 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:36:001 action-translator LogManager.java:25 translate  $p = expresion.NewStructAccess($list.p, $ID.text, $list.start.GetLine(), $list.start.GetColumn() )  
2023-09-08 21:52:36:001 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:111]
2023-09-08 21:52:36:001 action-translator LogManager.java:25 qattr [@-1,33:36='list',<0>,7:142].[@-1,38:38='p',<0>,7:147]
2023-09-08 21:52:36:001 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,7:151].[@-1,45:48='text',<0>,7:154]
2023-09-08 21:52:36:001 action-translator LogManager.java:25 qattr [@-1,52:55='list',<0>,7:161].[@-1,57:61='start',<0>,7:166]
2023-09-08 21:52:36:001 action-translator LogManager.java:25 qattr [@-1,75:78='list',<0>,7:184].[@-1,80:84='start',<0>,7:189]
2023-09-08 21:52:36:002 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 21:52:36:003 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 21:52:36:004 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-08 21:52:36:004 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,774:13].[@-1,23:26='text',<0>,774:20]
2023-09-08 21:52:36:004 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,774:32].[@-1,42:45='text',<0>,774:39]
2023-09-08 21:52:36:004 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,775:7]
2023-09-08 21:52:36:004 action-translator LogManager.java:25 qattr [@-1,107:112='STRING',<0>,775:55].[@-1,114:117='line',<0>,775:62]
2023-09-08 21:52:36:005 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-08 21:52:36:005 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,778:13].[@-1,23:26='text',<0>,778:20]
2023-09-08 21:52:36:005 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,778:32].[@-1,42:45='text',<0>,778:39]
2023-09-08 21:52:36:005 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,779:7]
2023-09-08 21:52:36:005 action-translator LogManager.java:25 qattr [@-1,110:115='STRING',<0>,779:58].[@-1,117:120='line',<0>,779:65]
2023-09-08 21:52:36:005 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STR, $STRING.line, localctx.(*StringsContext).Get_STRING().GetColumn())
2023-09-08 21:52:36:005 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,782:13].[@-1,23:26='text',<0>,782:20]
2023-09-08 21:52:36:006 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,782:32].[@-1,42:45='text',<0>,782:39]
2023-09-08 21:52:36:006 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,783:7]
2023-09-08 21:52:36:006 action-translator LogManager.java:25 qattr [@-1,107:112='STRING',<0>,783:55].[@-1,114:117='line',<0>,783:62]
2023-09-08 21:52:37:540 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




2023-09-08 21:52:37:540 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




2023-09-08 21:52:37:643 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




2023-09-08 21:52:37:644 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "Servidor1/interfaces"
    import "Servidor1/expresion"
    import "Servidor1/instructionExpre"
    import "Servidor1/instruction"




